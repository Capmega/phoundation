#!/usr/bin/php
<?php
/*
 * This script can translate php code
 *
 * noutf / noutf8 / noutf8check  : Do not perform file content UTF8 checks
 *
 * Methods :
 *
 * translate                     : Generate the directories for each configured language
 *
 * clear                         : Delete all supported translations
 *
 * Options :
 *
 * -l --languages                : Specify the supported languages, otherwise
 *                                 $_CONFIG['language']['supported'] is used
 *
 * -m --mode                     : Specify the translation mode (strict, full, most or none)
 *
 * scan / scanonly / onlyscan    : Only perform translation scan, do not actually translate the files (NOT YET IMPLEMENTED)
 *
 * noupdate / nodb               : Do not send updated translations back to the translation server (NOT YET IMPLEMENTED)
 *
 * @copyright Sven Oostenbrink <support@capmega.com>, Johan Geuze
 *
 * INFO:
 * If curl causes an exception due to an HTTP100 response
 * it is probably caused by Apache having issues with Expect headers
 * as it's explained in
 * http://stackoverflow.com/questions/3889574/apache-and-mod-proxy-not-handling-http-100-continue-from-client-http-417
 *
 * The solution is to add
 * <IfModule mod_headers.c>
 *    RequestHeader unset Expect early
 * </IfModule>
 * in the translation server apache configuration
 */
$help = '';

$usage = '';

require_once(dirname(__FILE__).'/../../libs/startup.php');
load_libs('file,inet,curl,crypt');
load_config('translate');



/*
 * Only these languages are allowed
 */
$allowable_languages = array('es',
                             'pt',
                             'nl',
                             'de');

$available_modes     = array('strict',
                             'full',
                             'most',
                             'none');



switch(cli_method()){
    case 'clear':
        cli_no_arguments_left();

        foreach($languages as $language){
            if($language == 'en'){
                continue;
            }

            cli_log(tr('Deleting ":language"', array(':language' => $language)));
            file_delete_tree(ROOT.'www/'.$language);
        }

        break;

    case 'translate':
        $onlyscan    = (cli_argument('--scan')   or cli_argument('--only-scan') or cli_argument('--scanonly'));
        $noutf8check = (cli_argument('--no-utf') or cli_argument('--no-utf8')   or cli_argument('--no-utf8-check'));
        $mode        = cli_argument('--mode'     , true, $_CONFIG['translator']['mode']);
        $languages   = cli_argument('--languages', true, implode(",", array_keys($_CONFIG['language']['supported'])));
        $languages   = explode(',', $languages);

        cli_no_arguments_left();

        /*
         * Validate command line parameters
         */
        if(empty($languages)) {
            throw new bException(tr('No languages specified'), 'translation_error');
        }

        if(!in_array($mode, $available_modes)){
            throw new bException(tr('Unknown mode ":mode"', array(':mode' => $mode)), 'translation_error');
        }

        foreach ($languages as $target_language) {
            if(!in_array($target_language, $allowable_languages)) {
                if($target_language == 'en'){
                    log_message('Ignoring translation to English', 'translate', 'yellow');
                    continue;
                }

                throw new bException(tr('Unknown language :language specified', array(':language' => $target_language)));
                return;
            }

            $source_dir = ROOT.'www/en';
            $target_dir = ROOT.'www/'.$target_language;

            cli_log(tr('translate: Starting :language', array(':language' => $target_language)), 'white');

            if(VERBOSE){
                cli_log(tr('Searching for translateable strings : '), '', false);
            }

            if($noutf8check){
                cli_log(tr('Skipping UTF8 check due to "noutf8check" command line parameter'), 'yellow');
            }

            $translations = array();
            $failed_html  = array();
            $failed_php   = array();
            $count        = 0;

            $params = array('source_dir'   => $source_dir,
                            'target_dir'   => $target_dir,
                            'noutf8check'  => $noutf8check,
                            'failed_html'  => array(),
                            'failed_php'   => array(),
                            'translations' => array(),
                            'count'        => 0);

            file_tree_execute(array('path'      => ROOT,
                                    'recursive' => true,
                                    'params'    => $params,
                                    'callback'  => function($file, $type, $params){

                if(file_get_extension($file) != 'php') {
                    return;
                }

                $target_file = $params['target_dir'].str_replace($params['source_dir'], '', $file);

                /*
                 * Timestamp check, we skip files that were not modified since last scan
                 * Instead of an == comparation we check that the difference is less than 10 seconds
                 * Since a  touch on the entire project wont be made on all files at exactly the same second
                 */
                if(file_exists($target_file) and (abs(filemtime($file) - filemtime($target_file)) < 10)){
                    if(VERBOSE){
                        cli_log(tr('Skipping file %file% because it hasn\'t changed since last string scan', array('%file%' => $file)), 'yellow');
                        return;
                    }
                }

                if(VERBOSE){
                    cli_log(tr('Scanning file ":file"', array(':file' => $file)), 'white');
                }

                $content = file_get_contents($file);

                /*
                 * UTF8 check!
                 */
                if(!$params['noutf8check']){
                    if(!str_is_utf8($content)){
                        /*
                         * Crap, this file is not UTF8 and will bork the translator. Update file contents, and safe file to force all files be UTF8
                         */
                        $content = utf8_encode($content);
                        file_put_contents($file, $content);

                        $forcedutf8[str_replace(ROOT, '', $file)] = true;

                        if(VERBOSE){
                            cli_dot();
                        }
                    }
                }

                preg_match_all('/tr\([\'"](.*?)[\'"](:?\s*,\s*array\((.*)\))?\)/iu', $content , $matches, PREG_PATTERN_ORDER);

                if(!empty($matches[1])) {
                    foreach($matches[1] as $key => $value) {
                        if(strip_tags($value, isset_get($_CONFIG['translator']['allowed_tags'])) != $value) {
                            /*
                             * Translation string contains HTML!
                             */
                            if(VERBOSE){
                                cli_dot(10, '.', 'red');
                            }

                            $params['failed_html'][$value] = $file;
                            $params['count']++;

                        } elseif(strstr($value,'.$')) {
                            /*
                             * Translation string contains PHP variables!
                             */
                            if(VERBOSE){
                                cli_dot(10, '.', 'red');
                            }

                            $params['failed_php'][$value] = $file;
                            $params['failed_php']++;

                        } else {
                            /*
                             * Translation string is ok
                             */
                            if(VERBOSE){
                                cli_dot();
                            }

                            $short_file = str_replace(ROOT, '', $file);
                            $params['translations'][$short_file][$value] = '';
                            $params['failed_php']++;
                        }
                    }
                }
            }));

            if(VERBOSE){
                cli_log(tr('Found :count strings', array(':count' => number_format($count))), 'white');
            }

            if(count($params['failed_html']) > 0) {
                foreach($params['failed_html'] as $string => $file) {
                    cli_log(tr('Contains HTML ":html" in ":file"', array(':html' => $string, ':file' => $file)), 'red');
                }

               throw new bException(tr('Translatable strings with disallowed HTML tags found'), 'translation-error');
            }

            if(count($params['failed_php']) > 0) {
                foreach($params['failed_php'] as $string => $file) {
                    cli_log(tr('Contains PHP ":php" in ":file"', array(':php' => $string, ':file' => $file)), 'red');
                }

               throw new bException(tr('Translatable strings with PHP code found'), 'translation-error');
            }

            if(VERBOSE){
                cli_log(tr('Requesting translations from server'), '', false);
            }

            $timestamp = date('c');

            //construct data for sending
            $data = array('project'         => PROJECT,
                          'auth_key'        => sha1(PROJECT.$_CONFIG['translator']['api_key'].$timestamp),
                          'translations'    => $params['translations'],
                          'target_language' => $target_language,
                          'timestamp'       => $timestamp,
                          'options'         => array('mode' => $mode));

            //encrypt the data
            $encrypted_data = encrypt(json_encode($data), $_CONFIG['translator']['passphrase']);
            //send translations to server and wait for response

            try{

$_CONFIG['translator']['url'] = 'http://toolkit.capmega.com.l.capmega.com/api/translate.php';
                $response = curl_get(array('url'         => $_CONFIG['translator']['url'],
                                           'getdata'     => true,
                                           'proxies'     => false,
                                           'getheaders'  => false,
                                           'post'        => array('data' => $encrypted_data),
                                           'httpheaders' => false));

            }catch(Exception $e){
                if(substr($e->getCode(), 0, 4) == 'HTTP'){
                    $server_message = $e->getData()['data'];
                    $code           = $e->getCode();

                    throw new bException(tr('Server connection gave HTTP code ":code" with server message ":message"', array(':code' => $code, ':message' => $server_message)), 'translation_error');
                }

                throw new bException(tr('Error trying to connect with server : ":error"', array(':error' => $e->getMessage())), 'translation_error');
            }

            if(empty($response['status'])){
                throw new bException(tr('Error trying to connect with server'), 'translation_error');
            }

            $returned_data = json_decode(decrypt(trim($response['data']), $_CONFIG['translator']['passphrase']), true);

            if(!is_array($returned_data) or ($returned_data['status'] != 'success')){
                throw new bException(tr('Failed to receive translations', 'translation_error'));
            }


            if(VERBOSE){
                cli_log('Received translations', 'green');
            }

            $params['translations'] = $returned_data['translations'];

            //translations ready, start processing.
            //delete target dir
            try{
                // if(VERBOSE){
                //     cli_log('Deleting target dir '.$target_dir, 'translate', '', true);
                // }

                shell_exec('rm -rf '.$target_dir);

                // Copy english to target dir
                if(VERBOSE){
                    cli_log(tr('Copying ":source" to ":target"', array(':source' => $params['source_dir'], ':target' => $target_dir)));
                }

                shell_exec('cp -a '.$params['source_dir'].' '.$target_dir);

                // :DELETE: Its not going to save too much space, and doesnt make sense
                //          to only link css and forgot about js, images, etc
                // // CSS should be symlink since it wont change between languages
                // file_delete_tree(slash($target_dir).'pub/css');
                // symlink('../../en/pub/css', slash($target_dir).'pub/css');

                //Apply translations
                if(VERBOSE){
                    cli_log(tr('Applying translations'), '', true);
                }

                foreach($params['translations'] as $short_file => $data) {
                    if(VERBOSE){
                        cli_log(tr('Translating ":file"', array(':file' => $short_file)), '', false);
                    }

                    if(!empty($forcedutf8[$short_file])){
                        if(VERBOSE){
                            cli_log(tr('*FORCED-UTF8* '), 'yellow', false);
                        }
                    }

                    if(!file_exists(ROOT.$short_file)) {
                        cli_log(tr(' File ":file" not found', array(':file' => ROOT.$short_file)), 'red');

                    }else{
                        //store new file
                        $filedata    = file_get_contents(ROOT.$short_file);
                        $target_file = str_replace($params['source_dir'], $target_dir, ROOT.$short_file);

                        //replace strings
                        foreach($data as $source => $translation) {
                            if(VERBOSE){
                                cli_dot();
                            }

                            $from     = array('tr("'.$source.'"'     , "tr('".$source."'");
                            $to       = array('tr("'.$translation.'"', "tr('".$translation."'");
                            $filedata = str_replace($from, $to, $filedata);
                        }

                        file_put_contents($target_file, $filedata);

                        if(VERBOSE){
                            cli_log('Saved', 'green');
                        }
                    }
                }

                cli_log(tr('Translations completed'), 'green');

                if($returned_data['stats']['translations_missing'] > 0) {
                    cli_log('Missing ":count" translations', array(':count' => number_format($returned_data['stats']['translations_missing'])), 'yellow');
                }

                cli_log('Successfully translated ":count" sections', array(':count' => number_format($returned_data['stats']['translations_done'])), 'green');

            }catch(Exception $e){
                throw new bException(tr('Error applying ":lang" translations', array(':lang' => $target_language)), $e);
            }
        }

        break;

    case '':
        throw new bException(tr('No method specified'), 'no-method');

    default:
        throw new bException(tr('Unknown method ":method" specified', array(':method' => cli_method())), 'unknown');
}
?>
