#!/usr/bin/php
<?php

use Phoundation\Accounts\Exception\AccountsException;
use Phoundation\Cli\Cli;
use Phoundation\Cli\Documentation;
use Phoundation\Core\Log\Log;
use Phoundation\Data\Validator\ArgvValidator;
use Phoundation\Filesystem\File;
use Phoundation\Servers\SshAccount;


/**
 * Script system/servers/accounts/create
 *
 * This script will create a new account with the specified properties
 *
 * @author Sven Olaf Oostenbrink <so.oostenbrink@gmail.com>
 * @license http://opensource.org/licenses/GPL-2.0 GNU Public License, Version 2
 * @copyright Copyright (c) 2022 Sven Olaf Oostenbrink <so.oostenbrink@gmail.com>
 * @package Phoundation\Scripts
 */
Documentation::usage('./cli system servers accounts modify IDENTIFIER [OPTIONS]
./cli system servers accounts modify NAME -u phoundation -k KEYFILE -d "This is a test account"');

Documentation::help('This script allows you to modify existing SSH accounts.



ARGUMENTS (All arguments in square brackets are optional)



IDENTIFIER                              The identifier for the SSH account

-n / --name NAME                        The name for the SSH account

-u / --username USERNAME                The username for this SSH account

[-i / --ssh-key-file FILENAME]          The SSH private key file. If not specified, the script will turn interactive and 
                                        request you paste the contents of the private key file 

[-d / --description]                    A description for this SSH account');



// Validate arguments
ArgvValidator::new()
    ->select('identifier', true)->isName()
    ->select('-n,--name', true)->isName()
    ->select('-u,--username', true)->isVariable()
    ->select('-i,--ssh_key_file', true)->isOptional()->isFile()
    ->select('-d,--description', true)->isOptional()->isDescription()
    ->noArgumentsLeft()
    ->validate();



// Load account, ensure the new account name doesn't exist yet
$account = SshAccount::get($argv['identifier']);

if ($argv['name']) {
    // If changing name, ensure it doesn't exist yet as its a unique identifier
    SshAccount::notExists($argv['name'], $account->getId(), true);
}



// Add SSH key for this account either from file or from CLI input
if ($argv['ssh_key_file']) {
    File::new($argv['ssh_key_file'], $argv['ssh_key_file'])->ensureReadable();
    $argv['ssh_key'] = file_get_contents($argv['ssh_key_file']);
} else {
    $argv['ssh_key'] = Cli::readPassword(tr('Please paste the private key here:'));
}



// Modify and save
$account->modify($argv)->save();



// Done!
Log::success(tr('Created new SSH account ":account"', [':account' => $account->getName()]));