#!/usr/bin/php
<?php
use Phoundation\Cli\Color;
use Phoundation\Cli\Scripts;
use Phoundation\Core\Config;
use Phoundation\Core\Core;
use Phoundation\Core\Log;
use Phoundation\Core\Strings;
use Phoundation\Databases\Sql\Sql;
use Phoundation\Developer\Debug;
use Phoundation\Exception\ScriptException;



/**
 * Script system/info
 *
 * This script will display detailed information about the current framework, project, database ,etc.
 *
 * @author Sven Olaf Oostenbrink <so.oostenbrink@gmail.com>
 * @license http://opensource.org/licenses/GPL-2.0 GNU Public License, Version 2
 * @copyright Copyright (c) 2022 Sven Olaf Oostenbrink <so.oostenbrink@gmail.com>
 * @package Phoundation\System
 */
$usage = './cli system info';

$help  = 'The info script will show detailed information about the current framework, project, database and more';

Scripts::noArgumentsLeft();

try {
    Sql()->query('SELECT 1');

}catch(Exception $e) {
    if ($e->getCode() != '1049') {
        throw $e;
    }

    $no_db = true;
    define('FRAMEWORKDBVERSION', tr('database ":db" does not exist', [':db' => Config::get('databases.system.name')]));
    define('PROJECTDBVERSION'  , tr('database ":db" does not exist', [':db' => Config::get('databases.system.name')]));
}

//$framework_status = version_compare(Core::FRAMEWORKCODEVERSION, Core::getVersion('framework'));
//$project_status   = version_compare(Config::get('project.version')  , Core::getVersion('project'));

Log::cli(Color::apply(Strings::size(tr('Project name:')              , 27), 'white') . ' ' . PROJECT);
//Log::notice(Color::apply(Strings::size(tr('Framework code version:')    , 27), ($framework_status ? (($framework_status < 0) ? 'error' : 'warning') : 'white')) . ' ' . Core::FRAMEWORKCODEVERSION);
//Log::notice(Color::apply(Strings::size(tr('Framework database version:'), 27), ($framework_status ? (($framework_status < 0) ? 'error' : 'warning') : 'white')) . ' ' . Sql::db()->getDatabaseVersion());
//Log::notice(Color::apply(Strings::size(tr('Project code version:')      , 27), ($project_status   ? (($project_status < 0)   ? 'error' : 'warning') : 'white')) . ' ' . PROJECTCODEVERSION);
//Log::notice(Color::apply(Strings::size(tr('Project database version:')  , 27), ($project_status   ? (($project_status < 0)   ? 'error' : 'warning') : 'white')) . ' ' . PROJECTDBVERSION);
//Log::notice(Color::apply(Strings::size(tr('Init required:')             , 27), 'white') . ' ' . Strings::boolean((Core::FRAMEWORKCODEVERSION != FRAMEWORKDBVERSION) or (PROJECTCODEVERSION != PROJECTDBVERSION)));
Log::cli(Color::apply(Strings::size(tr('Platform:')                  , 27), 'white') . ' ' . PLATFORM);
Log::cli(Color::apply(Strings::size(tr('Environment:')               , 27), 'white') . ' ' . ENVIRONMENT);
Log::cli(Color::apply(Strings::size(tr('Production:')                , 27), 'white') . ' ' . Strings::boolean(Debug::production()));
Log::cli(Color::apply(Strings::size(tr('Debug:')                     , 27), 'white') . ' ' . Strings::boolean(Debug::enabled()));
//Log::notice(Color::apply(Strings::size(tr('Core database:')             , 27), 'white') . ' ' . Config::get('databases.system.name'));
//
//// Show the following lines only if the core database is available
//if (empty($no_db)) {
//    Log::notice(Color::apply(Strings::size(tr('Active users:')          , 27), 'white') . ' ' . sql_get('SELECT COUNT(`id`) AS `count` FROM `users` WHERE `status` IS NULL', true));
//
//    if (($framework_status < 0) or ($project_status < 0)) {
//        Log::notice();
//        throw new ScriptException(tr('One or both database versions are ahead of the code version. Fix this with running the init script with  "./scripts/base/init reset"'));
//    }
//
//    if (($framework_status > 0) or ($project_status > 0)) {
//        Log::notice();
//        throw new ScriptException(tr('One or both database versions are behind the code version. Fix this with running the init script with "./scripts/base/init"'));
//    }
//}
