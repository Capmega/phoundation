#!/usr/bin/php
<?php

use Phoundation\Accounts\Exception\AccountsException;
use Phoundation\Accounts\Roles\Role;
use Phoundation\Accounts\Users\User;
use Phoundation\Cli\Cli;
use Phoundation\Core\Config;
use Phoundation\Core\Log;
use Phoundation\Data\Exception\DataEntryNotExistsException;
use Phoundation\Data\Validator\ArgvValidator;



/**
 * Script system/accounts/users/create
 *
 * This script will create a new user with the specified properties
 *
 * @author Sven Olaf Oostenbrink <so.oostenbrink@gmail.com>
 * @license http://opensource.org/licenses/GPL-2.0 GNU Public License, Version 2
 * @copyright Copyright (c) 2022 Sven Olaf Oostenbrink <so.oostenbrink@gmail.com>
 * @package Phoundation\Scripts
 */
$usage = './cli system accounts users create EMAIL [OPTIONS]
./cli system users create user@example.com -d "This is a test user"';

$help  = 'This script allows you to create users



ARGUMENTS


EMAIL                                   The email address for the user

-n / --name                             The name for the user

-r / --roles ROLE[,ROLE,ROLE]           A comma separated list of the roles that this user has on this system. The roles 
                                        must already exist. These roles will grant the user rights which will give him 
                                        or her access to the various parts of the system

[-g / --gender]

[-t / --title]

[-l / --language]

[-d / --description]

[-c / --comments]

[-u / --username]

[-a / --address]

[-w / --website]

[-p / --phones]

[-b / --birthday]

[-t / --timezone]

[--domain]

[--lead-by]

[--country]

[--state]

[--city]

[--is-leader]                           If specified, this user will be registered as having a leadership position';



// Validate arguments
ArgvValidator::new()
    ->select('email', true)->isEmail()
    ->select('-a,--address', true)->isOptional(null)->hasMaxCharacters(255)->isPrintable()
    ->select('-b,--birthday', true)->isOptional(null)->isDate()
    ->select('-c,--comments', true)->isOptional(null)->isDescription()
    ->select('-d,--description', true)->isOptional(null)->isDescription()
    ->select('-g,--gender', true)->isOptional(null)->isGender()
    ->select('-l,--language', true)->isOptional(null)->isName()
    ->select('-n,--name', true)->isName()
    ->select('-p,--phones', true)->isOptional(null)->isPhones()
    ->select('-t,--title', true)->isOptional(null)->isName()
    ->select('-u,--username', true)->isOptional(null)->isDescription()->isName()
    ->select('-w,--website', true)->isOptional(null)->isUrl()
    ->select('--no-password')->isOptional(false)->isBoolean()
    ->select('--timezone', true)->isOptional(null)->isTimezone()
    ->select('--domain', true)->isOptional(Config::get('web.domains.primary.domain'))->isDomain()
    ->select('--is-leader')->isOptional(false)->isBoolean()
    ->select('--lead-by', true)->isOptional(null)->isEmail()
    ->select('--country', true)->isOptional(null)->isName()
    ->select('--state', true)->isOptional(null)->isName()
    ->select('--city', true)->isOptional(null)->isName()
    ->select('--company', true)->isOptional(null)->isName()
    ->select('--department', true)->isOptional(null)->isName()
    ->select('--branch', true)->isOptional(null)->isName()
    ->select('-r,--roles,--role', true)->isOptional(null)->sanitizeForceArray()->each()->isName()
    ->noArgumentsLeft()
    ->validate();



// Check if the user already exists
if (User::exists($argv['email'])) {
    throw AccountsException::new(tr('Cannot create user with email ":email", it already exists', [
        ':email' => $argv['email']
    ]))->makeWarning();
}



// Ensure that specified roles exist
try {
    foreach ($argv['roles'] as &$role) {
        $role = Role::get($role);
    }

    unset($role);
}catch (DataEntryNotExistsException $e) {
    throw $e->makeWarning();
}



// Add password for this user
if (!$argv['no_password']) {
    $argv['password']          = Cli::readPassword(tr('Please type the users password:'));
    $argv['password_validate'] = Cli::readPassword(tr('Please re-type the users password:'));
}



// Create user
$user = User::new()
    ->setEmail($argv['email'])
    ->setName($argv['name'])
    ->setTitle($argv['title'])
    ->setGender($argv['gender'])
    ->setLanguage($argv['language'])
    ->setDescription($argv['description'])
    ->setComments($argv['comments'])
    ->setUsername($argv['username'])
    ->setAddress($argv['address'])
    ->setWebsite($argv['website'])
    ->setPhones($argv['phones'])
    ->setBirthday($argv['birthday'])
    ->setTimezone($argv['timezone'])
    ->setLeader($argv['lead_by'])
    ->setIsLeader($argv['is_leader'])
    ->setCountry($argv['country'])
    ->setState($argv['state'])
    ->setCity($argv['city'])
    ->setCompany($argv['company'])
    ->setBranch($argv['branch'])
    ->setDepartment($argv['department'])
    ->save();



// Update the users password
if (!$argv['no_password']) {
    $user
        ->validatePassword($argv['password'], $argv['password_validate'])
        ->setPassword($argv['password'], $argv['password_validate']);
}



// Set users roles
$user->roles()->add($argv['roles']);



// Done!
Log::success(tr('Created new user ":user"', [':user' => $user->getDisplayName()]));