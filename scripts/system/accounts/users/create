#!/usr/bin/php
<?php

declare(strict_types=1);

use Phoundation\Accounts\Roles\Role;
use Phoundation\Accounts\Users\User;
use Phoundation\Cli\Cli;
use Phoundation\Cli\Documentation;
use Phoundation\Core\Log\Log;
use Phoundation\Data\Validator\ArgvValidator;


/**
 * Script system/accounts/users/create
 *
 * This command will create a new user with the specified properties
 *
 * @todo Add support for receiving the user password over STDIN so that interactive mode is no longer required
 * @author Sven Olaf Oostenbrink <so.oostenbrink@gmail.com>
 * @license http://opensource.org/licenses/GPL-2.0 GNU Public License, Version 2
 * @copyright Copyright (c) 2022 Sven Olaf Oostenbrink <so.oostenbrink@gmail.com>
 * @package Phoundation\Scripts
 */

// Documentation
Documentation::autoComplete(User::getAutoComplete());

Documentation::usage(tr('./pho system accounts users create -e EMAIL [OPTIONS]
./pho system users create user@example.com -d "This is a test user"'));

Documentation::help(User::getHelp('This command allows you to create new users.

NOTE: This script is interactive as it asks the password for the user on the command line! ') . '


EXTRA INFORMATION



[--roles ROLE[,ROLE,ROLE]               A comma separated list of the roles that this user has on this system. The roles 
[--role  ROLE[,ROLE,ROLE]               must already exist. These roles will grant the user rights which will give him 
[-r      ROLE[,ROLE,ROLE]               or her access to the various parts of the system

--no-password                           If this flag has been specified, the user password will not be set.');


// Validate user roles
$argv = ArgvValidator::new()
    ->select('--no-password')->isOptional(false)->isBoolean()
    ->select('--roles', true)->isOptional()->sanitizeForceArray()->each()->isName()
    ->validate();


// Ensure that specified roles exist
if ($argv['roles']) {
    foreach ($argv['roles'] as &$role) {
        $role = Role::get($role);
    }

    unset($role);
}


// Create user and set users roles
$user = User::new()->apply()->save();
$user->roles()->add($argv['roles']);


// Get update the users password
if (!$argv['no_password']) {
    try {
        $password          = Cli::readPassword(tr('Please type the users password:'));
        $password_validate = Cli::readPassword(tr('Please re-type the users password:'));

        $user->setPassword($password, $password_validate);

    } catch (Throwable $e) {
        // Password update failed, remove the user and continue, so we can retry later
        $user->erase();
        throw $e;
    }
}


// Done!
Log::success(tr('Created new user ":user"', [':user' => $user->getDisplayName()]));