#!/usr/bin/php
<?php

use Phoundation\Accounts\Roles\Role;
use Phoundation\Accounts\Users\User;
use Phoundation\Cli\Documentation;
use Phoundation\Core\Config;
use Phoundation\Core\Log\Log;
use Phoundation\Data\Validator\ArgvValidator;


/**
 * Script system/accounts/users/modify
 *
 * This script will modify a user with the specified properties
 *
 * @author Sven Olaf Oostenbrink <so.oostenbrink@gmail.com>
 * @license http://opensource.org/licenses/GPL-2.0 GNU Public License, Version 2
 * @copyright Copyright (c) 2022 Sven Olaf Oostenbrink <so.oostenbrink@gmail.com>
 * @package Phoundation\Scripts
 */
Documentation::autoComplete(User::getAutoComplete([
    'positions' => [
        0 => [
            'word'   => 'SELECT `email` FROM `accounts_users` WHERE `email` LIKE :word AND `status` IS NULL',
            'noword' => 'SELECT `email` FROM `accounts_users` WHERE `status` IS NULL LIMIT ' . Config::getInteger('shell.autocomplete.limit', 50)
        ]
    ],
]));

Documentation::usage('./cli system accounts users modify USER [OPTIONS]
./cli system users modify USER -l -i --to ENVIRONMENT');

Documentation::help(User::getHelp('This script allows you to modify users

This script allows you to modify all user data, with the exception of the password or status. If you wish to change the 
status, please use the "delete", "undelete" or "status" commands. To change the users password please use the "password" 
command.') . '


EXTRA INFORMATION



[--roles / --role / -r ROLE[,ROLE,ROLE]] A comma separated list of the roles that this user has on this system. The 
                                         roles must already exist. These roles will grant the user rights which will 
                                         give him or her access to the various parts of the system');


// Validate user
$argv = ArgvValidator::new()
    ->select('user', true)->hasMaxCharacters(128)->isEmail()
    ->select('roles', true)->isOptional()->sanitizeForceArray()->each()->isName()
    ->validate();


// Ensure that the specified roles exist
if ($argv['roles']) {
    foreach ($argv['roles'] as &$role) {
        $role = Role::get($role);
    }

    unset($role);
}


// Get the user and modify, then update roles
$user = User::get($argv['user'])->modify();
$user->roles()->set($argv['roles']);


// Done!
Log::success(tr('Modified user ":user"', [':user' => $user->getDisplayName()]));