#!/usr/bin/php
<?php
/*
 * This script manages the available rights
 */
$usage = "./scripts/base/rights list\n".
         "./scripts/base/rights create --name NAME --description DESCRIPTION\n".
         "./scripts/base/rights modify ID|NAME --name NAME --description DESCRIPTION\n".
         "./scripts/base/rights delete|undelete|erase ID|NAME ID|NAME ...\n".
         "./scripts/base/rights for USER\n";

$help  = "This is the rights management script";


load_libs('user,rights');

switch (cli_method()) {
    case 'list':
        $rights = sql_query('SELECT `name`,
                                    `status`,
                                    `description`

                             FROM   `rights`

                             WHERE  `status` IS NULL
                             OR     `status` != "_new" '.sql_limit());

        if (!$rights->rowCount()) {
            log_console(tr('There are currently no rights available'), 'QUIET/yellow');

        } else {
            log_console(tr('Showing currently available rights'), 'QUIET/white');
            log_console(str_size('Name', 20).' '.str_size('Status', 16).' Description', 'QUIET/cyan');

            while ($right = sql_fetch($rights)) {
                log_console(str_size($right['name'], 20).' '.str_size(status($right['status']), 16).' '.$right['description']);
            }
        }

        break;

    case 'for':
        $requested = cli_argument(1);
        cli_no_arguments_left();

        if (!$requested) {
            throw new CoreException(tr('No user specified'), 'warning/not-specified');
        }

        $user = sql_get('SELECT `id`,
                                `name`,
                                `email`,
                                `username`,
                                `nickname`

                         FROM   `users`

                         WHERE (`id`       = :id
                         OR     `email`    = :email
                         OR     `username` = :username)
                         AND    `status`   IS NULL',

                         array(':id'       => $requested,
                               ':email'    => $requested,
                               ':username' => $requested));

        if (!$user) {
            throw new CoreException(tr('Specified user ":user" does not exist', array(':user' => $requested)), 'warning/not-exist');
        }

        $rights = sql_query('SELECT    `rights`.`name`,
                                       `rights`.`description`

                             FROM      `users_rights`

                             LEFT JOIN `rights`
                             ON        `rights`.`id`             = `users_rights`.`rights_id`
                             AND       `rights`.`status`         IS NULL

                             WHERE     `users_rights`.`users_id` = :users_id',

                             array(':users_id' => $user['id']));

        if (!$rights->rowCount()) {
            log_console(tr('This user has no rights assigned'), 'QUIET/yellow');

        } else {
            log_console(tr('Showing rights for user ":user"', array(':user' => name($user))), 'QUIET/white');
            log_console(str_size('Name', 16).'Description', 'QUIET/cyan');

            while ($right = sql_fetch($rights)) {
                log_console(str_size($right['name'], 16).$right['description']);
            }
        }

        break;

    case 'create':
        try {
            $right = cli_arguments('--name,--description');
            $right = rights_validate($right);

            cli_no_arguments_left();

            sql_query('INSERT INTO `rights` (`createdby`, `name`, `description`)
                       VALUES               (:createdby , :name , :description)',

                       array(':createdby'   => isset_get($_SESSION['user']['id']),
                             ':name'        => $right['name'],
                             ':description' => $right['description']));

            log_console(tr('Created new right ":right"', array(':right' => $right['name'])), 'green');
            break;

        }catch(Exception $e) {
            throw new CoreException(tr('Failed to create new right'), $e);
        }

        break;

    case 'modify':
        try {
            $old_right = cli_argument(1);

            if (!$old_right) {
                throw new CoreException(tr('No right specified'), 'warning/not-specified');
            }

            $right = cli_arguments('name,description');

            cli_no_arguments_left();

            $old_right = sql_get('SELECT `id`,
                                         `name`,
                                         `description`

                                  FROM   `rights`

                                  WHERE  `id`   = :id
                                  OR     `name` = :name', array(':id'   => $old_right,
                                                                ':name' => $old_right));

            if (!$old_right) {
                throw new CoreException(tr('Specified right ":right" does not exist', array(':right' => $old_right)), 'warning/not-specified');
            }

            $right = rights_validate($right, $old_right);

            sql_query('UPDATE `rights`

                       SET    `modifiedon`  = NOW(),
                              `modifiedby`  = :modifiedby,
                              `name`        = :name,
                              `description` = :description

                       WHERE  `id`          = :id',

                       array(':modifiedby'  => isset_get($_SESSION['user']['id']),
                             ':name'        => $right['name'],
                             ':description' => $right['description'],
                             ':id'          => $right['id']));

            /*
             * Now also update the cached right names
             */
            sql_query('UPDATE `users_rights`

                       SET    `name` = :name

                       WHERE  `id`   = :id',

                       array(':id'   => $right['id'],
                             ':name' => $right['name']));

            log_console(tr('Modified right ":right"', array(':right' => $right['name'])), 'green');
            break;

        }catch(Exception $e) {
            throw new CoreException(tr('Failed to modify right'), $e);
        }

        break;

    case 'delete':
        $rights = arguments();

        if (empty($rights)) {
            throw new CoreException(tr('No rights specified'), 'warning/not-specified');
        }

        $in_name = sql_in($rights, 'name');
        $in_id   = sql_in($rights, 'id');

        if (FORCE) {
            $status = '';

        } else {
            $status = ' AND `status` IS NULL ';
        }

        $r  = sql_query('UPDATE `rights`

                         SET    `status` = "deleted"

                         WHERE  `name` IN ('.implode(',', array_keys($in_name)).')
                         OR     `id`   IN ('.implode(',', array_keys($in_id)).')'.$status,

                         array_merge($in_name, $in_id));

        switch (!$r->rowCount()) {
            case 0:
                log_console(tr('Not deleted any rights'), 'error');
                break;

            case count($rights):
                log_console(tr('Deleted only ":count" rights from the specified ":specified" rights', array(':count' => $r->rowCount(), ':specified' => count($rights))), 'yellow');
                break;

            default:
                log_console(tr('Deleted ":count" rights', array(':count' => $r->rowCount())), 'green');
        }

        break;

    case 'undelete':
        $rights = arguments();

        if (empty($rights)) {
            throw new CoreException(tr('No rights specified'), 'warning/not-specified');
        }

        $in_name = sql_in($rights, 'name');
        $in_id   = sql_in($rights, 'id');

        if (FORCE) {
            $status = '';

        } else {
            $status = ' AND `status` = "deleted" ';
        }

        $r  = sql_query('UPDATE `rights`

                         SET    `status` = NULL

                         WHERE  `name` IN ('.implode(',', array_keys($in_name)).')
                         OR     `id`   IN ('.implode(',', array_keys($in_id)).')'.$status,

                         array_merge($in_name, $in_id));

        switch (!$r->rowCount()) {
            case 0:
                log_console(tr('Not undeleted any rights'), 'error');
                break;

            case count($rights):
                log_console(tr('Undeleted only ":count" rights from the specified ":specified" rights', array(':count' => $r->rowCount(), ':specified' => count($rights))), 'yellow');
                break;

            default:
                log_console(tr('Undeleted ":count" rights', array(':count' => $r->rowCount())), 'green');
        }

        break;

    case 'erase':
        $rights = arguments();

        if (empty($rights)) {
            throw new CoreException(tr('No rights specified'), 'warning/not-specified');
        }

        $in_name = sql_in($rights, 'name');
        $in_id   = sql_in($rights, 'id');

        if (FORCE) {
            $status = '';

        } else {
            $status = ' AND `status` = "deleted" ';
        }

        /*
         * Get a list of all rights we're about to erase, because we'll need to erase references as well
         */
        $rights = sql_query('SELECT FROM `rights`

                             WHERE  `name` IN ('.implode(',', array_keys($in_name)).')
                             OR     `id`   IN ('.implode(',', array_keys($in_id)).')'.$status,

                         array_merge($in_name, $in_id));

        $in = sql_in($rights, 'id');

        unset($in_id);
        unset($in_name);

        /*
         * Now erase the rights
         */
        $r  = sql_query('DELETE FROM `rights`

                         WHERE  `id` IN ('.implode(',', array_keys($in)).')',

                         $in);

        if (!$r->rowCount()) {
            log_console(tr('Not erased any rights'), 'error');

        } else {
            switch ($r->rowCount()) {
                case 0:
                    break;

                case count($rights):
                    log_console(tr('Erased only ":count" rights from the specified ":specified" rights', array(':count' => $r->rowCount(), ':specified' => count($rights))), 'yellow');
                    break;

                default:
                    log_console(tr('Erased ":count" rights', array(':count' => $r->rowCount())), 'green');
            }

            /*
             * Rights are assigned to users and roles. Remove all references
             */
            $r  = sql_query('DELETE FROM `users_rights`

                             WHERE  `rights_id` IN ('.implode(',', array_keys($in)).')',

                             $in);

            log_console(tr('Removed ":count" user assigned rights', array(':count' => $r->rowCount())), 'green');

            $r  = sql_query('DELETE FROM `roles_rights`

                             WHERE       `roles_id` IN ('.implode(',', array_keys($in)).')',

                             $in);

            log_console(tr('Removed ":count" user assigned rights', array(':count' => $r->rowCount())), 'green');
        }

        break;

    case '':
        throw new CoreException(tr('No method specified'), 'no-method');

    default:
        throw new CoreException(tr('Unknown method ":method" specified', array(':method' => cli_method())), 'unknown-method');
}
?>
