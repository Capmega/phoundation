#!/usr/bin/php
<?php

declare(strict_types=1);

use Phoundation\Cli\Documentation;
use Phoundation\Core\Arrays;
use Phoundation\Core\Log\Log;
use Phoundation\Data\Validator\ArgvValidator;
use Phoundation\Databases\Mysql;
use Phoundation\Exception\UnderConstructionException;
use Phoundation\Filesystem\Path;
use Phoundation\Filesystem\Restrictions;
use Phoundation\Os\Processes\Commands\MysqlDump;


/**
 * Script system/databases/export
 *
 * This script will export the specified database to the specified database file
 *
 * @author Sven Olaf Oostenbrink <so.oostenbrink@gmail.com>
 * @license http://opensource.org/licenses/GPL-2.0 GNU Public License, Version 2
 * @copyright Copyright (c) 2022 Sven Olaf Oostenbrink <so.oostenbrink@gmail.com>
 * @package Phoundation\Scripts
 */
Documentation::usage('./pho system databases export -d mysql -b system -f system.sql');

Documentation::help('This script will export the specified database to the specified database dump file


ARGUMENTS


-d / --driver DRIVER                    The database driver to use. One of MySQL, Redis, MongoDB, or elastic(search).
                                        The name is not case sensitive (NOTE: For the moment only MySQL is supported)

-g / --gzip                             Will produce a gzip compressed database dump file

-t / --timeout TIMEOUT                  Timeout in integer seconds before the process will be terminated due to timeout 
                                        (defaults to 3600)

-b / --database DATABASE                The database in which to export 

-f / --file FILE                        The file which to export to');

Documentation::autoComplete([
    'arguments' => [
        '-t,--timeout' => false,
        '-g,--gzip'    => false,
        '--file' => [
            'word'   => function ($word) { return Path::new(PATH_DATA . 'sources/', PATH_DATA . 'sources/')->scan($word . '*.sql'); },
            'noword' => function ()      { return Path::new(PATH_DATA . 'sources/', PATH_DATA . 'sources/')->scan('*.sql'); },
        ],
        '--driver' => [
            'word'   => function ($word) { return Arrays::match(['mysql'], $word); },
            'noword' => ['mysql']
        ],
        '--database' => [
            'word'   => function ($word) { return sql()->listScalar('SHOW DATABASES LIKE :word', [':word' => '%' . $word . '%']); },
            'noword' => function ()      { return sql()->listScalar('SHOW DATABASES'); },
        ]
    ]
]);


// Validate arguments
$argv = ArgvValidator::new()
    ->select('-g,--gzip')->isOptional(false)->isBoolean()
    ->select('-t,--timeout' , true)->isOptional(3600)->isInteger()->isMoreThan(0)
    ->select('-f,--file'    , true)->isFile(PATH_DATA . 'sources/', new Restrictions(PATH_DATA . 'sources/', true), false)
    ->select('-d,--driver'  , true)->sanitizeLowercase()->isInArray(['mysql', 'redis', 'mongo', 'mongodb', 'elastic', 'elasticsearch'])
    ->select('-b,--database', true)->isVariable()
    ->validate();


// Export data for the requested driver
switch ($argv['driver']) {
    case 'mysql':
        Log::information(tr('Exporting to MySQL dump file ":file" from database ":database", this may take a while...', [
            ':file'     => $argv['file'],
            ':database' => $argv['database'],
        ]));

        MysqlDump::new(Restrictions::new('/', true, 'Mysql exporter'))
            ->setTimeout($argv['timeout'])
            ->setTarget($argv['file'])
            ->setDatabases($argv['database'])
            ->dump();

        Log::success(tr('Finished exporting MySQL dump file ":file" from database ":database"', [
            ':file'     => $argv['file'],
            ':database' => $argv['database'],
        ]));

        break;

    case 'redis':
        // no break
    case 'mongo':
        // no break
    case 'mongodb':
        // no break
    case 'elastic':
        // no break
    case 'elasticsearch':
        // no break
        throw new UnderConstructionException();
}
