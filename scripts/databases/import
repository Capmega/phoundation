#!/usr/bin/php
<?php

declare(strict_types=1);

use Phoundation\Cli\CliDocumentation;
use Phoundation\Core\Log\Log;
use Phoundation\Data\Validator\ArgvValidator;
use Phoundation\Exception\UnderConstructionException;
use Phoundation\Filesystem\Directory;
use Phoundation\Filesystem\Restrictions;
use Phoundation\Os\Processes\Commands\Databases\MySql;
use Phoundation\Utils\Arrays;


/**
 * Script system/databases/import
 *
 * This script will import the specified database file into the specified database
 *
 * @author Sven Olaf Oostenbrink <so.oostenbrink@gmail.com>
 * @license http://opensource.org/licenses/GPL-2.0 GNU Public License, Version 2
 * @copyright Copyright (c) 2022 Sven Olaf Oostenbrink <so.oostenbrink@gmail.com>
 * @package Phoundation\Scripts
 */
CliDocumentation::usage('./pho system databases import -d mysql -b system -f system.sql');

CliDocumentation::help('This script will import the specified database file into the specified database


ARGUMENTS


-d / --driver DRIVER                    The database driver to use. One of MySQL, Redis, MongoDB, or elastic(search).
                                        The name is not case sensitive (NOTE: For the moment only MySQL is supported)

-b / --database DATABASE                The database in which to import the import file

-f / --file FILE                        The file which to import');

CliDocumentation::autoComplete([
    'arguments' => [
        '--file' => [
            'word'   => function ($word) { return Directory::new(DIRECTORY_DATA . 'sources/', DIRECTORY_DATA . 'sources/')->scan($word . '*.{sql,sql.gz}'); },
            'noword' => function ()      { return Directory::new(DIRECTORY_DATA . 'sources/', DIRECTORY_DATA . 'sources/')->scan(        '*.{sql,sql.gz}'); },
        ],
        '--driver' => [
            'word'   => function ($word) { return Arrays::match(['mysql'], $word); },
            'noword' => ['mysql']
        ],
        '--database' => [
            'word'   => function ($word) { return sql()->listScalar('SHOW DATABASES LIKE :word', [':word' => '%' . $word . '%']); },
            'noword' => function ()      { return sql()->listScalar('SHOW DATABASES'); },
        ]
    ]
]);


// Validate arguments
$argv = ArgvValidator::new()
    ->select('-f,--file'    , true)->isFile(DIRECTORY_DATA . 'sources/', DIRECTORY_DATA . 'sources/')
    ->select('-d,--driver'  , true)->sanitizeLowercase()->isInArray(['mysql', 'redis', 'mongo', 'mongodb', 'elastic', 'elasticsearch'])
    ->select('-b,--database', true)->isVariable()
    ->select('--no-drop')->isOptional(false)->isBoolean()
    ->validate();


switch ($argv['driver']) {
    case 'mysql':
        Log::information(tr('Importing MySQL dump file ":file" to database ":database", this may take a while...', [
            ':file'     => $argv['file'],
            ':database' => $argv['database'],
        ]));

        MySql::new(Restrictions::new('/'))->import($argv['database'], $argv['file'], !$argv['no_drop']);

        Log::success(tr('Finished importing MySQL dump file ":file" to database ":database"', [
            ':file'     => $argv['file'],
            ':database' => $argv['database'],
        ]));

        break;

    case 'redis':
        // no break
    case 'mongo':
        // no break
    case 'mongodb':
        // no break
    case 'elastic':
        // no break
    case 'elasticsearch':
        // no break
        throw new UnderConstructionException();
}
