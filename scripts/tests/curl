#!/usr/bin/php
<?php
/*
 * This is a strings library test file
 */
require_once(dirname(__FILE__).'/../../libs/startup.php');
cli_only(true);
load_libs('curl,test');

test('curl_list_ips()', 'Function should return an arary of all available IPS on this server', function() {
    $ips = curl_list_ips();

    if (!$ips) {
        throw new CoreException(tr('Returned no data'), 'empty');
    }

    foreach($ips as $ip) {
        if (!filter_var($ip, FILTER_VALIDATE_IP)) {
            throw new CoreException(tr('Returned invalid data ":data"', array(':data' => $ip)), 'invalid');
        }
    }

    return $ip;
});

test('curl_get_random_ip()', 'Function should return any random IP from this server', function() {
    $ip = curl_get_random_ip();

    if (!$ip) {
        throw new CoreException(tr('Returned no data'), 'empty');
    }

    if (!preg_match('/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/', $ip)) {
        throw new CoreException(tr('Did not return a valid IP, but ":data"', array(':data' => $ip)), 'invalid');
    }

    return $ip;
});

test('curl_get()', 'Function should return complete github.com page', function() {
    $google = curl_get('https://github.com/');
});

test('curl_get()', 'Function should return github.com 404 exception', function() {
    try {
        $results = curl_get('https://github.com//foobar');
        throw new CoreException(tr('Function did not throw exception for HTTP code ":code"', array(':code' => $results['status']['http_code'])), 'unexpected');

    }catch(Exception $e) {
        if ($e->getCode() != 'HTTP404') {
            throw new CoreException(tr('Function returned invalid HTTP error code ":code"', array(':code' => $e->getCode())), $e);
        }

        /*
         * Yes! This is what we wanted!
         */
    }
});
?>
