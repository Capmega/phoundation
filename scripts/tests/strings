#!/usr/bin/php
<?php
/*
 * This is a strings library test file
 */
require_once(dirname(__FILE__).'/../../libs/startup.php');
cli_only(true);
load_libs('test');

test('str_interleave()', 'Create fully forward slash interleaved string with UTF-8 support', function() {
    $test = str_interleave('This should be a fully forward slash interleaved string. Some UTF8 tests: ñ', '/', 0);

    if($test !== 'T/h/i/s/ /s/h/o/u/l/d/ /b/e/ /a/ /f/u/l/l/y/ /f/o/r/w/a/r/d/ /s/l/a/s/h/ /i/n/t/e/r/l/e/a/v/e/d/ /s/t/r/i/n/g/./ /S/o/m/e/ /U/T/F/8/ /t/e/s/t/s/:/ /ñ') {
        throw new CoreException(tr('Created incorrect string ":test"', array(':test' => $test)), 'failed');
    }
});

test('str_interleave()', 'Create a partially forward slash 2 character interleaved string with UTF-8 support', function() {
    $test = str_interleave('This should be a partially forward slash interleaved string. Some UTF8 tests: ñ', '/', 30, 2);

    if($test !== 'Th/is/ s/ho/ul/d /be/ a/ p/ar/ti/al/ly/ f/orward slash interleaved string. Some UTF8 tests: ñ') {
        throw new CoreException(tr('Created incorrect string ":test"', array(':test' => $test)), 'failed');
    }
});

test('cfm()', 'This tests if the cfm() function correctly filters HTML and special characters from the specified strings', function() {
    $test = cfm('This <b>should</b>\'""\' have escaped quotes. Some UTF8 tests: ñ');

    if($test !== 'This should\\\'\"\"\\\' have escaped quotes. Some UTF8 tests: ñ') {
        throw new CoreException(tr('Created incorrect string ":test"', array(':test' => $test)), 'failed');
    }
});

test('str_truncate()', 'Function should truncate string after > character (displaying 25 characters in total)', function() {
    $test = str_truncate('Some UTF8 tests: ñ >This text should not be visible', 25);

    if($test !== 'Some UTF8 tests: ñ > ... ') {
        throw new CoreException(tr('Created incorrect string ":test"', array(':test' => $test)), 'failed');
    }
});

test('str_truncate()', 'Function should truncate string after > character (displaying 25 characters in total), truncating with "***"', function() {
    $test = str_truncate('Some UTF8 tests: ñ >This text should not be visible', 25, '***');

    if($test !== 'Some UTF8 tests: ñ >Th***') {
        throw new CoreException(tr('Created incorrect string ":test"', array(':test' => $test)), 'failed');
    }
});

test('str_truncate()', 'Function should truncate string left (before > character) (displaying 25 characters in total)', function() {
    $test = str_truncate('This text should not be visible>Some UTF8 tests: ñ ', 25, ' ... ', 'left');

    if($test !== ' ... >Some UTF8 tests: ñ') {
        throw new CoreException(tr('Created incorrect string ":test"', array(':test' => $test)), 'failed');
    }
});

test('str_truncate()', 'Function should truncate string center (between > and < characters) (displaying 25 characters in total)', function() {
    $test = str_truncate('Some UTF8>This text should not be visible<tests   ñ', 25, ' ... ', 'center');

    if($test !== 'Some UTF8> ... <tests   ñ') {
        throw new CoreException(tr('Created incorrect string ":test"', array(':test' => $test)), 'failed');
    }
});

test('str_truncate()', 'Function should truncate string after 24 characters, with complete word boundary truncate', function() {
    $test = str_truncate('This text should notbbe visible>Some UTF8 tests: ññ ', 24, '...', 'right', true);

    if($test !== 'This text should...') {
        throw new CoreException(tr('Created incorrect string ":test"', array(':test' => $test)), 'failed');
    }
});

test('Strings::endsNotWith()', 'Function should remove last / character only', function() {
    $test = Strings::endsNotWith('test//', '/', false);

    if($test !== 'test/') {
        throw new CoreException(tr('Created incorrect string ":test"', array(':test' => $test)), 'failed');
    }
});

test('Strings::endsNotWith()', 'Function should remove all / characters at the end', function() {
    $test = Strings::endsNotWith('test//', '/');

    if($test !== 'test') {
        throw new CoreException(tr('Created incorrect string ":test"', array(':test' => $test)), 'failed');
    }
});

test('Strings::endsNotWith()', 'Function should remove all t and / characters at the end', function() {
    $test = Strings::endsNotWith('test//', array('t', '/'));

    if($test !== 'tes') {
        throw new CoreException(tr('Created incorrect string ":test"', array(':test' => $test)), 'failed');
    }
});
?>
