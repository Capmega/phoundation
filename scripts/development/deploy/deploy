#!/usr/bin/php
<?php

declare(strict_types=1);

use Phoundation\Cli\Documentation;
use Phoundation\Core\Log\Log;
use Phoundation\Data\Validator\ArgvValidator;
use Phoundation\Developer\Project\Project;


/**
 * THIS SCRIPT IS ONLY FOR PHOUNDATION DEVELOPERS
 *
 * This script will copy changed files back to your phoundation installation. The script will assume your phoundation
 * installation is in ~/projects/phoundation
 *
 * @author Sven Olaf Oostenbrink <so.oostenbrink@gmail.com>
 * @license http://opensource.org/licenses/GPL-2.0 GNU Public License, Version 2
 * @copyright Copyright (c) 2022 Sven Olaf Oostenbrink <so.oostenbrink@gmail.com>
 * @category Function reference
 * @package Phoundation\Development
 */

Documentation::usage('./pho development deploy [OPTIONS] TARGET_ENVIRONMENT
./pho system development deploy TARGET_ENVIRONMENT
');

Documentation::help('This script will update your Phoundation libraries and list



ARGUMENTS



TARGET_ENVIRONMENT                      The target environment where to deploy to

-t / --tag                              The git tag which to deploy (NOTE: Production ONLY allows deploying tags). If 
                                        not specified, the current branch will be deployed, if allowed

[-m / --message]                        The deployment notification message to send out. If not specified, a default 
                                        will be used');



// Get command line arguments
$argv = ArgvValidator::new()
    ->select('-t,--tag', true)->isOptional()->isPrintable()
    ->select('-m,--message', true)->isOptional()->isPrintable()->hasMinCharacters(10)->hasMaxCharacters(1024)
    ->select('target_environment')->isPrintable()
    ->validate();



Log::information(tr('Deploying project ":project" to environment ":environment"', [
        ':project'     => PROJECT,
        ':environment' => $argv['target_environment']
]));



Project::deploy()
    ->setTag($argv['tag'])
    ->sendMessage($argv['message'])
    ->setTargetEnvironment($argv['target_environment'])
    ->execute();

//rsync --progress --rsync-path="sudo rsync" --exclude=data/log --exclude=.git --exclude=.gitignore --exclude=data/sessions --exclude=data/run --exclude=data/sources --exclude=data/tmp  -avze "ssh -p PORT" /home/sven/projects/medinet/PROJECT/ SERVER:/var/www/html/PROJECT/;
//echo "fixing ownsership";
//ssh -p PORT SERVER "sudo chown www-data:www-data /var/www/html/PROJECT -R";
//echo "fixing file mode";
//ssh -p PORT SERVER "sudo chmod u+rw,g+rw,o-rwx /var/www/html/PROJECT -R";
//echo "fixing sticky bit";
//ssh -p PORT SERVER "sudo find /var/www/html/PROJECT -type d -exec chmod u+x,g+xs {} \\\;" \; ;
//echo "fixing file exec permissions";
//ssh -p PORT SERVER "sudo find /var/www/html/PROJECT -type f -exec chmod u+rw-x,g+r-wx,o-rwx {} \;"
//echo "fixing pho";
//ssh -p PORT SERVER "sudo chmod 750 /var/www/html/PROJECT/pho";
//echo "done!"