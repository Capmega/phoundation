#!/usr/bin/php
<?php

declare(strict_types=1);

use Phoundation\Cli\Cli;
use Phoundation\Cli\Documentation;
use Phoundation\Core\Log\Log;
use Phoundation\Data\Validator\ArgvValidator;
use Phoundation\Data\Validator\Exception\ValidationFailedException;
use Phoundation\Filesystem\Path;
use Phoundation\Filesystem\Restrictions;
use Phoundation\Os\Processes\Enum\EnumExecuteMethod;
use Phoundation\Os\Processes\Process;


/**
 * Script tools/devices/storage/shred
 *
 *
 *
 * @author Sven Olaf Oostenbrink <so.oostenbrink@gmail.com>
 * @license http://opensource.org/licenses/GPL-2.0 GNU Public License, Version 2
 * @copyright Copyright (c) 2022 Sven Olaf Oostenbrink <so.oostenbrink@gmail.com>
 * @package Phoundation\Scripts
 */
$restrictions = Restrictions::new('/dev', true);

Documentation::usage('./pho tools devices storage shred');

Documentation::help('The destroy script will destroy all data on the specified storage device by overwriting it with random information in multiple passed

NOTE: This will irreparably destroy all information on the specified device. Proceed with caution, here be dragons!


ARGUMENTS


DEVICE                                  The device file to be shredded

');

Documentation::autoComplete([
    'positions' => [
        0 => [
            'word'   => function ($word) use ($restrictions) { return Path::new('/dev/', $restrictions)->scan($word . '*'); },
            'noword' => function ()      use ($restrictions) { return Path::new('/dev/', $restrictions)->scan('*'); },
        ],
    ],
    'arguments' => [
        '-p,--passes' => true,
    ]
]);


// Validate data
$argv = ArgvValidator::new()
    ->select('device')->hasMaxCharacters(64)->isFile('/dev/', new Restrictions('/dev', true))->sanitizeCallback(function(mixed $value, array $source) { return '/dev/' . $value; })
    ->select('-p,--passes')->isOptional(3)->isNatural(false)->isBetween(1, 10)
    ->validate();


// Have user confirm that they're sure
if (!FORCE) {
    $result = Cli::readInput(tr('This will irreparably destroy all information on device ":device", please type YES in all uppercase to continue:', [
        ':device' => $argv['device']
    ]));

    if ($result !== 'YES') {
        throw new ValidationFailedException(tr('No "YES" specified on prompt'));
    }
}


// Shred!
for ($i = 1; $i <= $argv['passes']; $i++) {
    Log::warning(tr('Shredding device ":device", pass ":pass". Depending on device size this may take a while...', [
        ':pass' => $i,
        ':device' => $argv['device']
    ]));

    Process::new('dd')
        ->setSudo(true)
        ->addArguments(['if=/dev/urandom', 'of=' . $argv['device'], 'bs=4096', 'status=progress'])
        ->execute(EnumExecuteMethod::passthru);
}
