#!/usr/bin/php
<?php

declare(strict_types=1);

use Phoundation\Cli\Cli;
use Phoundation\Cli\CliCommand;
use Phoundation\Cli\Documentation;
use Phoundation\Core\Log\Log;
use Phoundation\Data\Validator\ArgvValidator;
use Phoundation\Data\Validator\Exception\ValidationFailedException;
use Phoundation\Filesystem\Path;
use Phoundation\Filesystem\Restrictions;
use Phoundation\Os\Devices\Storage\Device;
use Phoundation\Os\Devices\Storage\Exception\StorageException;
use Phoundation\Os\Processes\Enum\EnumExecuteMethod;
use Phoundation\Os\Processes\Process;


/**
 * Script tools/devices/storage/encrypt
 *
 *
 *
 * @author Sven Olaf Oostenbrink <so.oostenbrink@gmail.com>
 * @license http://opensource.org/licenses/GPL-2.0 GNU Public License, Version 2
 * @copyright Copyright (c) 2022 Sven Olaf Oostenbrink <so.oostenbrink@gmail.com>
 * @package Phoundation\Scripts
 */
$restrictions = Restrictions::new('/dev', true);

Documentation::usage('./pho tools devices storage encrypt');

Documentation::help('The encrypt script will encrypt the specified device by reformatting it and applying full disk encryption

NOTE: This will irreparably destroy all information on the specified device. Proceed with caution, here be dragons!


ARGUMENTS


DEVICE                                  The device file to be encrypted

-k,--key                                The encryption key to use

--key-file                              The file containing the encryption key 

-s,--scramble                           Scrambles the disk with random data before encrypting it, more secure');

Documentation::autoComplete([
    'positions' => [
        0 => [
            'word'   => function ($word) use ($restrictions) { return Path::new('/dev/', $restrictions)->scan($word . '*'); },
            'noword' => function ()      use ($restrictions) { return Path::new('/dev/', $restrictions)->scan('*'); },
        ],
    ],
    'arguments' => [
        '-k,--key' => true,
        '--key-file' => true,
        '-s,--scramble' => false,
    ]
]);


// Validate data
$argv = ArgvValidator::new()
    ->select('device')->hasMaxCharacters(64)->isFile('/dev/', new Restrictions('/dev', true))->sanitizeCallback(function(mixed $value, array $source) { return '/dev/' . $value; })
    ->select('-k,--key')->isOptional()->xor('--key-file')->isPassword()
    ->select('-s,--scramble')->isOptional(3)->isNatural(false)->isBetween(1, 10)
    ->select('--key-file')->isOptional()->xor('-k,--key')->isFile('/', '/')
    ->validate();


// Ensure this is a device that can be encrypted
try {
    $device = Device::new($argv['device'])->checkUnmounted();

} catch (StorageException $e) {
    throw $e->makeWarning();
}


// Have user confirm that they're sure
CliCommand::requestConfirmation(tr('This will irreparably destroy all information on device ":device", please type YES in all uppercase to continue:', [
    ':device' => $argv['device']
]));


// Scramble?
if ($argv['scramble']) {
    Log::warning(tr('Scrambling device ":device". Depending on device size this may take a while...', [
        ':device' => $argv['device']
    ]));

    $device->scramble();
}


// Encrypt!
$device->encrypt($argv['key']);
