#!/usr/bin/php
<?php
/*
 * This is the servers management script.
 *
 * @auhthor Sven Olaf Oostenbrink <so.oostenbrink@gmail.com>
 * @copyright Copyright (c) 2018 Capmega
 * @license http://opensource.org/licenses/GPL-2.0 GNU Public License, Version 2
 * @category Function reference
 * @package base-scripts
 */
$usage = './scripts/servers
./scripts/servers add DOMAIN [DOMAIN DOMAIN ...] [-p|--port PORT] [-r|--register] [-a|--account ACCOUNT]
./scripts/servers modify DOMAIN [-p|--port PORT] [-a|--account ACCOUNT]
./scripts/servers list servers [options]
./scripts/servers test [ssh|database|tunnel-database] [DOMAIN]
./scripts/servers show server SERVER
./scripts/servers test TEST SERVER';

$help  = 'This is the servers management script

This script can manage the servers. Servers must be registered in toolkit before
they can be managed.



METHODS



list [%DOMAIN%]                 - List all registerd servers, or by part of
                                  specified domain

        --only-domains          - Show only the domains. Useful with --quiet

        --provider SERVER       - List all servers for the specified provider

        --customer CUSTOMER     - List all servers for the specified customer

accounts                        - List the registered SSH accounts

proxies
    insert  ROOT-DOMAIN         - Inserts a new server on the proxies chain
    NEW-DOMAIN LOCATION
    TARGET-DOMAIN
    [PROTOCOL[:PORT],
    PROTOCOL[:PORT]...]

    remove  ROOT-DOMAIN         - Removes a server from the proxies chain
    REMOVE-DOMAIN

show SERVER                     - Show details about the specified server

test TEST SERVER                - Execute the specified TEST on the specified
                                  SERVER. Available tests are: ssh, database,
                                  tunnel, database-tunnel

add DOMAIN [SSH-PORT]           - Add specified domain to the database

    --account | --ssh-account   - What SSH account to link to these servers. The
    [ACCOUNT]                     account can be specified by the accounts
                                  username, or the accounts id.

    --register                  - Automatically register the server fingerprints
                                  in the known_hosts file (NOT RECOMMENDED FOR
                                  SECURITY!)

modify DOMAIN                   - Update specified domain in the database

    --account | --ssh-account   - What SSH account to link to these servers. The
    [ACCOUNT]                     account can be specified by the accounts
                                  username, or the accounts id.

delete ID | DOMAIN              - Set the status of the specified domain to
                                  "deleted" and remove the SSH fingerprints from
                                  both ssh_fingerprints and the
                                  ROOT/data/ssh/known_hosts file

erase ID | DOMAIN               - Erase the specified host from the database

register DOMAIN [SSH-PORT]      - Add the fingerprints for the specified
                                  domain / port to the ssh_fingerprints table
                                  and the ROOT/data/ssh/known_host file

unregister DOMAIN [SSH-PORT]    - Remove the registered domain / port
                                  fingerprints from the ROOT/data/ssh/known_host
                                  file and the ssh_fingerprints table';

require_once(__DIR__.'/../../libs/startup.php');

try{
    cli_only();
    load_libs('servers,ssh');

    switch(cli_method()){
        case 'add':
            $port      = not_empty(cli_argument('--port,-p', true), ssh_get_port());
            $register  = cli_argument('--register,-r');
            $account   = cli_argument('--ssh-account,--account,-a', true);
            $domains   = cli_arguments();
            $count     = 0;

            cli_no_arguments_left();

            if($account){
                $accounts_data = ssh_get_account($account);

                if(!$accounts_data){
                    throw new CoreException(tr('Specified account ":account" does not exist, try "servers list accounts"', array(':account' => $account)), 'warning/not-exist');
                }
            }

            if(!$domains){
                throw new CoreException(tr('No server(s) specified to add'), 'warning/not-specified');
            }

            foreach($domains as $domain){
                try{
                    servers_insert(array('domain'      => $domain,
                                         'port'        => $port,
                                         'register'    => $register,
                                         'ssh_account' => isset_get($accounts_data['seoname'])));

                    log_console(tr('Added server with domain ":domain"', array(':domain' => $domain)), 'green');
                    $count++;

                }catch(Exception $e){
                    if($e->getRealCode() !== 'validation'){
                        throw $e;
                    }

                    if(preg_match('/A server with domain ".+?" already exists/', $e->getMessage())){
                        log_console(tr('Server ":domain" already exists', array(':domain' => $domain)), 'warning');

                    }else{
                        log_console($e);
                    }
                }
            }

            if($count){
                log_console(tr('Added ":count" servers', array(':count' => $count)), 'success');

            }else{
                log_console(tr('Not added any servers'), 'warning');
            }

            break;

        case 'modify':
            $port    = not_empty(cli_argument('--port,-p', true), ssh_get_port());
            $account = cli_argument('--ssh-account,--account,-a', true);
            $server  = cli_argument();

            cli_no_arguments_left();

            $server = servers_get($server);

            if($account){
                $accounts_data = ssh_get_account($account);

                if(!$accounts_data){
                    throw new CoreException(tr('Specified account ":account" does not exist, try "servers list accounts"', array(':account' => $account)), 'warning/not-exist');
                }

                $server['ssh_account'] = $accounts_data['name'];
            }

            if($port){
                $server['port'] = $port;
            }

            servers_update($server);
            break;

        case 'register':
            $domain = cli_argument(1);
            cli_no_arguments_left();

            $server = servers_like($domain);
            $server = servers_get($server);
            $count  = ssh_add_known_host($server['domain'], $server['port']);

            if($count){
                log_console(tr('Added ":count" registrations for server ":server"', array(':count' => $count, ':server' => $server['domain'])), 'green');

            }else{
                log_console(tr('Added no registrations for server ":server", the server probably was already registered', array(':server' => $server['domain'])), 'green');
            }

            break;

        case 'unregister':
            $domain = cli_argument(1);
            cli_no_arguments_left();

            $server = servers_like($domain);
            $server = servers_get($server);
            $count  = ssh_remove_known_host($server['domain'], $server['port']);

            if($count){
                log_console(tr('Removed ":count" registrations for server ":server"', array(':count' => $count, ':server' => $server['domain'])), 'green');

            }else{
                log_console(tr('Removed no registrations for server ":server", the server probably was not registered yet', array(':server' => $server['domain'])), 'green');
            }

            break;

        case 'disable':
            $start  = 0;
            $status = 'disabled';
            // FALLTHROUH

        case 'delete':
            $start  = 0;
            $status = isset_get($status, 'deleted');
            // FALLTHROUH

        case 'enable':
            $start  = 0;
            $status = isset_get($status, null);
            // FALLTHROUH

        case 'undelete':
            $start  = 0;
            $status = isset_get($status, null);
            // FALLTHROUH

        case 'status':
            /*
             * Erase all specified servers
             */
            $count   = 0;
            $servers = array();
            $status  = isset_get($status, cli_argument(isset_get($start, 1)));
            $list    = cli_arguments();

            cli_no_arguments_left();

            /*
             * Get a list of all servers so we can delete them in an atomic action
             */
            foreach($list as $requested){
                $server = servers_like($requested);
                $server = servers_get($server, false, false, 'id');

                if(!$server){
                    throw new CoreException(tr('Specified server ":server" does not exist', array(':server' => $requested)), 'not-exists');
                }

                $servers[] = $server['id'];
            }

            $in            = sql_in($servers);
            $in[':status'] = $status;

            $r = sql_query('UPDATE `servers` SET `status` = :status WHERE `id` IN ('.sql_in_columns($in, ':value').')', $in);

            if($r->rowCount()){
                log_console(tr('Set status ":status" for ":count" servers', array(':status' => $status, ':count' => $r->rowCount())), 'green');

            }else{
                log_console(tr('Did not status update servers, servers probably already had requested status'), 'yellow');
            }

            break;

        case 'erase':
            /*
             * Erase all specified servers
             */
            $count   = 0;
            $servers = array();
            $list    = cli_arguments();
            cli_no_arguments_left();

            foreach($list as $requested){
                $server = servers_get($requested);

                if(!$server){
                    throw new CoreException(tr('Specified server ":server" does not exist', array(':server' => $requested)), 'not-exists');
                }

                $servers[] = $server;
            }

            foreach($servers as $server){
                $count++;
                servers_erase($server);
            }

            if($count){
                log_console(tr('Erased ":count" servers', array(':count' => $count)), 'green');

            }else{
                log_console(tr('Erased no servers, servers were probably not registered'), 'yellow');
            }

            break;

        case 'accounts':
            cli_no_arguments_left();

            if(DELETED){
                $where[] = ' `status` = "deleted" ';

            }elseif(!$core->register['all']){
                $where[] = ' (`status` IS NULL OR `status` = "testing") ';
            }

            $query   = 'SELECT `id`,
                               `status`,
                               `name`,
                               `seoname`,
                               `username`,
                               `description`

                        FROM   `ssh_accounts` ';

            if(empty($where)){
                $where = '';

            }else{
                $where = ' WHERE '.implode(' AND ', $where);
            }

            $order   = ' ORDER BY `status` IS NOT NULL DESC, `name` ASC ';
            $servers = sql_query($query.$where.$order.sql_limit());

            if(!$servers->rowCount()){
                    log_console(tr('There are currently no SSH accounts registered'), 'QUIET/yellow');

            }else{
                log_console(str_size(tr('#id'), 7).str_size(tr('Name'), 17).str_size(tr('Username'), 17).str_size(tr('Description'), 64), 'QUIET/cyan');

                while($server = sql_fetch($servers)){
                    log_console(str_size($server['id'], 6, ' ', true).' '.str_size($server['name'], 16).' '.str_size($server['username'], 16).' '.str_size($server['description'], 64));
                }
            }

            break;

        case 'list':
            $only_domains = cli_argument('--only-domains');
            $customer     = cli_argument('--customer', true);
            $provider     = cli_argument('--provider', true);
            $execute      = array();
            $where        = array();

            cli_no_arguments_left();

            if(DELETED){
                $where[] = ' `servers`.`status` = "deleted" ';

            }elseif(!$core->register['all']){
                $where[] = ' `servers`.`status` IS NULL OR `servers`.`status` = "testing" ';
            }

            if(STATUS){
                $execute = array_merge($execute, sql_in(array_force(STATUS)));
                $where[] = ' `servers`.`status` IN ('.implode(', ', array_keys(array_force(STATUS))).') ';
            }

            if($customer){
                load_libs('customers');
                $customers_id = customers_get(array('columns' => 'id',
                                                    'filters' => array('seoname' => $customer)));

                if(!$customers_id){
                    throw new CoreException(tr('The specified customer ":customer" does not exist', array(':customer' => $customer)), 'warning');
                }

                $execute[':customers_id'] = $customers_id;
                $where[] = ' `servers`.`customers_id` = :customers_id ';
            }

            if($provider){
                load_libs('providers');
                $providers_id = providers_get($provider, 'id');

                if(!$providers_id){
                    throw new CoreException(tr('The specified provider ":provider" does not exist', array(':provider' => $provider)), 'warning');
                }

                $execute[':providers_id'] = $providers_id;
                $where[] = ' `servers`.`providers_id` = :providers_id ';
            }

            $query   = 'SELECT    `servers`.`id`,
                                  `servers`.`ipv4`,
                                  `servers`.`domain`,
                                  `servers`.`seodomain`,
                                  `servers`.`status`,
                                  `servers`.`createdon`,
                                  `servers`.`description`,

                                  `customers`.`name` AS `customer`,

                                  `providers`.`name` AS `provider`,

                                  `users`.`name`     AS `user_name`,
                                  `users`.`email`    AS `user_email`,
                                  `users`.`username` AS `user_username`,
                                  `users`.`nickname` AS `user_nickname`

                        FROM      `servers`

                        LEFT JOIN `customers`
                        ON        `customers`.`id` = `servers`.`customers_id`

                        LEFT JOIN `providers`
                        ON        `providers`.`id` = `servers`.`providers_id`

                        LEFT JOIN `users`
                        ON        `users`.`id` = `servers`.`createdby`';

            if(empty($where)){
                $where = '';

            }else{
                $where = ' WHERE '.implode(' AND ', $where);
            }

            $order   = ' ORDER BY `servers`.`status` IS NOT NULL DESC, `servers`.`domain` ASC ';
            $servers = sql_query($query.$where.$order.sql_limit(), $execute);

            if(!$servers->rowCount()){
                    log_console(tr('There are currently no servers registered'), 'QUIET/yellow');

            }else{
                if($only_domains){
                    log_console(tr('Hostname'), 'QUIET/cyan');

                    while($server = sql_fetch($servers)){
                        log_console($server['domain']);
                    }

                }else{
                    log_console(str_size(tr('#id'), 6, ' ', true).' '.str_size(tr('Customer'), 24).' '.str_size(tr('Provider'), 24).' '.str_size(tr('ipv4'), 15).' '.str_size(tr('Hostname'), 33).str_size(tr('Status'), 13).str_size(tr('Created by'), 32), 'QUIET/cyan');

                    while($server = sql_fetch($servers)){
                        if(!$server['domain']){
                            $server['domain'] = '*'.tr('This server').'*';
                            $server['ipv4']   = '-';
                        }

                        log_console(str_size($server['id'], 6, ' ', true).' '.str_size($server['customer'], 24).' '.str_size($server['provider'], 24).' '.str_size($server['ipv4'], 15).' '.str_size($server['domain'], 32).' '.cli_status_color(str_size(status($server['status']), 12)).' '.name($server, 'user'));
                    }
                }
            }

            break;

        case 'proxies':
            switch(cli_method(1)){
                case 'insert':
                    load_libs('proxies');
                    $root_domain   = cli_argument(2);
                    $new_domain    = cli_argument(3);
                    $location      = cli_argument(4);
                    $target_domain = cli_argument(5);
                    $protocols     = cli_argument(6);

                    if(empty($root_domain)){
                        throw new CoreException(tr('No root domain specified'), 'warning/not-specified');
                    }

                    if(empty($new_domain)){
                        throw new CoreException(tr('No new domain specified'), 'warning/not-specified');
                    }

                    if(empty($location)){
                        throw new CoreException(tr('No location specified'), 'warning/not-specified');
                    }

                    if(empty($target_domain)){
                        throw new CoreException(tr('No target domain specified'), 'warning/not-specified');
                    }

                    log_console(tr('Inserting new server ":new" in chain for server ":root"', array(':new' => $new_domain, ':root' => $root_domain)), 'white');

                    try{
                        proxies_insert($root_domain, $new_domain, $target_domain, $location, $protocols);
                    }catch(Exception $e){
                        switch(str_from($e->getCode(), '/')){
                            case 'invalid':
                                $e->makeWarning(true);
                        }

                        throw $e;
                    }
                    break;

                case 'remove':
                    load_libs('proxies');

                    $root_domain   = cli_argument(2);
                    $remove_domain = cli_argument(3);

                    log_console('Removing host '.$remove_domain,'white');
                    proxies_remove($root_domain, $remove_domain);

                    break;

                case '':
                    throw new CoreException(tr('No sub method specified for method "proxies"'), 'no-method');

                default:
                    throw new CoreException(tr('Unknown sub method ":method" specified for method "proxies"', array(':method' => cli_method(1))), 'unknown-method');
            }

            break;

        case 'show':
            $server            = cli_argument();
            $server            = servers_like($server);
            $server            = servers_get($server, true, true);
            $server['domains'] = servers_list_domains($server);

            if(empty($server['ssh_accounts_id'])){
                $server['allow_tcp_forward'] = 'N/A';

            }else{
                try{
                    load_libs('linux');
                    $server['allow_tcp_forward'] = linux_get_ssh_tcp_forwarding($server);

                }catch(Exception $e){
                    if($e->getRealCode() !== 'host-verification-missing'){
                        throw $e;
                    }

                    log_console(tr('Failed to get allow_tcp_forward information for host ":domain", it has no SSH key fingerprint in the known_hosts file.', array(':domain' => $server['domain'])), 'warning');
                }
            }

            $server  = array_hide($server);
            $domains = $server['domains'];

            unset($server['domains']);
            unset($domains[array_search($server['domain'], $domains)]);

            ksort($server);

            foreach($server as $key => $value){
                if($key == 'password') continue;
                log_console(cli_color($key.':', 'white').' '.json_encode_custom($value));
            }

            if($domains){
                foreach($domains as $key => $domain){
                    if($key){
                        log_console(cli_color('domain aliases: ', 'white').$domain);

                    }else{
                        log_console(str_repeat(18, ' ').$value);
                    }
                }

            }else{
                log_console(cli_color('domain aliases: ', 'white').'-');
            }

            break;

        case 'test':
            $test      = cli_argument(1);
            $requested = cli_argument(2);

            if(!$test){
                throw new CoreException(tr('No test specified. Please specify one of "ssh", "database", or "tunnel-database"'), 'warning/not-exist');
            }

            if(!$requested){
                throw new CoreException(tr('No server specified'), 'warning/not-exist');
            }

            try{
                $requested = servers_like($requested);
                $server    = servers_get($requested, true);

                switch($test){
                    case 'ssh':
                        if(!$server['ssh_accounts_id']){
                            throw new CoreException(tr('Skipped SSH access test for server ":server", the server does not have an SSH account assigned', array(':server' => $anchor)), 'warning');
                        }

                        servers_test($server['domain']);
                        log_console(tr('Finished SSH test succesfully for server ":server"', array(':server' => $server['domain'])), 'green');
                        break;

                    case 'database':
                        if(!$server['ssh_accounts_id'] or !$server['database_accounts_id']){
                            throw new CoreException(tr('Cannot test database access, server ":server", the server does not have a database account specified', array(':server' => $anchor)), 'warning/not-specified');
                        }

                        load_libs('mysql');
                        $results = mysql_exec($server['domain'], 'SELECT 1');

                        if((count($results) != 2) or ($results[end($results)] != 1)){
                            throw new CoreException($results, 'failed');
                        }

                        log_console(tr('Successfully tested database access for server ":server"', array(':server' => $server['domain'])), 'green');

                        break;

                    case 'tunnel-database':
                        if(!$server['ssh_accounts_id'] and !$server['database_accounts_id']){
                            throw new CoreException(tr('Skipped database over SSH tunnel access test for server ":server", the server does not have an SSH account or database account assigned', array(':server' => $anchor)), 'warning');
                        }

                        sql_test_tunnel($server);
                        log_console(tr('Successfully tested database access over SSH tunnel for server ":server"', array(':server' => $server['domain'])), 'green');
                        break;

                    default:
                        throw new CoreException(tr('Unknown test ":test" specified. Please specify one of "ssh", "database", or "tunnel-database".', array(':test' => $test)), 'warning/unknown');
                }

            }catch(Exception $e){
                switch($e->getCode()){
                    case 'host-verification-missing':
                        throw new CoreException(tr('SSH acces test failed for server ":server" because the host key verification showed this hosts key missing. Add the server to the known_hosts file first (currently only possible with executing "./scripts/base/ssh register :domain")', array(':server' => $anchor, ':domain' => $domain)), 'warning/failed');

                    case 'host-verification-failed':
                        throw new CoreException(tr('SSH acces test failed for server ":server" because the host key verification failed. Either somebody is trying to fake this server, or the server was reinstalled', array(':server' => $anchor, ':domain' => $domain)), 'failed');

                    case 'not-specified':
                        // FALLTHROUGH
                    case 'not-exists':
                        // FALLTHROUGH
                    case 'connect-failure':
                        // FALLTHROUGH
                    case 'dns-lookup-failure':
                        $e->makeWarning(true);
                }

                throw $e;
            }

            break;

        case '':
            throw new CoreException(tr('No method specified'), 'no-method');

        default:
            throw new CoreException(tr('Unknown method ":method" specified', array(':method' => cli_method())), 'unknown-method');
    }

}catch(Exception $e){
    switch($e->getRealCode()){
        case 'not-exists':
            // FALLTHROUGH
        case 'multiple':
            // FALLTHROUGH
        case 'sudo':
            throw $e->makeWarning(true);
    }

    throw $e;
}
?>
