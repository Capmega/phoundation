#!/usr/bin/php
<?php
/*
 * This script will copy the target environments database and sync its files
 *
 * @copyright Sven Oostenbrink <support@capmega.com>
 */
// :TODO: Add support to indicate sync other databases than the core database
$usage = "./scripts/base/sync ENVIRONMENT [OPTIONS]\n";

$help  = "The sync script can sync the target environment (for example production) database, images, etc. locally so that bug testing can be done with real data.



ARGUMENTS



--no-init                      - Do not do execute a system init after the sync
                                 process has finished

--no-dump                      - Do not do the temporary mysql dump on the
                                 target environment

--clear-data                   - Do not clear local data content

--no-copy                      - Do not copy the temporary mysql dump on the
                                 target environment

--no-import                    - Do not import the temporary mysql dump from
                                 the target environment

--no-delete                    - Do not delete the temporary mysql dump from
                                 the target environment

--no-hook / --no-hooks         - Do not execute hooks

--no-files                     - Do not sync configured data directories

--no-functions                 - Do not sync mysql functions from the specified
                                 environment

--delete-sync / --sync-delete  - Delete data file paths before syncing (warning:
                                 This would cause rsync to redownload all files)

--no-cache-clear               - Do not clear cache after finishing the sync

--no-blog-update-url           - Do not update the blog page URL's

--no-badges-cached             - Do not clear badges_cached for badges

--no-blog-rebuild-post-urls    - Do not rebuild the blog post URLs after sync



HOOK SCRIPTS: Below are shown (in order) the hook scripts that will be executed
              If the hook scripts exist (in ROOT/scripts/hooks) they will be
              executed. If not, they will be ignored

sync_badges_cached";

$nologin = true;

require_once(__DIR__.'/../../libs/startup.php');

cli_only(true);
load_libs('init,array,config');



/*
 * Check command line parameters
 */
$environment     =  cli_argument(0);
$nodump          =  cli_argument('--no-dump');
$nocopy          =  cli_argument('--no-copy');
$nofiles         =  cli_argument('--no-files');
$noinit          =  cli_argument('--no-init');
$cleardata       =  cli_argument('--clear-data');
$noimport        =  cli_argument('--no-import');
$no_times        =  cli_argument('--no-times') or cli_argument('-n');
$nohooks         = (cli_argument('--no-hook')  or cli_argument('--no-hooks'));
$nodelete        =  cli_argument('--no-delete');
$nodefinerfix    =  cli_argument('--no-definer-fix');
$nocacheclear    =  cli_argument('--no-cache-clear');
$nobadgescached  =  cli_argument('--no-badges-cached');
$noblogupdateurl =  cli_argument('--no-blog-rebuild-post-urls');
$deletesync      = (cli_argument('--delete-sync') or cli_argument('sync-delete'));

cli_no_arguments_left();



/*
 * Check environment
 */
if(empty($environment)){
    throw new BException(tr('No source environment specified to sync from'), 'warning/not-specified');
}

if($environment == ENVIRONMENT){
    throw new BException(tr('Cannot sync from own environment ":env"', array(':env' => ENVIRONMENT)), 'warning/invalid');
}



/*
 * Get configuration for specified environment
 */
load_config('sync');



/*
 * Get configuration for specified environment
 */
try{
    $source_config = array_merge_complete(config_get_for_environment('production'), config_get_for_environment($environment));

    if(!isset($source_config['deploy'][$environment])){
        throw new BException(tr('The specified environment ":env" does not exist', array(':env' => $environment)), 'warning/not-exist');
    }

    $deploy_config = $source_config['deploy'][$environment];
    $local_config  = config_get_for_environment(ENVIRONMENT);
    $project       = strtolower(PROJECT);
    $dumpfile      = uniqid().'.sql';

}catch(Exception $e){
    if($e->getRealCode() === 'not-exists'){
        $e->makeWarning(true);
    }

    throw $e;
}



/*
 * Should we use sudo? if so, what sudo command?
 */
if($no_times or !empty($source_config['deploy'][ENVIRONMENT]['no_times'])){
    $no_times = ' --no-times ';
}



/*
 * Should we use sudo? This would cause problems if the current user has no sudo
 * rights!
 */
if(empty($deploy_config['sudo'])){
    /*
     * Don't use sudo at all
     */
    $sudo = '';

}elseif(isset_get($deploy_config['sudo']) === true){
    /*
     * Use default sudo
     */
    $sudo = ' sudo ';

}else{
    /*
     * Use configured sudo line
     */
    $sudo = ' '.$deploy_config['sudo'].' ';
}



/*
 * Environment exists?
 */
if(empty($deploy_config)){
    throw new BException(tr('The specified environment ":env" does not exist', array(':env' => $environment)), 'warning/not-exist');
}



/*
 * SQL dump of source DB
 */
if($nodump){
    log_console(tr('Skipping creating SQL dump file on remote server due to "--no-dump" command line parameters'), 'yellow');

}else{
    log_console(tr('Creating SQL dump file on remote server'), 'white');
    passthru($command = 'ssh -p '.$deploy_config['target_port'].' -t '.($deploy_config['target_user'] ? $deploy_config['target_user'].'@' : '').$deploy_config['target_server'].' "'.($deploy_config['sudo'] ? ' sudo ' : '').'rm /tmp/'.$project.'_'.$dumpfile.'* -f; '.($deploy_config['sudo'] ? ' sudo ' : '').'mysqldump --single-transaction -n -e '.(cli_argument('nofunctions') ? '' : '-R ').'--dump-date --no-autocommit --add-drop-database -u '.$source_config['db']['core']['user'].' -p\''.str_replace('$', '\$', $source_config['db']['core']['pass']).'\' -B '.$source_config['db']['core']['db'].' > /tmp/'.$project.'_'.$dumpfile.' && '.($deploy_config['sudo'] ? ' sudo ' : '').' gzip -q /tmp/'.$project.'_'.$dumpfile.' "', $exitcode);

    if($exitcode){
        throw new BException(tr('Remote mysqldump failed with exit code ":code"', array(':code' => $exitcode)), 'remote');
    }
}



/*
 * SCP SQL dump to local server
 */
if($nocopy){
    log_console(tr('Skipping copying remote SQL file locally due to "--no-copy" command line parameters'), 'yellow');

}else{
    log_console(tr('Copying remote SQL file locally'), 'white');

	$temp_file = file_temp(false, $project.'_'.$dumpfile);

    passthru('rm '.$temp_file.' '.$temp_file.'.gz -f');
    passthru($command = 'scp -P '.$deploy_config['target_port'].' '.($deploy_config['target_user'] ? $deploy_config['target_user'].'@' : '').$deploy_config['target_server'].':/tmp/'.$project.'_'.$dumpfile.'.gz '.$temp_file.'.gz', $exitcode);

    if($exitcode){
        throw new BException(tr('Copy of remote mysqldump file to local server failed with exit code ":code"', array(':code' => $exitcode)), 'remote');
    }
}



/*
 * Import SQL file to local database
 */
if($noimport){
    log_console(tr('Skipping importing remote SQL dump file in local MySQL server due to "--no-import" command line parameters'), 'yellow');

}else{
    /*
     * mysqldump always adds a "USE databasename" which is horrifyingly anoying, because the dump will be imported in the wrong database!
     * Remove it first!
     */
    log_console(tr('Preparing remote SQL dump file ":file"', array(':file' => ''.$temp_file)), 'white');
    passthru($command = 'cd /tmp/; rm '.$temp_file.' -f; gunzip '.$temp_file.'.gz', $exitcode);

    if($exitcode){
        throw new BException(tr('Gunzip of mysqldump file failed with exit code ":code"', array(':code' => $exitcode)), 'gunzip');
    }

    log_console(tr('Importing remote SQL dump file ":file" in local MySQL server', array(':file' => ''.$temp_file)), 'white');
    passthru($command = 'cd /tmp/; sed -i -e"s/USE \`'.$source_config['db']['core']['db'].'\`;/USE \`'.$_CONFIG['db']['core']['db'].'\`;/" '.$temp_file, $exitcode);

    if($exitcode){
        throw new BException(tr('Rewrite of "USE DATABASENAME" in mysqldump file failed with exit code ":code"', array(':code' => $exitcode)), 'sql');
    }

    $GLOBALS['sql_core'] = sql_connect($_CONFIG['db']['core'], false);

    sql_query('DROP   DATABASE IF EXISTS `'.$_CONFIG['db']['core']['db'].'`');
    sql_query('CREATE DATABASE `'.$_CONFIG['db']['core']['db'].'`');

    passthru($command = 'cat '.$temp_file.' | mysql -u '.$_CONFIG['db']['core']['user'].' -p"'.$_CONFIG['db']['core']['pass'].'" -B '.$_CONFIG['db']['core']['db'], $exitcode);

    if($exitcode){
        throw new BException(tr('MySQL import of mysqldump file failed with exit code ":code"', array(':code' => $exitcode)), 'mysql');
    }
}



/*
 * Remove temporary SQL dump file on source
 */
if($nodelete){
    log_console(tr('NOT removing temporary remote SQL dump file from local and remote server due to "--no-delete" command line parameters'), 'yellow');

}else{
    log_console(tr('Removing temporary remote SQL dump file from local and remote server'), 'white');
    passthru($command = 'ssh -p '.$deploy_config['target_port'].' -t '.($deploy_config['target_user'] ? $deploy_config['target_user'].'@' : '').$deploy_config['target_server'].' \''.($deploy_config['sudo'] ? ' sudo ' : '').'rm -f '.$temp_file.'*\'', $exitcode);

    if($exitcode){
        throw new BException(tr('Removal of temporary mysqldump file on remote server failed with exit code ":code"', array(':code' => $exitcode)), 'remote');
    }

    passthru($command = 'rm -f '.$temp_file.'*', $exitcode);

    if($exitcode){
        throw new BException(tr('Removal of temporary mysqldump file on local server failed with exit code ":code"', array(':code' => $exitcode)), 'remote');
    }
}



/*
 * Clear local content data to avoid broken links and other possible problems,
 * just work with clean data from the target environment
 */
if($cleardata){
    log_console(tr('Clearing local content data due to "--clear-data" command line parameter'), 'white');
    file_delete_tree(ROOT.'data/content');
}



/*
 * Sync all
 */
if($nofiles){
    log_console(tr('Skipping syncing remote paths with local server due to "--no-files" command line parameters'), 'yellow');

}else{
    log_console(tr('Syncing remote paths with local server'), 'white');

    array_params($_CONFIG['sync']);

    if(!in_array('data/content', $_CONFIG['sync']) and !in_array('data/content', $_CONFIG['sync'])){
        $_CONFIG['sync'][] = 'data/content';
    }

    /*
     * Ensure write permissions to all files to avoid sync crashes on write protected files
     */
// :TODO: Change this for file_chmod()
    safe_exec(array('commands' => array('chmod', array('sudo' => $sudo, 'timeout' => 120, 'ug+w', ROOT, '-R'))));

    foreach($_CONFIG['sync'] as $path){
        try{
            if(!$path) continue;

            log_console(tr('Syncing path ":path"', array(':path' => $path)), 'white');

            if($deletesync){
                log_console(tr('Deleting local path ":path"', array(':path' => $path)), 'white');
// :TODO: Change this for file_delete();
                passthru($command = 'rm '.ROOT.$path.' -rf', $exitcode);

                if($exitcode){
                    throw new BException(tr('Deleting of local path failed with exit code ":code"', array(':code' => $exitcode)), 'remote');
                }
            }

            try{
// :TODO: Change this for rsync();
                passthru($command = 'rsync -aczvAXHS '.$no_times.' --no-perms --progress -p '.($deploy_config['sudo'] ? '--rsync-path="sudo rsync" ' : '').'-e "ssh -p '.$deploy_config['target_port'].'" '.($deploy_config['target_user'] ? $deploy_config['target_user'].'@' : '').$deploy_config['target_server'].':'.slash($deploy_config['target_dir']).slash($path).' '.ROOT.slash($path).' --exclude="*.php" --exclude="*.css" --exclude="*.js" --exclude="/scripts/*" --exclude="/data/doc" --exclude="/data/system" --exclude="/data/mock*" --exclude="/data/sources" --exclude=".htaccess" --exclude=".git*" --exclude="/pub/*"', $exitcode);

                if($exitcode){
                    throw new BException(tr('Rsync of remote files with local server failed with exit code ":code"', array(':code' => $exitcode)), 'rsync');
                }

            }catch(Exception $e){
                log_console(tr('Failed to get path ":path" from environment ":environment"', array(':path' => $path, ':environment' => $environment)), 'yellow');
            }

        }catch(Exception $e){
            log_console($e);
        }
    }
}



/*
 * Fix definer
 */
if($nodefinerfix){
    log_console(tr('Skpping running definer fix due to "--no-definerfix" command line parameter'), 'yellow');

}else{
    log_console(tr('Fixing function definers'));

    sql_query('UPDATE mysql.proc

               SET    definer = :new_definer

               WHERE  db      = :db
               AND    definer = :old_definer',

               array(':new_definer' => $local_config['db']['core']['user'].'@localhost',
                     ':old_definer' => $source_config['db']['core']['user'].'@localhost',
                     ':db'          => $local_config['db']['core']['db']));
}



/*
 *
 */
if($noinit){
    log_console(tr('Skipping running init due to "--no-init" command line parameter'), 'yellow');

}else{
    /*
     * The init script wll check the database version, but that is very likely already read by now into a constant.
     * After a sync, the REAL current database version is very likely different and will have to be re-read. This can
     * only be done in a separate process, so dont execute the init with script_exec() but passthru() so that its
     * executed in a completely separate PHP process, while still dumping output on command line
     */
    log_console(tr('Executing init script to ensure that database will be up to date'), 'white');
// :TODO: Change this for init() call directly
    passthru(ROOT.'scripts/base/init --env '.ENVIRONMENT, $exitcode);

    if($exitcode){
        throw new BException(tr('Local init failed with exit code ":code"', array(':code' => $exitcode)), 'init');
    }
}



/*
 * Clear cache to avoid working with cache instead of newly synced data
 */
if(!$nocacheclear){
    load_libs('cache');
    cache_clear();
    log_console(tr('Cleared cache'), 'green');
}



/*
 * Blog URL's will contain links that work for the specified environment,
 * but not the local environment, update them
 */
if($noinit or $noblogupdateurl){
    log_console(tr('Skipping blog url update due to "--no-init" or "--no-blog-update-url" command line parameter'), 'yellow');

}else{
    load_libs('blogs');

    /*
     * IMPORTANT! DO NOT USE blogs_update_urls() DIRECTLY AS SYNC DESTROYED THE
     * ORIGINAL DATABASE!
     */
// :TODO: USe script_exec();
    passthru(ROOT.'scripts/base/blogs rebuild-post-urls --env '.ENVIRONMENT);
}



/*
 * Clear badges_cached on users table
 */
if(!$nobadgescached){
    init_hook('sync_badges_cached', $nohooks);
}



/*
 * Fix permissions to ensure all files will have correct file modes
 */
script_exec(array('timeout'  => 60,
                  'commands' => array('base/fix-permissions')));
cli_run_once_local(true);
?>
