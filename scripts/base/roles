#!/usr/bin/php
<?php
/*
 * This is the roles management script
 * Copyright (C) 2015 Sven Oostenbrink
 */
$usage = "./scripts/base/roles list [ --rights | -r ]\n".
         "./scripts/base/roles create --name NAME --description DESCRIPTION\n".
         "./scripts/base/roles modify ID|NAME [--name NAME] [--description DESCRIPTION]\n".
         "./scripts/base/roles delete|undelete|erase ID|USERNAME ID|USERNAME ...\n".
         "./scripts/base/roles add|remove role ROLEID|ROLENAME right RIGHTID|RIGHTNAME \n";

$help  = "This is the roles management script";

require_once(__DIR__.'/../../libs/startup.php');

load_libs('user,roles,paging');

switch(cli_method()){
    case 'list':
        $rights = cli_argument('--rights') or cli_argument('-r');
        cli_no_arguments_left();

        if($rights){
            log_console(tr('Showing rights for currently available roles'), 'QUIET/white');

            $roles = sql_query('SELECT `id`,
                                       `name`,
                                       `status`

                                FROM   `roles`

                                WHERE  `status` IS NULL
                                OR     `status` != "_new" '.sql_limit());

            log_console(str_size('#id', 6).' '.str_size('Name', 20).' '.str_size('Status', 16).' Rights', 'QUIET/cyan');

            while($role = sql_fetch($roles)){
                $rights = sql_list('SELECT    `rights`.`name`

                                    FROM      `roles_rights`

                                    JOIN      `rights`
                                    ON        `rights`.`id`     = `roles_rights`.`rights_id`
                                    AND       `roles_id`        = :roles_id

                                    WHERE     `rights`.`status` IS NULL ',

                                    array(':roles_id' => $role['id']));

                log_console(str_size($role['id'], 6, ' ', true).' '.str_size($role['name'], 20).' '.str_size(status($role['status']), 16).' '.str_force($rights, ', '));
            }

        }else{
            log_console(tr('Showing currently available roles'), 'QUIET/white');

            $roles = sql_query('SELECT `id`,
                                       `name`,
                                       `status`,
                                       `description`

                                FROM   `roles`

                                WHERE  `status` IS NULL
                                OR     `status` != "_new" '.sql_limit());

            log_console(str_size('#id', 6).' '.str_size('Name', 20).' '.str_size('Status', 16).' Description', 'QUIET/cyan');

            while($role = sql_fetch($roles)){
                log_console(str_size($role['id'], 6, ' ', true).' '.str_size($role['name'], 20).' '.str_size(status($role['status']), 16).' '.$role['description']);
            }
        }

        break;

    case 'create':
        try{
            $role = cli_arguments('--name,--description');
            $role = roles_validate($role);

            cli_no_arguments_left();

            sql_query('INSERT INTO `roles` (`createdby`, `name`, `description`)
                       VALUES              (:createdby , :name , :description)',

                       array(':createdby'   => isset_get($_SESSION['user']['id']),
                             ':name'        => $role['name'],
                             ':description' => $role['description']));

            log_console(tr('Created new role ":role"', array(':role' => str_log($role['name']))), 'green');
            break;

        }catch(Exception $e){
            throw new BException(tr('Failed to create new role'), $e);
        }

        break;

    case 'modify':
        try{
            $old_role_id = cli_argument(1);
            $role        = cli_arguments('--name,--description');

            cli_no_arguments_left();

            if(!$role){
                throw new BException(tr('No role specified'), 'warning/not-specified');
            }

            $old_role = sql_get('SELECT `id`, `name`, `description` FROM `roles` WHERE `id` = :role OR `name` = :role', array(':role' => $old_role_id));

            if(!$old_role){
                throw new BException(tr('Specified role ":role" does not exist', array(':role' => $old_role_id)), 'warning/not-specified');
            }

            $role = roles_validate($role, $old_role);

            sql_query('UPDATE `roles`

                       SET    `modifiedon`  = NOW(),
                              `modifiedby`  = :modifiedby,
                              `name`        = :name,
                              `description` = :description

                       WHERE  `id`          = :id',

                       array(':modifiedby'  => isset_get($_SESSION['user']['id']),
                             ':name'        => $role['name'],
                             ':description' => $role['description'],
                             ':id'          => $old_role['id']));

            /*
             * Now also update the cached role names
             */
            sql_query('UPDATE `users_roles`

                       SET    `name` = :name

                       WHERE  `id`   = :id',

                       array(':id'   => $old_role['id'],
                             ':name' => $role['name']));

            log_console(tr('Modified role ":role"', array(':role' => $role['name'])), 'green');
            break;

        }catch(Exception $e){
            throw new BException(tr('Failed to modify role'), $e);
        }

        break;

    case 'delete':
        cli_roles('modify');
        $roles = cli_arguments();

        cli_no_arguments_left();

        if(empty($roles)){
            throw new BException(tr('No roles specified'), 'warning/not-specified');
        }

        $in_name = sql_in($roles, 'name');
        $in_id   = sql_in($roles, 'id');

        if(FORCE){
            $status = '';

        }else{
            $status = ' AND `status` IS NULL ';
        }

        $r  = sql_query('UPDATE `roles`

                         SET    `status` = "deleted"

                         WHERE  `name` IN ('.implode(',', array_keys($in_name)).')
                         OR     `id`   IN ('.implode(',', array_keys($in_id)).')'.$status,

                         array_merge($in_name, $in_id));

        switch(!$r->rowCount()){
            case 0:
                log_console(tr('Not deleted any roles'), 'error');
                break;

            case count($roles):
                log_console(tr('Deleted only ":count" roles from the specified ":specified" roles', array(':count' => $r->rowCount(), ':specified' => count($roles))), 'yellow');
                break;

            default:
                log_console(tr('Deleted ":count" roles', array(':count' => $r->rowCount())), 'green');
        }

        break;

    case 'undelete':
        cli_roles('modify');
        $roles = cli_arguments();

        cli_no_arguments_left();

        if(empty($roles)){
            throw new BException(tr('No roles specified'), 'warning/not-specified');
        }

        $in_name = sql_in($roles, 'name');
        $in_id   = sql_in($roles, 'id');

        if(FORCE){
            $status = '';

        }else{
            $status = ' AND `status` = "deleted" ';
        }

        $r  = sql_query('UPDATE `roles`

                         SET    `status` = NULL

                         WHERE  `name` IN ('.implode(',', array_keys($in_name)).')
                         OR     `id`   IN ('.implode(',', array_keys($in_id)).')'.$status,

                         array_merge($in_name, $in_id));


        switch(!$r->rowCount()){
            case 0:
                log_console(tr('Not undeleted any roles'), 'error');
                break;

            case count($roles):
                log_console(tr('Undeleted only ":count" roles from the specified ":specified" roles', array(':count' => $r->rowCount(), ':specified' => count($roles))), 'yellow');
                break;

            default:
                log_console(tr('Undeleted ":count" roles', array(':count' => $r->rowCount())), 'green');
        }

        break;

    case 'erase':
        cli_roles('modify');
        $roles = cli_arguments();

        cli_no_arguments_left();

        if(empty($roles)){
            throw new BException(tr('No roles specified'), 'warning/not-specified');
        }

        $in_name = sql_in($roles, 'name');
        $in_id   = sql_in($roles, 'id');

        if(FORCE){
            $status = '';

        }else{
            $status = ' AND `status` = "deleted" ';
        }

        $r  = sql_query('DELETE FROM `roles`

                         WHERE (`name` IN ('.implode(',', array_keys($in_name)).')
                         OR     `id`   IN ('.implode(',', array_keys($in_id)).'))'.$status,

                         array_merge($in_name, $in_id));

        switch(!$r->rowCount()){
            case 0:
                log_console(tr('Not erased any roles'), 'error');
                break;

            case count($roles):
                log_console(tr('Erased only ":count" roles from the specified ":specified" roles', array(':count' => $r->rowCount(), ':specified' => count($roles))), 'yellow');
                break;

            default:
                log_console(tr('Erased ":count" roles', array(':count' => $r->rowCount())), 'green');
        }

        break;

    case 'add':
        $role      = cli_argument(1);
        $role      = roles_get();
        $arguments = cli_arguments();

        cli_no_arguments_left();

        /*
         * Ensure that specified rights exist, and get more detailed rights data
         */
        foreach($arguments as $key => $value){
            $right                  = rights_get($value, 'id,name');
            $rights[$right['name']] = $right;
        }

        /*
         * Add the specified rights
         */
        foreach($rights as $right){
            $exist = sql_get('SELECT `id`

                              FROM `roles_rights`

                              WHERE `roles_id`  = :roles_id
                              AND   `rights_id` = :rights_id',

                              'id', array(':roles_id'  => $role['id'],
                                          ':rights_id' => $right['id']));

            if(!$exist){
                sql_query('INSERT INTO `roles_rights` (`rights_id`, `roles_id`)
                           VALUES                     (:rights_id , :roles_id )',

                           array(':roles_id'  => $role['id'],
                                 ':rights_id' => $right['id']));
            }
        }

        log_console(tr('Added rights ":rights" to role ":role"', array(':rights' => array_keys($rights), ':role' => $role)), 'white');
        break;

    case 'remove':
        $role      = cli_argument(1);
        $role      = roles_get();
        $arguments = cli_arguments();

        cli_no_arguments_left();

        /*
         * Ensure that specified rights exist, and get more detailed rights data
         */
        foreach($arguments as $key => $value){
            $right                  = rights_get($value, 'id,name');
            $rights[$right['name']] = $right;
        }

        /*
         * Add the specified rights
         */
        foreach($rights as $right){
            sql_query('DELETE FROM `roles_rights`

                       WHERE       `roles_id`  = :roles_id

                       AND         `rights_id` = :rights_id',

                       array(':roles_id'  => $role['id'],
                             ':rights_id' => $right['id']));
        }

        log_console(tr('Removed rights ":rights" from role ":role"', array(':role' => $role, ':rights' => $rights)), 'white');
        break;

    case '':
        throw new BException(tr('No method specified'), 'no-method');

    default:
        throw new BException(tr('Unknown method ":method" specified', array(':method' => cli_method())), 'unknown-method');
}
?>
