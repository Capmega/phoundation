#!/usr/bin/php
<?php
/*
 * This is an empty test script template
 */
$usage = './scripts/base/images parameters [OPTIONS]
./scripts/base/images optimize PATH | --all [--recursive] [OPTIONS]
./scripts/base/images retina PATH | --all [--recursive] [OPTIONS]
./scripts/base/images info PATH | --all [--recursive] [OPTIONS]';

$help  = 'This script can perform various image actions

METHODS

retina [FILE | all]          - Will ensure retina files are at least
                               available by creating symlinks for
                               all image files

optimize                     - Optimize images using the specified parameters.
                               Optimization will try to improve (make smaller)
                               image sizes by recompressing using higher
                               compression settings, blurring and other
                               techniques, while retaining image quality



OPTIONS

--all(optional)              - Process all project images

--keep-aspectratio (optional)- Ensure image aspect ratio

--quality (optional)         - JPEG Quality factor (0 - 100 [60])

--interlace (optional)       - Make image load interlaced (jpeg, gif, png,
                               none, line, plane, partition, auto [Line])

--strip (optional)           - Strip exif data (true - false [true])

--blur (optional)            - Blur factor. The higher this factor, the lower
                               the image size, though this may affect image
                               quality (0x1 - 10x10 [1x3])

--defines

--sampling-factor

--limit-memory

--limit-map

--format

--method

--width

--height

--recursive                     - If specified, process the source path
                               recursively, processing all images
                               found under that path';

require_once(dirname(__FILE__).'/../../libs/startup.php');

cli_only();
load_libs('file,image');

$params = $_CONFIG['images']['imagemagick'];

$params['keep_aspectratio'] = not_empty(cli_argument('--keep-aspectratio')              , $params['keep_aspectratio']);
$params['quality']          = not_empty(cli_argument('--quality'        , true)         , $params['quality']);
$params['interlace']        = not_empty(cli_argument('--interlace'      , true , 'line'), $params['interlace']);
$params['strip']            = not_empty(cli_argument('--strip'          , false, true)  , $params['strip']);
$params['blur']             = not_empty(cli_argument('--blur'           , true , '1x3') , $params['blur']);
$params['defines']          = not_empty(cli_argument('--defines'        , true)         , $params['defines']);
$params['sampling_factor']  = not_empty(cli_argument('--sampling-factor', true)         , $params['sampling_factor']);
$params['limit']['memory']  = not_empty(cli_argument('--limit-memory'   , true)         , $params['limit']['memory']);
$params['limit']['map']     = not_empty(cli_argument('--limit-map'      , true)         , $params['limit']['map']);

$params['format']           = cli_argument('--format', true);
$params['backup']           = not_empty(cli_argument('--backup-original'), cli_argument('-b'));
$params['x']                = not_empty(cli_argument('--width' , true)   , cli_argument('-x', true));
$params['y']                = not_empty(cli_argument('--height', true)   , cli_argument('-y', true));

switch(cli_method()){
    case 'retina':
        $count = 0;
        $all   = cli_argument('--all') or cli_argument('-a');

        cli_no_arguments_left();

        if($all){
            foreach(array('jpg', 'png') as $extension){
                $files = safe_exec('find '.ROOT.' -iname "*.'.$extension.'"');

                foreach($files as $file){
                    if(strtolower(substr($file, -7, 7)) == '@2x.'.$extension){
                        /*
                         * This is a retina file, skip
                         */
                        continue;
                    }

                    $link = str_replace('.'.$extension, '@2x.'.$extension, $file);

                    if(file_exists($link)){
                        if(!is_link($link)){
                            /*
                             * Existing file is a real file, so probably has
                             * unique contents. Leave it alone
                             */
                            continue;
                        }

                        /*
                         * Existing file is a symlink. Remove it so we can
                         * update it and be sure it links to the correct file
                         */
                        unlink($link);
                    }

                    /*
                     * Create the target link
                     */
                    if(VERBOSE){
                        cli_log(tr('Creating symlink for file ":file"', array(':file' => $file)));
                    }

                    $count++;
                    symlink(basename($file), $link);
                }
            }

            cli_log(tr('Created ":count" symlinks for missing retina images', array(':count' => $count)), 'green');

        }else{
            /*
             * This must be a single file specification
             */
            if(!file_exists($file)){
                throw new bException(tr('Specified file ":file" does not exist', array(':file' => cli_argument(1))), 'not-exist');
            }

            $link = str_replace('.'.$extension, '@2x.'.$extension, $file);

            if(!file_exists($link)){
                /*
                 *
                 */
                if(VERBOSE){
                    cli_log(tr('Creating symlink for file ":file"', array(':file' => $file)));
                }

                $count++;
                symlink($file, $link);
            }
        }

        break;

    case 'parameters':
        /*
         * Display current image parameters mixed with settings from command
         * line
         */
        cli_no_arguments_left();
        ksort($params);

        foreach($params as $key => $value){
            if(is_array($value)){
                foreach($value as $subkey => $subvalue){
                    cli_log(str_size($key   , 20), 'cyan', false);

                    if(!is_numeric($subkey)){
                        cli_log(str_size($subkey, 20), 'cyan', false);
                    }

                    cli_log(str_force($subvalue), 'white');
                }

                continue;
            }

            cli_log(str_size($key, 20), 'cyan', false);
            cli_log(str_force($value) , 'white');
        }

        break;

    case 'info':
        /*
         * Display information on the images in the specified path
         */
        $recursive = cli_argument('--recursive') or cli_argument('-r');
        $all       = cli_argument('--all')       or cli_argument('-a');
        $source    = cli_argument();

        if(cli_argument('--default') or cli_argument('--defaults')){
            $params = array();
        }

        cli_no_arguments_left();



        /*
         * Check source path
         */
        if($all){
            if($recursive){
                throw new bException(tr('Both --all and --recursive have been specified. These options are mutually exclusive, please specify one or the other'), 'invalid');
            }

            $source = ROOT;

        }else{
            /*
             * Get absolute path from cwd
             */
            $source = file_absolute($source);
        }



        /*
         * Display information on all image files
         */
        file_tree_execute(array('path'      => $source,
                                'recursive' => $recursive,
                                'callback'  => function($file) use ($params){
                                                    if(!is_image($file)){
                                                        if(VERBOSE){
                                                            cli_log(tr('Skipping file ":image", it is not an image', array(':image' => $file)), 'yellow');
                                                        }

                                                        return;
                                                    }

                                                    try{
                                                        $info = image_info($file);

                                                        cli_log(str_size(tr('Path'), 20), 'cyan', false);
                                                        cli_log(str_force($info['path']) , 'white');
                                                        cli_log(str_size(tr('File'), 20), 'cyan', false);
                                                        cli_log(str_force($info['file']) , 'white');
                                                        cli_log(str_size(tr('Mimetype'), 20), 'cyan', false);
                                                        cli_log(str_force($info['mime']) , 'white');
                                                        cli_log(str_size(tr('Width'), 20), 'cyan', false);
                                                        cli_log(str_force($info['x']) , 'white');
                                                        cli_log(str_size(tr('Height'), 20), 'cyan', false);
                                                        cli_log(str_force($info['y']) , 'white');
                                                        cli_log(str_size(tr('Bits'), 20), 'cyan', false);
                                                        cli_log(str_force($info['bits']) , 'white');

                                                        if(!empty($info['compression'])){
                                                            cli_log(str_size(tr('Compression'), 20), 'cyan', false);
                                                            cli_log(str_force($info['compression']) , 'white');
                                                        }

                                                        if(!empty($info['exif'])){
                                                            cli_log(str_size(tr('EXIF INFORMATION:'), 20), 'cyan');

                                                            foreach($info['exif'] as $key => $value){
                                                                if(is_array($value)){
                                                                    foreach($value as $subkey => $subvalue){
                                                                        cli_log(str_size($key   , 30), 'cyan', false);

                                                                        if(!is_numeric($subkey)){
                                                                            cli_log(str_size($subkey, 30), 'cyan', false);
                                                                        }

                                                                        if($key === 'THUMBNAIL'){
                                                                            $subvalue = tr('YES');
                                                                        }

                                                                        cli_log(str_force($subvalue), 'white');
                                                                    }

                                                                    continue;
                                                                }

                                                                cli_log(str_size($key, 30), 'cyan', false);
                                                                cli_log(str_force($value) , 'white');
                                                            }
                                                        }

                                                        cli_log();

                                                    }catch(Exception $e){
                                                        cli_log(tr('Skipping file ":image", failed with ":error"', array(':image' => $file, ':error' => $e->getMessage())), 'yellow');
                                                    }
                                               }));
        break;

    case 'optimize':
        /*
         * Check destination path
         */
        $source    = cli_argument();
        $recursive = cli_argument('--recursive') or cli_argument('-r');
        $all       = cli_argument('--all')       or cli_argument('-a');

        if(cli_argument('--default') or cli_argument('--defaults')){
            $params = array();

        }else{
        }

        cli_no_arguments_left();



        /*
         * Check source path
         */
        if($all){
            if($recursive){
                throw new bException(tr('Both --all and --recursive have been specified. These options are mutually exclusive, please specify one or the other'), 'invalid');
            }

            $source = ROOT;
        }



        /*
         * Execute the conversion on the specified path
         */
        file_tree_execute(array('path'      => realpath($source),
                                'recursive' => $recursive,
                                'callback'  => function($file) use ($params){
                                                    global $_CONFIG;

                                                    if(is_image($file)){
                                                        if(VERBOSE){
                                                            cli_log(tr('Skipping file ":image", it is not an image', array(':image' => $file)), 'yellow');
                                                        }

                                                        return;
                                                    }

                                                    try{
                                                        image_convert($file, $file, $params);
                                                        usleep(5000);

                                                    }catch(Exception $e){
                                                        cli_log(tr('Skipping file ":image", failed with ":error"', array(':image' => $file, ':error' => $e->getMessage())), 'yellow');
                                                    }
                                               }));

        sql_query('TRUNCATE `html_img`');
        cli_log(tr('Cleared html_img cache'), 'green');

        if(!VERBOSE){
            cli_dot(false);
        }

        cli_log(tr('Finished!'), 'green');
        break;

    case '':
        throw new bException(tr('No method specified'), 'unknown');

    default:
        throw new bException(tr('Unknown method ":method" specified', array(':method' => cli_method())), 'unknown');
}
?>
