#!/usr/bin/php
<?php
/*
 * This is an empty test script template
 */
$usage = "./scripts/base/images option [option]\n";
         "./scripts/base/images optimize --destination DESTINATION-PATH --source SOURCE-PATH --file | --files\n";

$help  = "This script can perform various image actions

METHODS

retina [FILE | all]          - Will ensure retina files are at least
                               available by creating symlinks for
                               all image files

optimize                     - Optimize images using the specified parameters.
                               Optimization will try to improve (make smaller)
                               image sizes by recompressing using higher
                               compression settings, blurring and other
                               techniques, while retaining image quality



OPTIONS

--keep-aspectratio (optional)- Ensure image aspect ratio

--quality (optional)         - JPEG Quality factor (0 - 100 [60])

--interlace (optional)       - Make image load interlaced (jpeg, gif, png,
                               none, line, plane, partition, auto [Line])

--strip (optional)           - Strip exif data (true - false [true])

--blur (optional)            - Blur factor. The higher this factor, the lower
                               the image size, though this may affect image
                               quality (0x1 - 10x10 [1x3])

--defines

--sampling-factor

--limit-memory

--limit-map

--format

--method

--width

--height

--recursive                     - If specified, process the source path
                               recursively, processing all images
                               found under that path";

require_once(dirname(__FILE__).'/../../libs/startup.php');

cli_only();
load_libs('file,image');

switch(cli_method()){
    case 'retina':
        $count = 0;
        $all   = cli_argument('--all') or cli_argument('-a');

        cli_no_arguments_left();

        if($all){
            foreach(array('jpg', 'png') as $extension){
                $files = safe_exec('find '.ROOT.' -iname "*.'.$extension.'"');

                foreach($files as $file){
                    if(strtolower(substr($file, -7, 7)) == '@2x.'.$extension){
                        /*
                         * This is a retina file, skip
                         */
                        continue;
                    }

                    $link = str_replace('.'.$extension, '@2x.'.$extension, $file);

                    if(file_exists($link)){
                        if(!is_link($link)){
                            /*
                             * Existing file is a real file, so probably has
                             * unique contents. Leave it alone
                             */
                            continue;
                        }

                        /*
                         * Existing file is a symlink. Remove it so we can
                         * update it and be sure it links to the correct file
                         */
                        unlink($link);
                    }

                    /*
                     * Create the target link
                     */
                    if(VERBOSE){
                        cli_log(tr('Creating symlink for file ":file"', array(':file' => $file)));
                    }

                    $count++;
                    symlink(basename($file), $link);
                }
            }

            cli_log(tr('Created ":count" symlinks for missing retina images', array(':count' => $count)), 'green');

        }else{
            /*
             * This must be a single file specification
             */
            if(!file_exists($file)){
                throw new bException(tr('Specified file ":file" does not exist', array(':file' => cli_argument(1))), 'not-exist');
            }

            $link = str_replace('.'.$extension, '@2x.'.$extension, $file);

            if(!file_exists($link)){
                /*
                 *
                 */
                if(VERBOSE){
                    cli_log(tr('Creating symlink for file ":file"', array(':file' => $file)));
                }

                $count++;
                symlink($file, $link);
            }
        }

        break;

    case 'optimize':
        /*
         * Check destination path
         */
        $source    = cli_argument(1);
        $recursive = cli_argument('--recursive');

        if(cli_argument('--default') or cli_argument('--defaults')){
            $params = array();

        }else{
            $params['keep_aspectratio'] = cli_argument('--keep-aspectratio');
            $params['quality']          = cli_argument('--quality'        , true);
            $params['interlace']        = cli_argument('--interlace'      , true , 'line');
            $params['strip']            = cli_argument('--strip'          , false, true);
            $params['blur']             = cli_argument('--blur'           , true , '1x3');
            $params['defines']          = cli_argument('--defines'        , true);
            $params['sampling_factor']  = cli_argument('--sampling-factor', true);
            $params['limit_memory']     = cli_argument('--limit-memory'   , true);
            $params['limit_map']        = cli_argument('--limit-map'      , true);
            $params['method']           = cli_argument('--method', true, 'resize');
            $params['format']           = cli_argument('--format', true);
            $params['x']                = not_empty(cli_argument('--width' , true), cli_argument('-x', true));
            $params['y']                = not_empty(cli_argument('--height', true), cli_argument('-y', true));
        }

        cli_no_arguments_left();



        /*
         * Check source path
         */
        if(!$source){
            $source = ROOT;
        }

        if(!file_exists($source)){
            throw new bException(tr('The specified source path ":path" does not exist', array(':path' => $source)), 'not-exist');
        }



        /*
         * Execute the conversion on the specified path
         */
        file_tree_execute(array('path'      => realpath($source),
                                'recursive' => true,
                                'callback'  =>  function($file) use ($params){
                                                    global $_CONFI;

                                                    if(is_image($file)){
                                                        try{
                                                            image_convert($file, $file, $params);
                                                            usleep(5000);

                                                        }catch(Exception $e){
                                                            cli_log(tr('Skipping file ":image", failed with ":error"', array(':image' => $file, ':error' => $e->getMessage())), 'yellow');
                                                        }

                                                    }else{
                                                        cli_log(tr('Skipping file ":image", it is not an image', array(':image' => $file)), 'yellow');
                                                    }
                                                }));

        if(!VERBOSE){
            cli_dot(false);
        }

        cli_log(tr('Finished!'), 'green');
        break;

    case '':
        throw new bException(tr('No method specified'), 'unknown');

    default:
        throw new bException(tr('Unknown method ":method" specified', array(':method' => cli_method())), 'unknown');
}
?>
