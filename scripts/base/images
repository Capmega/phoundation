#!/usr/bin/php
<?php
/*
 * This is the images management script. This script can retrieve information from images, optimize and modify them
 */
$usage = './scripts/base/images parameters [OPTIONS]
./scripts/base/images optimize PATH | --all [--recursive] [OPTIONS]
./scripts/base/images retina PATH | --all [--recursive] [OPTIONS]
./scripts/base/images info PATH | --all [--recursive] [OPTIONS]
./scripts/base/images clear-cache';

$help  = 'This script can perform various image actions



METHODS



retina [FILE | all]         - Will ensure retina files are at least
                              available by creating symlinks for
                              all image files

optimize                    - Optimize images using the specified parameters.
                              Optimization will try to improve (make smaller)
                              image sizes by recompressing using higher
                              compression settings, blurring and other
                              techniques, while retaining image quality

parameters                  - Will show the parameters that will be used to
                              optimize images. Parameters are taken from
                              configuration and overridden by command line
                              options

info                        - Shows information about the specified image, or
                              all images in the specified path (optionally
                              tree, if --recursive is specified)

clear-cache                 - Clear the `html_img_cache` cache table that
                              contains image sizes used by html_img()



OPTIONS

[--all]                     - Process all project images

[--keep-aspectratio]        - Ensure image aspect ratio

[--quality QUALITY]         - JPEG Quality factor (0 - 100 [60])

[--interlace VALUE]         - Make image load interlaced (OPTION can be jpeg,
                              gif, png, none, line, plane, partition,
                              auto [Line])

[--strip]                   - Strips exif data if specified

[--blur FACTOR]             - Blur by FACTOR (0x1 - 10x10 [1x3]). The higher
                              this factor, the lower the image size (as the
                              image will contain less information) though
                              this will affect image quality

[--mirror [RANDOM]]         - Mirror the image. If RANDOM (0 - 100) is
                              specified, there will be a RANDOM % chance that
                              the image will be mirrored.

[--flip [RANDOM]]           - Flip the image over its horizontal axis. If
                              RANDOM (0 - 100) is specified, there will be a
                              RANDOM % chance that the image will be mirrored.

[--skew COORDINATES]        - Distort the image by skewing it with the
        [+/- RANDOM]]         specified coordinates. If RANDOM is specified,
                              the actual skewing may be off by
                              random 0 - RANDOM %

[--rotate DEGREES           - Rotate the image wiht the specified amount of
          [+/- RANDOM]]       degrees. If RANDOM is specified, the actual
                              rotation may be off by random 0 - RANDOM %

[--brightness BRIGHTNESS    - Adjust the brightness of the image with the
              [+/- RANDOM]]   specified amount (-100 - 100). If RANDOM is
                              specified, the actual applied brightness may be
                              off by BRIGHTNESS + random(0 +/- RANDOM). For
                              example, --brightness 0 50 may end up with a
                              brightness from -50 to + 50

[--contrast CONTRAST        - Adjust the contrast of the image with the
            [+/- RANDOM]]     specified amount (-100 - 100). If RANDOM is
                              specified, the actual applied contrast may be
                              off by CONTRAST + random(0 +/- RANDOM). For
                              example, --contrast 0 50 may end up with a
                              contrast from -50 to + 50

[--gamma GAMMA              - Adjust the gamma of the image with the specified
         [+/- RANDOM]]        amount (-100 - 100). If RANDOM is specified, the
                              actual applied gamma may be off by
                              GAMMA + random(0 +/- RANDOM). For example,
                              --gamma 0 50 may end up with a gamma from
                              -50 to + 50

--defines                   - imagemagick -defines

--sampling-factor           - Sampling factor. Use 4:2:0 for even smaller
                               images which retain relatively good quality

--limit-memory              -

--limit-map                 -

--format                    - Force specified format on all images to be
                              processed

--method                    - Force specified method on all images to be
                              processed. Valid methods are thumb, resize-w,
                              resize, thumb-circle, crop-resize, and custom
                              (default is custom)

--width                     - Force specified width on all images to be
                              processed

--height                    - Force specified height on all images to be
                              processed

--recursive                 - If specified, process the source path
                              recursively, processing all images found under
                              that path

--backup / -b               - (optimize only) Make a backup of each image
                              before processing it. Backups will have the name
                              file~Ymd-His

--no-exif / -e              - (info or optimize with -d only) Do not display
                              EXIF information

--display-difference / -d   - When optimizing images, show the differce from
                              before and after the optimization process

--show-images / -s          - Show before / after images. Does NOT work with
                              --recursive to avoid opening possibly thousands
                              of image viewers. By default, uses "feh" viewer
                              since this is the fastes and lightest around

--no-delete / -n            - (optimize and TEST mode only) Do not delete the
                              temporary file so that it can be used to view the
                              visual quality



OPTIONS (WEBP FORMAT ONLY)

--alpha-compression         - encode the alpha plane: 0 = none, 1 = compressed.

--alpha-filtering           - predictive filtering method for alpha plane:
                              0=none, 1=fast, 2=best.

--alpha-quality             - The compression value for alpha compression
                              between 0 and 100. Lossless compression of alpha
                              is achieved using a value of 100, while the lower
                              values result in a lossy compression. The default
                              is 100.

--auto-filter               - When enabled, the algorithm spends additional time
                              optimizing the filtering strength to reach a
                              well-balanced quality.

--emulate-jpeg-size         - Return a similar compression to that of JPEG but
                              with less degradation.

--filter-sharpness          - Filter sharpness.

--filter-strength           - The strength of the deblocking filter, between 0
                              (no filtering) and 100 (maximum filtering). A
                              value of 0 turns off any filtering. Higher values
                              increase the strength of the filtering process
                              applied after decoding the image. The higher the
                              value, the smoother the image appears. Typical
                              values are usually in the range of 20 to 50.

--filter-type               - Filter type: 0 = simple, 1 = strong

--image-hint                - The hint about the image type. Value must be one
                              of default, photo, picture, graph

--lossless                  - Encode the image without any loss

--low-memory                - Reduce memory usage.

--method                    - The compression method to use. It controls the
                              trade off between encoding speed and the
                              compressed file size and quality. Possible values
                              range from 0 to 6. Default value is 4. When higher
                              values are utilized, the encoder spends more time
                              inspecting additional encoding possibilities and
                              decide on the quality gain. Lower value might
                              result in faster processing time at the expense of
                              larger file size and lower compression quality.

--preprocessing             - Choose from: 0=none, 1=segment-smooth,
                              2=pseudo-random dithering.

--partitions                - Progressive decoding: choose 0 to 3.

--partition-limit           - Choose 0 for no quality degradation and 100 for
                              maximum degradation.

--pass                      - Maximum number of passes to target compression
                              size or PSNR.

--segment                   - Choose from 1 to 4, the maximum number of segments
                              to use.

--show-compressed           -


--sns-strength              - The amplitude of the spatial noise shaping.
                              Spatial noise shaping (SNS) refers to a general
                              collection of built-in algorithms used to decide
                              which area of the picture should use relatively
                              less bits, and where else to better transfer these
                              bits. The possible range goes from 0 (algorithm is
                              off) to 100 (the maximal effect). The default
                              value is 80.


--target-size               - A target size (in bytes) to try and reach for the
                              compressed output. The compressor makes several
                              passes of partial encoding in order to get as
                              close as possible to this target.


--target-psnr               - Desired minimal distortion.

--thread-level              - Enable multi-threaded encoding.

--use-sharp-yuv             - If needed, use sharp (and slow) RGB->YUV
                              conversion.';

require_once(__DIR__.'/../../libs/startup.php');

cli_only();
load_libs('image');

$params = $_CONFIG['images']['imagemagick'];

$params['keep_aspectratio'] = not_empty(cli_argument('--keep-aspectratio')              , $params['keep_aspectratio']);
$params['quality']          = not_empty(cli_argument('--quality'        , true)         , $params['quality']);
$params['interlace']        = not_empty(cli_argument('--interlace'      , true , 'line'), $params['interlace']);
$params['strip']            = not_empty(cli_argument('--strip'          , false, true)  , $params['strip']);
$params['blur']             = not_null (cli_argument('--blur'           , true , '1x3') , $params['blur']);
$params['defines']          = not_empty(cli_argument('--defines'        , true)         , $params['defines']);
$params['sampling_factor']  = not_empty(cli_argument('--sampling-factor', true)         , $params['sampling_factor']);
$params['limit']['memory']  = not_empty(cli_argument('--limit-memory'   , true)         , $params['limit']['memory']);
$params['limit']['map']     = not_empty(cli_argument('--limit-map'      , true)         , $params['limit']['map']);

$params['format']           = cli_argument('--format', true);
$params['method']           = not_empty(cli_argument('--method', true), 'custom');
$params['backup']           = not_empty(cli_argument('--backup-original'), cli_argument('-b'));
$params['x']                = not_empty(cli_argument('--width' , true)   , cli_argument('-x', true));
$params['y']                = not_empty(cli_argument('--height', true)   , cli_argument('-y', true));

/*
 * Options for webp
 */
$params['alpha_compression'] = not_empty(cli_argument('--alpha-compression', true));
$params['alpha_filtering']   = not_empty(cli_argument('--alpha-filtering'  , true));
$params['alpha_quality']     = not_empty(cli_argument('--alpha-quality'    , true));
$params['auto_filter']       = not_empty(cli_argument('--auto-filter'      , true));
$params['emulate_jpeg_size'] = not_empty(cli_argument('--emulate-jpeg-size', true));
$params['filter_sharpness']  = not_empty(cli_argument('--filter-sharpness' , true));
$params['filter_strength']   = not_empty(cli_argument('--filter-strength'  , true));
$params['filter_type']       = not_empty(cli_argument('--filter-type'      , true));
$params['image_hint']        = not_empty(cli_argument('--image-hint'       , true));
$params['lossless']          = not_empty(cli_argument('--lossless'         , true));
$params['low_memory']        = not_empty(cli_argument('--low-memory'       , true));
$params['webp_method']       = not_empty(cli_argument('--method'           , true));
$params['preprocessing']     = not_empty(cli_argument('--preprocessing'    , true));
$params['partitions']        = not_empty(cli_argument('--partitions'       , true));
$params['partition_limit']   = not_empty(cli_argument('--partition-limit'  , true));
$params['pass']              = not_empty(cli_argument('--pass'             , true));
$params['segment']           = not_empty(cli_argument('--segment'          , true));
$params['show_compressed']   = not_empty(cli_argument('--show-compressed'  , true));
$params['sns_strength']      = not_empty(cli_argument('--sns-strength'     , true));
$params['target_size']       = not_empty(cli_argument('--target-size'      , true));
$params['target_psnr']       = not_empty(cli_argument('--target-psnr'      , true));
$params['thread_level']      = not_empty(cli_argument('--thread-level'     , true));
$params['use_sharp_yuv']     = not_empty(cli_argument('--use-sharp-yuv'    , true));
$params['timeout']           = not_empty(cli_argument('--timeout'          , 60));

$now = date_convert(null, 'Ymd-His');

switch(cli_method()) {
    case 'glitch':
        $file   = cli_argument(1);
        $output = cli_argument(2);
        cli_no_arguments_left();

        if (!$output) {
            throw new CoreException(tr('No output file specified'), 'not-specified');
        }

        $file   = image_glitch($file);
        rename($file, $output);
        break;

    case 'retina':
        $count = 0;
        $all   = not_empty(cli_argument('--all'), cli_argument('-a'));

        cli_no_arguments_left();

        if ($all) {
            foreach(array('jpg', 'png') as $extension) {
                $files = safe_exec(array('commands' => array('find', array(ROOT, '-iname', '"*.'.$extension.'"'))));

                foreach($files as $file) {
                    if (strtolower(substr($file, -7, 7)) == '@2x.'.$extension) {
                        /*
                         * This is a retina file, skip
                         */
                        continue;
                    }

                    $link = str_replace('.'.$extension, '@2x.'.$extension, $file);

                    if (file_exists($link)) {
                        if (!is_link($link)) {
                            /*
                             * Existing file is a real file, so probably has
                             * unique contents. Leave it alone
                             */
                            continue;
                        }

                        /*
                         * Existing file is a symlink. Remove it so we can
                         * update it and be sure it links to the correct file
                         */
                        unlink($link);
                    }

                    /*
                     * Create the target link
                     */
                    if (VERBOSE) {
                        log_console(tr('Creating symlink for file ":file"', array(':file' => $file)));
                    }

                    $count++;
                    symlink(basename($file), $link);
                }
            }

            log_console(tr('Created ":count" symlinks for missing retina images', array(':count' => $count)), 'green');

        } else {
            /*
             * This must be a single file specification
             */
            if (!file_exists($file)) {
                throw new CoreException(tr('Specified file ":file" does not exist', array(':file' => cli_argument(1))), 'warning/not-exist');
            }

            $link = str_replace('.'.$extension, '@2x.'.$extension, $file);

            if (!file_exists($link)) {
                /*
                 *
                 */
                if (VERBOSE) {
                    log_console(tr('Creating symlink for file ":file"', array(':file' => $file)));
                }

                $count++;
                symlink($file, $link);
            }
        }

        break;

    case 'parameters':
        /*
         * Display current image parameters mixed with settings from command
         * line
         */
        cli_no_arguments_left();
        ksort($params);

        foreach($params as $key => $value) {
            if (is_array($value)) {
                foreach($value as $subkey => $subvalue) {
                    log_console(str_size($key   , 20), 'cyan', false);

                    if (!is_numeric($subkey)) {
                        log_console(str_size($subkey, 20), 'cyan', false);
                    }

                    if (($key === 'blur') and (!$value)) {
                        $value = tr('No');
                    }

                    log_console(str_force($subvalue), 'white');
                }

                continue;
            }

            if ($key === 'format') {
                if ($value) {
                    $value = tr('Force :format', array(':format' => $value));

                } else {
                    $value = tr('Keep');
                }
            }

            log_console(str_size($key, 20), 'cyan', false);
            log_console(str_force($value) , 'white');
        }

        break;

    case 'info':
        /*
         * Display information on the images in the specified path
         */
        $recursive = not_empty(cli_argument('--recursive'), cli_argument('-r'));
        $all       = not_empty(cli_argument('--all')      , cli_argument('-a'));
        $no_exif   = not_empty(cli_argument('--no-exif')  , cli_argument('-e'));
        $source    = cli_argument();

        if (not_empty(cli_argument('--default'), cli_argument('--defaults'))) {
            $params = array();
        }

        cli_no_arguments_left();
        load_libs('numbers');

        /*
         * Check source path
         */
        if ($all) {
            if ($recursive) {
                throw new CoreException(tr('Both --all and --recursive have been specified. These options are mutually exclusive, please specify one or the other'), 'warning/invalid');
            }

            $source = ROOT;

        } else {
            /*
             * Get absolute path from cwd
             */
            $source = file_absolute($source);
        }

        if (!$source) {
            throw new CoreException(tr('No path specified'), 'warning/not-specified');
        }

        /*
         * Display information on all image files
         */
        file_tree_execute(array('path'      => $source,
                                'recursive' => $recursive,
                                'callback'  => function($file) use ($params, $no_exif) {
                                                    if (!is_image($file)) {
                                                        if (VERBOSE) {
                                                            log_console(tr('Skipping file ":image", it is not an image', array(':image' => $file)), 'yellow');
                                                        }

                                                        return;
                                                    }

                                                    try{
                                                        $info = image_info($file, $no_exif);
                                                        s_display_info($info);

                                                    }catch(Exception $e) {
                                                        log_console(tr('Skipping file ":image", failed with ":error"', array(':image' => $file, ':error' => $e->getMessage())), 'yellow');
                                                    }
                                               }));
        break;

    case 'optimize':
        /*
         * Check destination path
         */
        $recursive    = not_empty(cli_argument('--recursive')         , cli_argument('-r'));
        $all          = not_empty(cli_argument('--all')               , cli_argument('-a'));
        $display_diff = not_empty(cli_argument('--display-difference'), cli_argument('-d'));
        $show_images  = not_empty(cli_argument('--show-images')       , cli_argument('-s'));
        $no_exif      = not_empty(cli_argument('--no-exif')           , cli_argument('-e'));
        $source       = cli_argument();
        $no_delete    = false;

        array_default($params, 'format', 'webp');

        if (not_empty(cli_argument('--default'), cli_argument('--defaults'))) {
            $params = array();
        }

        if (TEST) {
            $no_delete = not_empty(cli_argument('--no-delete'), cli_argument('-n'));

            if ($params['backup']) {
                $params['backup'] = false;
                log_console(tr('Both backup and test options were specified, disabled "backup" since test will not change the original file'), 'yellow');
            }

            $display_diff = true;
        }

        if ($display_diff) {
            $no_exif = not_empty(cli_argument('--no-exif'), cli_argument('-e'));
        }

        if ($show_images) {
            if ($recursive) {
                throw new CoreException(tr('Both --show-images and --recursive have been specified. These options are mutually exclusive, please specify one or the other'), 'warning/invalid');
            }

            if (TEST) {
                /*
                 * Okay, we can see both in TEST mode
                 */
                $no_delete = true;

            } elseif ($params['backup']) {
                /*
                 * Okay, we can see both in backup mode
                 */

            } else {
                /*
                 * Erw, original image will be destroyed and we won't be able
                 * to show it!
                 */
                $params['copy_to_temp'] = true;
            }
        }

        cli_no_arguments_left();
        load_libs('numbers');

        /*
         * Check source path
         */
        if ($all) {
            if ($recursive) {
                throw new CoreException(tr('Both --all and --recursive have been specified. These options are mutually exclusive (--all implies --recursive), please specify one or the other'), 'warning/invalid');
            }

            $source    = ROOT;
            $recursive = true;

        } else {
            /*
             * Get absolute path from cwd
             */
            $source = file_absolute($source);
        }

        if (!$source) {
            throw new CoreException(tr('No path specified'), 'warning/not-specified');
        }

        /*
         * Execute the conversion on the specified path
         */
        log_console(tr('Starting image converting'), 'white');

        $count = file_tree_execute(array('path'      => $source,
                                         'recursive' => $recursive,
                                         'callback'  => function($file) use ($params, $display_diff, $no_exif, $no_delete, $show_images, $now) {
                                                            global $_CONFIG;

                                                            if (!is_image($file)) {
                                                                log_console(tr('Skipping file ":image", it is not an image', array(':image' => $file)), 'VERBOSE/yellow');
                                                                return;
                                                            }

                                                            try{
                                                                if ($params['backup']) {
                                                                    /*
                                                                     * Make a backup of
                                                                     * the original file
                                                                     */
                                                                    copy($file, $file.'~'.$now);
                                                                }

                                                                if (!empty($params['copy_to_temp'])) {
                                                                    /*
                                                                     * Make a copy of the original file in the
                                                                     * temp directory so we can show it later
                                                                     * to compare to the new version
                                                                     */
                                                                    $params['copy_to_temp'] = file_temp(false);
                                                                    copy($file, $params['copy_to_temp']);
                                                                }

                                                                if (TEST) {
                                                                    $target = file_temp(false);

                                                                } else {
                                                                    $target = $file;
                                                                }

                                                                if ($display_diff) {
                                                                    $before = image_info($file, $no_exif);
                                                                }

                                                                $params['source'] = $file;
                                                                $params['target'] = $target;

                                                                if ($params['format']) {
                                                                    $format = Strings::fromReverse($params['source'], '.');

                                                                    if ($format !== $params['format']) {
                                                                        /*
                                                                         * Target file is different from source file, ensure that it doesn't exist
                                                                         */
                                                                        $params['target'] = Strings::untilReverse($params['source'], '.').'.'.$params['format'];
                                                                        file_delete($params['target'], false);
                                                                    }
                                                                }

                                                                file_execute_mode(dirname($params['target']), 0770, function() use ($params, &$target) {
                                                                    file_execute_mode($params['source'], 0660, function() use ($params, &$target) {
                                                                        $target = image_convert($params);
                                                                    });
                                                                });

                                                                if ($display_diff) {
                                                                    log_console(tr('Before:'), 'white');
                                                                    s_display_info($before);

                                                                    log_console(tr('After:'), 'white');
                                                                    s_display_info(image_info($target, $no_exif));
                                                                }

                                                            }catch(Exception $e) {
                                                                log_console(tr('Skipping file ":image", failed with ":error"', array(':image' => $file, ':error' => $e->getMessage())), 'yellow');
                                                            }

                                                            if ($show_images) {
                                                                try{
                                                                    if (empty($params['copy_to_temp'])) {
                                                                        if (TEST) {
                                                                            /*
                                                                             * Original image was not modified, target is in tmp dir
                                                                             */
                                                                            image_view($target);
                                                                            image_view($file);

                                                                        } else {
                                                                            /*
                                                                             * Original image was stored as backup
                                                                             */
                                                                            image_view($target);
                                                                            image_view($file.'~'.$now);
                                                                        }

                                                                    } else {
                                                                        /*
                                                                         * Original is stored in temp directory
                                                                         */
                                                                        image_view($params['copy_to_temp']);
                                                                        image_view($target);
                                                                    }

                                                                }catch(Exception $e) {
                                                                    /*
                                                                     * Image viewer crashed for some reason
                                                                     */
                                                                    log_console(tr('Failed to view image file ":image" with ":error"', array(':image' => $file, ':error' => $e->getMessage())), 'yellow');
                                                                }
                                                            }

                                                            /*
                                                             *
                                                             */
                                                            try{
                                                                if (TEST and !$no_delete) {
                                                                    file_delete($target, ROOT);
                                                                }

                                                            }catch(Exception $e) {
                                                                log_console(tr('Failed to delete file ":image" with ":error"', array(':image' => $file, ':error' => $e->getMessage())), 'yellow');
                                                            }
                                                        }));

        if (!VERBOSE) {
            cli_dot(false);
        }

        log_console(tr('Finished converting ":count" images', array(':count' => $count)), 'green');
        break;

    case 'view':
        /*
         * Show the specified image using the configured image viewer
         *
         * First check file, make sure it exists and is an image
         * Then also check the configured viewer, make sure it works
         */
        $image = cli_argument();
        cli_no_arguments_left();
        load_libs('image');
        image_view($image);
        break;

    case 'clear-cache':
        if (TEST) {
            break;
        }

        sql_query('TRUNCATE `html_img_cache`');
        log_console(tr('Cleared html_img cache'), 'green');
        break;

    case '':
        throw new CoreException(tr('No method specified'), 'no-method');

    default:
        throw new CoreException(tr('Unknown method ":method" specified', array(':method' => cli_method())), 'unknown-method');
}



/*
 * Display image information
 */
function s_display_info($info) {
    try{
        log_console(str_size(tr('File'), 20), 'cyan', false);
        log_console($info['path'].$info['filename'], 'white');
        log_console(str_size(tr('Path'), 20), 'cyan', false);
        log_console($info['path'], 'white');
        log_console(str_size(tr('Filename'), 20), 'cyan', false);
        log_console($info['filename'], 'white');
        log_console(str_size(tr('File size'), 20), 'cyan', false);
        log_console(bytes($info['size']) , 'white');
        log_console(str_size(tr('Mimetype'), 20), 'cyan', false);
        log_console($info['mime'], 'white');
        log_console(str_size(tr('Width'), 20), 'cyan', false);
        log_console($info['x'], 'white');
        log_console(str_size(tr('Height'), 20), 'cyan', false);
        log_console($info['y'], 'white');
        log_console(str_size(tr('Bits'), 20), 'cyan', false);
        log_console($info['bits'], 'white');

        if (!empty($info['compression'])) {
            log_console(str_size(tr('Compression'), 20), 'cyan', false);
            log_console(str_force($info['compression']) , 'white');
        }

        if (!empty($info['exif'])) {
            log_console(str_size(tr('EXIF INFORMATION:'), 20), 'cyan');

            foreach($info['exif'] as $key => $value) {
                if (is_array($value)) {
                    foreach($value as $subkey => $subvalue) {
                        log_console(str_size($key   , 30), 'cyan', false);

                        if (!is_numeric($subkey)) {
                            log_console(str_size($subkey, 30), 'cyan', false);
                        }

                        if ($key === 'THUMBNAIL') {
                            $subvalue = tr('YES');
                        }

                        log_console(str_force($subvalue), 'white');
                    }

                    continue;
                }

                log_console(str_size($key, 30), 'cyan', false);
                log_console(str_force($value) , 'white');
            }
        }

        log_console();

    }catch(Exception $e) {
        throw new CoreException('s_display_info(): Failed', $e);
    }
}
?>
