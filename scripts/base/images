#!/usr/bin/php
<?php
/*
 * This is an empty test script template
 */
$usage = './scripts/base/images parameters [OPTIONS]
./scripts/base/images optimize PATH | --all [--recursive] [OPTIONS]
./scripts/base/images retina PATH | --all [--recursive] [OPTIONS]
./scripts/base/images info PATH | --all [--recursive] [OPTIONS]
./scripts/base/images clear-cache';

$help  = 'This script can perform various image actions

METHODS

retina [FILE | all]          - Will ensure retina files are at least
                               available by creating symlinks for
                               all image files

optimize                     - Optimize images using the specified parameters.
                               Optimization will try to improve (make smaller)
                               image sizes by recompressing using higher
                               compression settings, blurring and other
                               techniques, while retaining image quality

parameters                   - Will show the parameters that will be used to
                               optimize images. Parameters are taken from
                               configuration and overridden by command line
                               options

info                         - Shows information about the specified image, or
                               all images in the specified path (optionally
                               tree, if --recursive is specified)

clear-cache                  - Clear the `html_img` cache table that contains
                               image sizes used by html_img()



OPTIONS

--all(optional)              - Process all project images

--keep-aspectratio (optional)- Ensure image aspect ratio

--quality (optional)         - JPEG Quality factor (0 - 100 [60])

--interlace (optional)       - Make image load interlaced (jpeg, gif, png,
                               none, line, plane, partition, auto [Line])

--strip (optional)           - Strip exif data (true - false [true])

--blur (optional)            - Blur factor. The higher this factor, the lower
                               the image size, though this may affect image
                               quality (0x1 - 10x10 [1x3])

--defines                    - imagemagick -defines

--sampling-factor            - Sampling factor. Use 4:2:0 for even smaller
                               images which retain relatively good quality

--limit-memory               -

--limit-map                  -

--format                     - Force specified format on all images to be
                               processed

--method                     - Force specified method on all images to be
                               processed. Valid methods are thumb, resize-w,
                               resize, thumb-circle, crop-resize, and custom
                               (default is custom)

--width                      - Force specified width on all images to be
                               processed

--height                     - Force specified height on all images to be
                               processed

--recursive                  - If specified, process the source path
                               recursively, processing all images found under
                               that path

--backup / -b                - (optimize only) Make a backup of each image
                               before processing it. Backups will have the name
                               file~Ymd-His

--no-exif / -e               - (info or optimize with -d only) Do not display
                               EXIF information

--display-difference / -d    - When optimizing images, show the differce from
                               before and after the optimization process

--show-images / -s           - Show before / after images. Does NOT work with
                               --recursive to avoid opening possibly thousands
                               of image viewers. By default, uses "feh" viewer
                               since this is the fastes and lightest around

--no-delete / -n             - (optimize and TEST mode only) Do not delete the
                               temporary file so that it can be used to view the
                               visual quality';

require_once(dirname(__FILE__).'/../../libs/startup.php');

cli_only();
load_libs('file,image');

$params = $_CONFIG['images']['imagemagick'];

$params['keep_aspectratio'] = not_empty(cli_argument('--keep-aspectratio')              , $params['keep_aspectratio']);
$params['quality']          = not_empty(cli_argument('--quality'        , true)         , $params['quality']);
$params['interlace']        = not_empty(cli_argument('--interlace'      , true , 'line'), $params['interlace']);
$params['strip']            = not_empty(cli_argument('--strip'          , false, true)  , $params['strip']);
$params['blur']             = not_empty(cli_argument('--blur'           , true , '1x3') , $params['blur']);
$params['defines']          = not_empty(cli_argument('--defines'        , true)         , $params['defines']);
$params['sampling_factor']  = not_empty(cli_argument('--sampling-factor', true)         , $params['sampling_factor']);
$params['limit']['memory']  = not_empty(cli_argument('--limit-memory'   , true)         , $params['limit']['memory']);
$params['limit']['map']     = not_empty(cli_argument('--limit-map'      , true)         , $params['limit']['map']);

$params['format']           = cli_argument('--format', true);
$params['method']           = not_empty(cli_argument('--method', true), 'custom');
$params['backup']           = not_empty(cli_argument('--backup-original'), cli_argument('-b'));
$params['x']                = not_empty(cli_argument('--width' , true)   , cli_argument('-x', true));
$params['y']                = not_empty(cli_argument('--height', true)   , cli_argument('-y', true));

$now = system_date_format(null, 'Ymd-His');

switch(cli_method()){
    case 'retina':
        $count = 0;
        $all   = not_empty(cli_argument('--all'), cli_argument('-a'));

        cli_no_arguments_left();

        if($all){
            foreach(array('jpg', 'png') as $extension){
                $files = safe_exec('find '.ROOT.' -iname "*.'.$extension.'"');

                foreach($files as $file){
                    if(strtolower(substr($file, -7, 7)) == '@2x.'.$extension){
                        /*
                         * This is a retina file, skip
                         */
                        continue;
                    }

                    $link = str_replace('.'.$extension, '@2x.'.$extension, $file);

                    if(file_exists($link)){
                        if(!is_link($link)){
                            /*
                             * Existing file is a real file, so probably has
                             * unique contents. Leave it alone
                             */
                            continue;
                        }

                        /*
                         * Existing file is a symlink. Remove it so we can
                         * update it and be sure it links to the correct file
                         */
                        unlink($link);
                    }

                    /*
                     * Create the target link
                     */
                    if(VERBOSE){
                        cli_log(tr('Creating symlink for file ":file"', array(':file' => $file)));
                    }

                    $count++;
                    symlink(basename($file), $link);
                }
            }

            cli_log(tr('Created ":count" symlinks for missing retina images', array(':count' => $count)), 'green');

        }else{
            /*
             * This must be a single file specification
             */
            if(!file_exists($file)){
                throw new bException(tr('Specified file ":file" does not exist', array(':file' => cli_argument(1))), 'not-exist');
            }

            $link = str_replace('.'.$extension, '@2x.'.$extension, $file);

            if(!file_exists($link)){
                /*
                 *
                 */
                if(VERBOSE){
                    cli_log(tr('Creating symlink for file ":file"', array(':file' => $file)));
                }

                $count++;
                symlink($file, $link);
            }
        }

        break;

    case 'parameters':
        /*
         * Display current image parameters mixed with settings from command
         * line
         */
        cli_no_arguments_left();
        ksort($params);

        foreach($params as $key => $value){
            if(is_array($value)){
                foreach($value as $subkey => $subvalue){
                    cli_log(str_size($key   , 20), 'cyan', false);

                    if(!is_numeric($subkey)){
                        cli_log(str_size($subkey, 20), 'cyan', false);
                    }

                    cli_log(str_force($subvalue), 'white');
                }

                continue;
            }

            if($key === 'format'){
                if($value){
                    $value = tr('Force :format', array(':format' => $value));

                }else{
                    $value = tr('Keep');
                }
            }

            cli_log(str_size($key, 20), 'cyan', false);
            cli_log(str_force($value) , 'white');
        }

        break;

    case 'info':
        /*
         * Display information on the images in the specified path
         */
        $recursive = not_empty(cli_argument('--recursive'), cli_argument('-r'));
        $all       = not_empty(cli_argument('--all')      , cli_argument('-a'));
        $no_exif   = not_empty(cli_argument('--no-exif')  , cli_argument('-e'));
        $source    = cli_argument();

        if(not_empty(cli_argument('--default'), cli_argument('--defaults'))){
            $params = array();
        }

        cli_no_arguments_left();
        load_libs('numbers');

        /*
         * Check source path
         */
        if($all){
            if($recursive){
                throw new bException(tr('Both --all and --recursive have been specified. These options are mutually exclusive, please specify one or the other'), 'invalid');
            }

            $source = ROOT;

        }else{
            /*
             * Get absolute path from cwd
             */
            $source = file_absolute($source);
        }

        if(!$source){
            throw new bException(tr('No path specified'), 'not-specified');
        }

        /*
         * Display information on all image files
         */
        file_tree_execute(array('path'      => $source,
                                'recursive' => $recursive,
                                'callback'  => function($file) use ($params, $no_exif){
                                                    if(!is_image($file)){
                                                        if(VERBOSE){
                                                            cli_log(tr('Skipping file ":image", it is not an image', array(':image' => $file)), 'yellow');
                                                        }

                                                        return;
                                                    }

                                                    try{
                                                        $info = image_info($file, $no_exif);
                                                        s_display_info($info);

                                                    }catch(Exception $e){
                                                        cli_log(tr('Skipping file ":image", failed with ":error"', array(':image' => $file, ':error' => $e->getMessage())), 'yellow');
                                                    }
                                               }));
        break;

    case 'optimize':
        /*
         * Check destination path
         */
        $recursive    = not_empty(cli_argument('--recursive')         , cli_argument('-r'));
        $all          = not_empty(cli_argument('--all')               , cli_argument('-a'));
        $display_diff = not_empty(cli_argument('--display-difference'), cli_argument('-d'));
        $show_images  = not_empty(cli_argument('--show-images')       , cli_argument('-s'));
        $no_exif      = not_empty(cli_argument('--no-exif')           , cli_argument('-e'));
        $source       = cli_argument();
        $no_delete    = false;

        if(not_empty(cli_argument('--default'), cli_argument('--defaults'))){
            $params = array();
        }

        if(TEST){
            $no_delete = not_empty(cli_argument('--no-delete'), cli_argument('-n'));

            if($params['backup']){
                $params['backup'] = false;
                cli_log(tr('Both backup and test options were specified, disabled "backup" since test will not change the original file'), 'yellow');
            }

            $display_diff = true;
        }

        if($display_diff){
            $no_exif = not_empty(cli_argument('--no-exif'), cli_argument('-e'));
        }

        if($show_images){
            if($recursive){
                throw new bException(tr('Both --show-images and --recursive have been specified. These options are mutually exclusive, please specify one or the other'), 'invalid');
            }

            /*
             * Check if image viewer is available.
             */
            $viewer = safe_exec('which '.$_CONFIG['images']['viewer']);
            $viewer = array_shift($viewer);

            if(!$viewer){
                throw new bException(tr('Configured vierwer ":viewer" could not be found', array(':viewer' => $_CONFIG['images']['viewer'])), 'invalid');
            }

            if(TEST){
                /*
                 * Okay, we can see both in TEST mode
                 */
                $no_delete = true;

            }elseif($params['backup']){
                /*
                 * Okay, we can see both in backup mode
                 */

            }else{
                /*
                 * Erw, original image will be destroyed and we won't be able
                 * to show it!
                 */
                $params['copy_to_temp'] = true;
            }
        }

        cli_no_arguments_left();
        load_libs('numbers');

        /*
         * Check source path
         */
        if($all){
            if($recursive){
                throw new bException(tr('Both --all and --recursive have been specified. These options are mutually exclusive (--all implies --recursive), please specify one or the other'), 'invalid');
            }

            $source    = ROOT;
            $recursive = true;

        }else{
            /*
             * Get absolute path from cwd
             */
            $source = file_absolute($source);
        }

        if(!$source){
            throw new bException(tr('No path specified'), 'not-specified');
        }

        /*
         * Execute the conversion on the specified path
         */
        cli_log(tr('Starting image converting'), 'white');

        $count = file_tree_execute(array('path'      => $source,
                                         'recursive' => $recursive,
                                         'callback'  => function($file) use ($params, $display_diff, $no_exif, $no_delete, $show_images, $now){
                                                    global $_CONFIG;

                                                    if(!is_image($file)){
                                                        if(VERBOSE){
                                                            cli_log(tr('Skipping file ":image", it is not an image', array(':image' => $file)), 'yellow');
                                                        }

                                                        return;
                                                    }

                                                    try{
                                                        if($params['backup']){
                                                            /*
                                                             * Make a backup of
                                                             * the original file
                                                             */
                                                            copy($file, $file.'~'.$now);
                                                        }

                                                        if(!empty($params['copy_to_temp'])){
                                                            /*
                                                             * Make a copy of the original file in the
                                                             * temp directory so we can show it later
                                                             * to compare to the new version
                                                             */
                                                            $params['copy_to_temp'] = file_temp(false);
                                                            copy($file, $params['copy_to_temp']);
                                                        }

                                                        if(TEST){
                                                            $target = file_temp(false);

                                                        }else{
                                                            $target = $file;
                                                        }

                                                        if($display_diff){
                                                            $before = image_info($file, $no_exif);
                                                        }

                                                        $target = image_convert($file, $target, $params);

                                                        if($display_diff){
                                                            cli_log(tr('Before:'), 'white');
                                                            s_display_info($before);

                                                            cli_log(tr('After:'), 'white');
                                                            s_display_info(image_info($target, $no_exif));
                                                        }

                                                        if($show_images){
                                                            if(empty($params['copy_to_temp'])){
                                                                if(TEST){
                                                                    /*
                                                                     * Original image was not modified, target is in tmp dir
                                                                     */
                                                                    run_background('base/images view '.$target, true, false);
                                                                    run_background('base/images view '.$file  , true, false);

                                                                }else{
                                                                    /*
                                                                     * Original image was stored as backup
                                                                     */
                                                                    run_background('base/images view '.$target       , true, false);
                                                                    run_background('base/images view '.$file.'~'.$now, true, false);
                                                                }

                                                            }else{
                                                                /*
                                                                 * Original is stored in temp directory
                                                                 */
                                                                run_background('base/images view '.$params['copy_to_temp'], true, false);
                                                                run_background('base/images view '.$target                , true, false);
                                                            }
                                                        }

                                                        if(TEST and !$no_delete){
                                                            file_delete($target);
                                                        }

                                                    }catch(Exception $e){
                                                        cli_log(tr('Skipping file ":image", failed with ":error"', array(':image' => $file, ':error' => $e->getMessage())), 'yellow');
                                                    }
                                               }));

        if(!VERBOSE){
            cli_dot(false);
        }

        cli_log(tr('Finished converting ":count" images', array(':count' => $count)), 'green');
        break;

    case 'view':
        /*
         * Show the specified image using the configured image viewer
         *
         * First check file, make sure it exists and is an image
         * Then also check the configured viewer, make sure it works
         */
        $image = cli_argument();
        cli_no_arguments_left();
        load_libs('image');

        if(!$image){
            throw new bException(tr('No image specified'), 'not-specified');
        }

        if(!is_image($image)){
            throw new bException(tr('Specified file ":file" is not an image', array(':file' => $image)), 'invalid');
        }

        $viewer = safe_exec('which '.$_CONFIG['images']['viewer']);
        $viewer = array_shift($viewer);

        if(!$viewer){
            if(substr($_CONFIG['images']['viewer'], -3, 3) === 'feh'){
                throw new bException(tr('You have "feh" configured as viewer, but it is not yet installed. Please install it first to continue. On ubuntu and debian platforms, use "apt-get install -y feh", on Redhat and fedora platforms, use "yum install -y feh"'), 'not-installed');
            }

            throw new bException(tr('Configured viewer ":viewer" could not be found', array(':viewer' => $_CONFIG['images']['viewer'])), 'invalid');
        }

        safe_exec(array($_CONFIG['images']['viewer'], $image));
        break;

    case 'clear-cache':
        if(TEST){
            break;
        }

        sql_query('TRUNCATE `html_img`');
        cli_log(tr('Cleared html_img cache'), 'green');
        break;

    case '':
        throw new bException(tr('No method specified'), 'unknown');

    default:
        throw new bException(tr('Unknown method ":method" specified', array(':method' => cli_method())), 'unknown');
}



/*
 * Display image information
 */
function s_display_info($info){
    try{
        cli_log(str_size(tr('File'), 20), 'cyan', false);
        cli_log($info['path'].$info['file'], 'white');
        cli_log(str_size(tr('Path'), 20), 'cyan', false);
        cli_log($info['path'], 'white');
        cli_log(str_size(tr('Filename'), 20), 'cyan', false);
        cli_log($info['file'], 'white');
        cli_log(str_size(tr('File size'), 20), 'cyan', false);
        cli_log(bytes($info['size']) , 'white');
        cli_log(str_size(tr('Mimetype'), 20), 'cyan', false);
        cli_log($info['mime'], 'white');
        cli_log(str_size(tr('Width'), 20), 'cyan', false);
        cli_log($info['x'], 'white');
        cli_log(str_size(tr('Height'), 20), 'cyan', false);
        cli_log($info['y'], 'white');
        cli_log(str_size(tr('Bits'), 20), 'cyan', false);
        cli_log($info['bits'], 'white');

        if(!empty($info['compression'])){
            cli_log(str_size(tr('Compression'), 20), 'cyan', false);
            cli_log(str_force($info['compression']) , 'white');
        }

        if(!empty($info['exif'])){
            cli_log(str_size(tr('EXIF INFORMATION:'), 20), 'cyan');

            foreach($info['exif'] as $key => $value){
                if(is_array($value)){
                    foreach($value as $subkey => $subvalue){
                        cli_log(str_size($key   , 30), 'cyan', false);

                        if(!is_numeric($subkey)){
                            cli_log(str_size($subkey, 30), 'cyan', false);
                        }

                        if($key === 'THUMBNAIL'){
                            $subvalue = tr('YES');
                        }

                        cli_log(str_force($subvalue), 'white');
                    }

                    continue;
                }

                cli_log(str_size($key, 30), 'cyan', false);
                cli_log(str_force($value) , 'white');
            }
        }

        cli_log();

    }catch(Exception $e){
        throw new bException('s_display_info(): Failed', $e);
    }
}
?>
