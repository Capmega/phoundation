#!/usr/bin/php
<?php
/*
 * This is the init script for the project. Run this script to ensure that the
 * database is running with the same version as the code
 *
 * Command line options:
 *
 * force                : Force a core database dump, and init from 0. This
 *                        option does NOT work on production environments
 *
 * dump                 : Dump the core database (this DOES work in production)
 *
 * fromprojectversion   : Make init fake the current project version registered
 *                        in the databaes to be the version number that follows
 *                        this option
 *
 * fromframeworkversion : Make init fake the current project version registered
 *                        in the databaes to be the version number that follows
 *                        this option
 *
 * @copyright Sven Oostenbrink <support@svenoostenbrink.com>
 */
$usage = "./scripts/base/init\n".
         "./scripts/base/init -F | --force\n".
         "./scripts/base/init -d | --drop\n".
         "./scripts/base/init -f | --frameworkversion VERSION\n".
         "./scripts/base/init -p | --projectversion VERSION\n";

$help  = "This script will initialize the database and system files to leave your data structures up to date with the current code version";

require_once(dirname(__FILE__).'/../../libs/startup.php');

$drop                 = cli_argument('--drop') or cli_argument('-d');
$fromprojectversion   = not_empty(cli_argument('--from-project-version'  , true, null), cli_argument('-p', true, null));
$fromframeworkversion = not_empty(cli_argument('--from-framework-version', true, null), cli_argument('-f', true, null));

cli_no_arguments_left();

try{
    load_libs(array('init'));

    cli_only();
    cli_exclusive();

    if($drop){
        /*
         * Drop the core database
         */
        sql_init();
        if(is_object($GLOBALS['sql_core']) and $GLOBALS['sql_core'] instanceof PDO){
            $GLOBALS['sql_core']->query('DROP DATABASE '.$_CONFIG['db']['core']['db']);

            cli_log('Dropped database ":db"', array(':db' => $_CONFIG['db']['core']['db']), 'yellow');
            die();
        }
    }

    if($pfrom = $fromprojectversion){
        if(!str_is_version($pfrom)){
            throw new bException(tr('The specified fromprojectversion ":version" is not a valid version format. Please supply a version in format "n.n.n"', array(':version' => $pfrom)), 'invalid');
        }
    }

    if($ffrom = $fromframeworkversion){
        if(!str_is_version($ffrom)){
            throw new bException(tr('The specified fromframeworkversion ":version" is not a valid version format. Please supply a version in format "n.n.n"', array(':version' => $ffrom)), 'invalid');
        }
    }

    /*
     * During init, force EMULATE_PREPARES because loads of init stuff will NOT work without
     * Thanks PHP, for giving us the option between a shitty driver, or half a driver!
     */
    foreach($_CONFIG['db'] as $name => &$connector){
        if($name == 'default') continue;

        if($connector['init']){
            $connector['pdo_attributes'] = array(PDO::ATTR_EMULATE_PREPARES  => true,
                                                 PDO::ATTR_STRINGIFY_FETCHES => true);
        }
    }

    init($pfrom, $ffrom);

}catch(Exception $e){
    if($e->getCode() != 'noinit'){
        throw new bException('scripts/base/init: Failed', $e);
    }

    cli_log('Core database init system has been disabled in db configuration', 'yellow');
}
?>
