#!/usr/bin/php
<?php
/*
 * This is the init script for the project. Run this script to ensure that the
 * database is running with the same version as the code
 *
 * Command line options:
 *
 * force                : Force a core database dump, and init from 0. This
 *                        option does NOT work on production environments
 *
 * dump                 : Dump the core database (this DOES work in production)
 *
 * fromprojectversion   : Make init fake the current project version registered
 *                        in the databaes to be the version number that follows
 *                        this option
 *
 * fromframeworkversion : Make init fake the current project version registered
 *                        in the databaes to be the version number that follows
 *                        this option
 *
 * @copyright Sven Oostenbrink <support@capmega.com>
 */
$usage = './scripts/base/init.
./scripts/base/init -d | --drop
./scripts/base/init -f [VERSION]
./scripts/base/init -p [VERSION]
./scripts/base/init -s | --section SECTION [-v VERSION]';

$help  = 'This script will initialize the database and system files to leave your data structures up to date with the current code version



ARGUMENTS



[-f [VERSION]]                  - Run init from framework version VERSION. If
                                  VERSION has not been specified, the current
                                  last framework database version will be
                                  assumed

[-p [VERSION]]                  - Run init from project version VERSION. If
                                  VERSION has not been specified, the current
                                  last project database version will be assumed

[--drop]                        - DROP, will drop the core database. Usually
                                  used on production systems in case the
                                  database needs to be dropped

[-F]                            - FORCE, will drop the core database and start
                                  init from version 0. NOTE: For safety against
                                  accidents, this will NOT work on production
                                  systems

-s | --section SECTION          - Initialize the specified section. This
                                  requires that ROOT/init/SECTION exists, and
                                  that a database connector called SECTION is
                                  configured. See $_CONFIG[db] or the
                                  `sql_connectors` database table for database
                                  connectors

-v | --section-version VERSION  - Only applies to section initialization. Will
                                  initialize the specified section starting at
                                  the specified VERSION';

require_once(__DIR__.'/../../libs/startup.php');

/*
 * Setup database connection with core database so that FRAMEWORKDBVERSION and
 * PROJECTDBVERSION are available
 */
cli_only(true);
load_libs('init');
sql_query('SELECT true;');



/*
 * Get command line arguments
 */
$drop                 = cli_argument('--drop');
$fromprojectversion   = not_empty(cli_argument('-p', 'optional'));
$fromframeworkversion = not_empty(cli_argument('-f', 'optional'));
$section              = cli_argument('-s,--section', true);



/*
 * Init from specific versions?
 */
if($fromframeworkversion === false){
    /*
     * Default -f to current framework database version
     */
    $fromframeworkversion = FRAMEWORKDBVERSION;
}

if($fromprojectversion === false){
    /*
     * Default -p to current project database version
     */
    $fromprojectversion = PROJECTDBVERSION;
}



/*
 * Do init of a specific section?
 */
if($section){
    /*
     * Section initialization
     */
    $version = cli_argument('-v,--section-version', true);
    cli_no_arguments_left();

    try{
        init_section($section, $version);

    }catch(Exception $e){
        if($e->getRealCode() == 'not-exists'){
            $e->makeWarning(true);
        }

        throw $e;
    }

}else{
    cli_no_arguments_left();

    try{

        if($drop){
            /*
             * Drop the core database
             */
            sql_init();
            if(is_object($core->sql['core']) and $core->sql['core'] instanceof PDO){
                $core->sql['core']->query('DROP DATABASE '.$_CONFIG['db']['core']['db']);

                log_console(tr('Dropped database ":db"', array(':db' => $_CONFIG['db']['core']['db'])), 'yellow');
                die();
            }
        }

        if($pfrom = $fromprojectversion){
            if(!str_is_version($pfrom)){
                throw new BException(tr('The specified fromprojectversion ":version" is not a valid version format. Please supply a version in format "n.n.n"', array(':version' => $pfrom)), 'warning/invalid');
            }
        }

        if($ffrom = $fromframeworkversion){
            if(!str_is_version($ffrom)){
                throw new BException(tr('The specified fromframeworkversion ":version" is not a valid version format. Please supply a version in format "n.n.n"', array(':version' => $ffrom)), 'warning/invalid');
            }
        }

        /*
         * During init, force EMULATE_PREPARES because loads of init stuff will NOT work without
         * Thanks PHP, for giving us the option between a shitty driver, or half a driver!
         */
        foreach($_CONFIG['db'] as $name => &$connector){
            if($name == 'default') continue;

            if(!empty($connector['init'])){
                $connector['pdo_attributes'] = array(PDO::ATTR_EMULATE_PREPARES  => true,
                                                     PDO::ATTR_STRINGIFY_FETCHES => true);
            }
        }

        init($pfrom, $ffrom);
        cli_run_once_local(true);

    }catch(Exception $e){
        switch($e->getCode()){
            case 'noinit':
                log_console(tr('Core database init system has been disabled in db configuration'), 'yellow');
                throw $e;

            case 'old-framework-code':
                // FALLTHROUGH
            case 'invalid-framework-code':
                // FALLTHROUGH
            case 'old-project-code':
                // FALLTHROUGH
            case 'invalid-project-code':
                throw $e->makeWarning(true);

            default:
                throw new BException('scripts/base/init: Failed', $e);
        }

    }
}
?>
