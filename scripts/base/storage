#!/usr/bin/php
<?php
/*
 * This is the storage management script
 */
$usage = './scripts/base/list sections | documents | pages | files
./scripts/base/add-files --section SECTION --document DOCUMENT --page PAGE FILE FILE FILE...';

$help  = 'This is the storage management script. This script can manage all items in storage



METHODS



list

    sections                    -

    documents                   -

    pages                       -



add-files                       - Add the specified files to the specified
                                  document or page

    --monitor-task TASKS_ID     - If specified, this script will continue
                                  importing as long as the specified TASKS_ID
                                  status is either "completed" or "failed"

    --update-owner              - Update the owner and group for the file to the
                                  owner and group of this process. WARNING:
                                  Requires sudo privileges for the owner of this
                                  process

    --convert FORMAT            - If specified, will convert the file to the
                                  specified format using the "convert" command.
                                  Supported formats (for the moment) are: "jpeg"
                                  or "jpg"

';

require_once(__DIR__.'/../../libs/startup.php');
cli_only();



/*
 * Process methods
 */
switch(cli_method()) {
    case 'list':
        switch(cli_method(1)) {
            case 'sections':
                load_libs('storage-sections');
                $status = STATUS;

                cli_no_arguments_left();

                if($core->register['all']) {
                    if($status) {
                        throw new CoreException(tr('--status cannot be used with --all'), 'warning/invalid');
                    }

                    if(!QUIET) {
                        log_console(tr('Showing all tasks (parent task id with * means this task executes in parrallel)'), 'white');
                    }

                } else {
                    if(!$status) {
                        $status = 'new,processing,null';
                    }

                    if(!QUIET) {
                        log_console(tr('Showing storage sections with status ":status"', array(':status' => $status)), 'white');
                    }
                }

                if(!QUIET) {
                    log_console(str_size('#id', 6).' '.str_size('Status', 16).' '.str_size('Createdby', 16).' '.str_size('Created on', 19).' '.str_size('Name', 40), 'cyan');
                }

                $sections = storage_sections_list(Arrays::force($status));

                while($section = sql_fetch($sections)) {
                    log_console(str_size($section['id'], 6).' '.cli_status_color(str_size($section['status'], 16, ' ', true)).' '.str_size(name($section['createdby']), 16).' '.str_size(date_convert($section['createdon'], 'human_datetime'), 19, ' ', true).' '.str_size($section['name'], 40));
                }

                break;

            case 'documents':
                load_libs('storage-documents');
                $status = STATUS;

                cli_no_arguments_left();

                if($core->register['all']) {
                    if($status) {
                        throw new CoreException(tr('--status cannot be used with --all'), 'warning/invalid');
                    }

                    if(!QUIET) {
                        log_console(tr('Showing all tasks (parent task id with * means this task executes in parrallel)'), 'white');
                    }

                } else {
                    if(!$status) {
                        $status = '_new,processing,null';
                    }

                    if(!QUIET) {
                        log_console(tr('Showing storage documents with status ":status"', array(':status' => $status)), 'white');
                    }
                }

                if(!QUIET) {
                    log_console(str_size('Section', 16).' '.str_size('#id', 12, ' ', true).' '.str_size('Page count', 10), 'cyan');
                }

                $documents = storage_documents_list(Arrays::force($status));

                while($document = sql_fetch($documents)) {
                    log_console(str_size($document['section'], 16).' '.str_size($document['id'], 12, ' ', true).' '.cli_status_color(str_size($document['page_count'], 10, ' ', true)));
                }

                break;

            case 'pages':
                break;

            case 'files':
                break;

            case '':
                throw new CoreException(tr('No sub method specified for method ":method"', array(':method' => cli_method())), 'not-specified');

            default:
                throw new CoreException(tr('Unknown sub method ":submethod" specified for method ":method"', array(':method' => cli_method(), ':submethod' => cli_method(1))), 'unknown-method');
        }

        break;

    case 'add-files':
        $request['sections_id']  = cli_argument('--section'     , true);
        $request['documents_id'] = cli_argument('--document'    , true);
        $request['pages_id']     = cli_argument('--page'        , true);
        $request['monitor_task'] = cli_argument('--monitor-task', true);
        $request['update_owner'] = cli_argument('--update-owner', true);
        $request['convert']      = cli_argument('--convert'     , true);

        $files = cli_arguments();

        if(!$files) {
            throw new CoreException(tr('No files specified'), 'warning/not-specified');
        }

        load_libs('storage-sections,storage-documents,storage-pages,storage-files');

        /*
         * Section
         */
        if(empty($request['sections_id'])) {
            throw new CoreException(tr('No section specified'), 'warning/not-specified');
        }

        if(!is_numeric($request['sections_id'])) {
            throw new CoreException(tr('Specified section ":section" is invalid', array(':section' => $request['sections_id'])), 'warning/invalid');
        }

        $section = storage_sections_get($request['sections_id']);

        if(!$section) {
            throw new CoreException(tr('Specified section ":section" does not exist', array(':section' => $request['sections_id'])), 'warning/not-exist');
        }

        /*
         * Document
         */
        if(empty($request['documents_id'])) {
            throw new CoreException(tr('No document specified'), 'warning/not-specified');
        }

        if(!is_numeric($request['documents_id'])) {
            throw new CoreException(tr('Specified document ":document" is invalid', array(':document' => $request['documents_id'])), 'warning/invalid');
        }

        $document = storage_documents_get($section, $request['documents_id'], false, null, false);

        if(!$document) {
            throw new CoreException(tr('Specified document ":document" does not exist', array(':document' => $request['documents_id'])), 'warning/not-exist');
        }

        if($document['sections_id'] !== $section['id']) {
            throw new CoreException(tr('Specified document ":document" is not part of section ":section"', array(':document' => $request['documents_id'], ':section' => $request['sections_id'])), 'warning/invalid');
        }

        /*
         * Page
         */
        if($request['pages_id']) {
            if(!is_numeric($request['pages_id'])) {
                throw new CoreException(tr('Specified page ":page" is invalid', array(':page' => $request['pages_id'])), 'warning/invalid');
            }

            $page = storage_pages_get($section, $request['pages_id']);

            if(!$page) {
                throw new CoreException(tr('Specified page ":page" does not exist', array(':page' => $request['pages_id'])), 'warning/not-exist');
            }

            if($page['sections_id'] !== $section['id']) {
                throw new CoreException(tr('Specified page ":page" is not part of section ":section"', array(':page' => $request['pages_id'], ':section' => $request['sections_id'])), 'warning/invalid');
            }

            if($page['documents_id'] !== $document['id']) {
                throw new CoreException(tr('Specified page ":page" is not part of document ":document"', array(':page' => $request['pages_id'], ':document' => $request['documents_id'])), 'warning/invalid');
            }
        }

        /*
         * Ensure all files are available
         */
        foreach($files as $file) {
            if(!file_exists($file)) {
                throw new CoreException(tr('Specified file ":file" does not exist', array(':file' => $file)), 'warning/not-exist');
            }
        }

        /*
         * Yay, all verified and okay! Start adding the files!
         */
        while(true) {
            foreach($files as $path) {
                if(!file_exists($path)) {
                    throw new CoreException(tr('Specified file or path ":path" does not exist', array(':path' => $path)), 'warning/not-exist');
                }

                if(is_dir($path)) {
                    $path = Strings::slash($path);

                    foreach(scandir($path) as $file) {
                        /*
                         * Skip navication directories, skip PART files which
                         * are still being scanned / downloaded / etc
                         */
                        if(($file == '.') or ($file == '..')) {
                            continue;
                        }

                        if(Strings::fromReverse($file, '.') == 'part') {
                            /*
                             * This file is still being processed
                             */
                            log_console(tr('Ignoring file ":file" from path ":path", its still being processed', array(':file' => $file, ':path' => $path)), 'VERBOSE/yellow');
                            continue;
                        }

                        log_console(tr('Adding file ":file" from path ":path"', array(':file' => $file, ':path' => $path)), 'VERBOSE/cyan');

                        $file = storage_files_insert(array('sections_id'  => $section['id'],
                                                        'documents_id' => $document['id'],
                                                        'pages_id'     => isset_get($page['id']),
                                                        'file'         => $path.$file,
                                                        'update_owner' => $request['update_owner'],
                                                        'convert'      => $request['convert']));

                        log_console(tr('Added file ":file" from path ":path" to section ":section", document ":document" page ":page"', array(':path' => $path, ':file' => basename($file['filename']), ':section' => $section['id'], ':document' => $document['id'], ':page' => isset_get($page['id']))), 'green');
                    }

                } else {
                    log_console(tr('Adding file ":file"', array(':file' => $file)), 'VERBOSE/cyan');

                    $path = storage_files_insert(array('sections_id'  => $section['id'],
                                                    'documents_id' => $document['id'],
                                                    'pages_id'     => isset_get($page['id']),
                                                    'file'         => $file,
                                                    'update_owner' => $request['update_owner'],
                                                    'convert'      => $request['convert']));

                    log_console(tr('Added file ":file" to section ":section", document ":document" page ":page"', array(':file' => $path['filename'], ':section' => $section['id'], ':document' => $document['id'], ':page' => isset_get($page['id']))), 'green');
                }
            }

            if(!empty($break)) {
                /*
                 * We're done!
                 */
                break;
            }

            if(!$request['monitor_task']) {
                /*
                 * We're done!
                 */
                break;
            }

            /*
             * Monitor the specified task to see if it is still running. While
             * it is running, we do not stop either.
             */
            load_libs('tasks');

            if(tasks_check_pid($request['monitor_task'])) {
                log_console(tr('Task ":task" still running, continuing path ":path" monitoring', array(':task' => $request['monitor_task'], ':path' => $path)), 'VERBOSE/cyan');

            } else {
                /*
                 * The process is done, break the loop
                 */
                log_console(tr('Task ":task" finished, doing one last file check before finishing', array(':task' => $request['monitor_task'])), 'cyan');
                $break = true;
            }

            usleep(100000);
            continue;
        }

        break;

    case '':
        throw new CoreException(tr('No method specified'), 'no-method');

    default:
        throw new CoreException(tr('Unknown method ":method" specified', array(':method' => cli_method())), 'unknown-method');
}
?>
