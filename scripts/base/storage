#!/usr/bin/php
<?php
/*
 * This is the storage management script
 */
$usage = './scripts/base/list sections | documents | pages
./scripts/base/add-files --section SECTION --document DOCUMENT --page PAGE FILE FILE FILE...';

$help  = 'This is the storage management script. This script can manage all items in storage



METHODS



list

    sections                    -

    documents                   -

    pages                       -



add-files                       - Add the specified files to the specified
                                  document or page

    --monitor-task TASKS_ID     - If specified, this script will continue
                                  importing as long as the specified TASKS_ID
                                  status is either "completed" or "failed"

    --update-owner              - Update the owner and group for the file to the
                                  owner and group of this process. WARNING:
                                  Requires sudo privileges for the owner of this
                                  process

    --convert FORMAT            - If specified, will convert the file to the
                                  specified format using the "convert" command.
                                  Supported formats (for the moment) are: "jpeg"
                                  or "jpg"

';



require_once(__DIR__.'/../../libs/startup.php');
cli_only();
load_libs('test');



switch(cli_method()){
    case 'add-files':
        $request['sections_id']  = cli_argument('--section'     , true);
        $request['documents_id'] = cli_argument('--document'    , true);
        $request['pages_id']     = cli_argument('--page'        , true);
        $request['monitor_task'] = cli_argument('--monitor-task', true);
        $request['update_owner'] = cli_argument('--update-owner', true);
        $request['convert']      = cli_argument('--convert'     , true);

        $files = cli_arguments();

        if(!$files){
            throw new bException(tr('No files specified'), 'warning/not-specified');
        }

        load_libs('storage-sections,storage-documents,storage-pages,storage-files');

        /*
         * Section
         */
        if(empty($request['sections_id'])){
            throw new bException(tr('No section specified'), 'warning/not-specified');
        }

        if(!is_numeric($request['sections_id'])){
            throw new bException(tr('Specified section ":section" is invalid', array(':section' => $request['sections_id'])), 'warning/invalid');
        }

        $section = storage_sections_get($request['sections_id']);

        if(!$section){
            throw new bException(tr('Specified section ":section" does not exist', array(':section' => $request['sections_id'])), 'warning/not-exist');
        }

        /*
         * Document
         */
        if(empty($request['documents_id'])){
            throw new bException(tr('No document specified'), 'warning/not-specified');
        }

        if(!is_numeric($request['documents_id'])){
            throw new bException(tr('Specified document ":document" is invalid', array(':document' => $request['documents_id'])), 'warning/invalid');
        }

        $document = storage_documents_get($section, $request['documents_id']);

        if(!$document){
            throw new bException(tr('Specified document ":document" does not exist', array(':document' => $request['documents_id'])), 'warning/not-exist');
        }

        if($document['sections_id'] !== $section['id']){
            throw new bException(tr('Specified document ":document" is not part of section ":section"', array(':document' => $request['documents_id'], ':section' => $request['sections_id'])), 'warning/invalid');
        }

        /*
         * Page
         */
        if($request['pages_id']){
            if(!is_numeric($request['pages_id'])){
                throw new bException(tr('Specified page ":page" is invalid', array(':page' => $request['pages_id'])), 'warning/invalid');
            }

            $page = storage_pages_get($section, $request['pages_id']);

            if(!$page){
                throw new bException(tr('Specified page ":page" does not exist', array(':page' => $request['pages_id'])), 'warning/not-exist');
            }

            if($page['sections_id'] !== $section['id']){
                throw new bException(tr('Specified page ":page" is not part of section ":section"', array(':page' => $request['pages_id'], ':section' => $request['sections_id'])), 'warning/invalid');
            }

            if($page['documents_id'] !== $document['id']){
                throw new bException(tr('Specified page ":page" is not part of document ":document"', array(':page' => $request['pages_id'], ':document' => $request['documents_id'])), 'warning/invalid');
            }
        }

        /*
         * Ensure all files are available
         */
        foreach($files as $file){
            if(!file_exists($file)){
                throw new bException(tr('Specified file ":file" does not exist', array(':file' => $file)), 'warning/not-exist');
            }
        }

        /*
         * Yay, all verified and okay! Start adding the files!
         */
        while(true){
            foreach($files as $path){
                if(!file_exists($path)){
                    throw new bException('Specified file or path ":path" does not exist', array(':warning/' => $path), 'warning/not-exist');
                }

                if(is_dir($path)){
                    $path = slash($path);

                    foreach(scandir($path) as $file){
                        /*
                         * Skip navication directories, skip PART files which
                         * are still being scanned / downloaded / etc
                         */
                        if(($file == '.') or ($file == '..')) continue;
                        if(str_rfrom($file, '.') == 'part')   continue;

                        log_file(tr('Adding file ":file" from path ":path"', array(':file' => $file, ':path' => $path)), 'storage');

                        $file = storage_files_add(array('sections_id'  => $page['sections_id'],
                                                        'documents_id' => $page['documents_id'],
                                                        'pages_id'     => $page['id'],
                                                        'file'         => $path.$file,
                                                        'update_owner' => $request['update_owner'],
                                                        'convert'      => $request['convert']));

                        log_console(tr('Added file ":file" from path ":path" to section ":section", document ":document" page ":page"', array(':path' => $path, ':file' => basename($file['filename']), ':section' => $page['sections_id'], ':document' => $page['documents_id'], ':page' => $page['id'])));
                    }

                }else{
                    log_file(tr('Adding file ":file"', array(':file' => $file)), 'storage');

                    $path = storage_files_add(array('sections_id'  => $page['sections_id'],
                                                    'documents_id' => $page['documents_id'],
                                                    'pages_id'     => $page['pages_id'],
                                                    'file'         => $file,
                                                    'update_owner' => $request['update_owner'],
                                                    'convert'      => $request['convert']));

                    log_console(tr('Added file ":file" to section ":section", document ":document" page ":page"', array(':file' => $path['filename'], ':section' => $page['sections_id'], ':document' => $page['documents_id'], ':page' => $page['id'])));
                }
            }

            if(!empty($break)){
                /*
                 * We're done!
                 */
                break;
            }

            if($request['monitor_task']){
                load_libs('tasks');

                if(tasks_check_pid($request['monitor_task'])){
                    log_file(tr('Task ":task" still running, continuing path ":path" monitoring', array(':task' => $request['monitor_task'], ':path' => $path)), 'storage');

                }else{
                    /*
                     * The process is done, break the loop
                     */
                    log_file(tr('Task ":task" finished, doing one last file check before finishing', array(':task' => $request['monitor_task'])), 'storage');
                    $break = true;
                }

                usleep(100000);
                continue;
            }
        }

        break;

    case '':
        throw new bException(tr('No method specified'), 'no-method');

    default:
        throw new bException(tr('Unknown method ":method" specified', array(':method' => cli_method())), 'unknown-method');
}
?>
