#!/usr/bin/php
<?php
/*
 * This script can translate php code
 *
 * noutf / noutf8 / noutf8check  : Do not perform file content UTF8 checks
 *
 * Methods :
 *
 * translate                     : Generate the directories for each configured language
 *
 * clear                         : Delete all supported translations
 *
 * Options :
 *
 * -l --languages                : Specify the supported languages, otherwise
 *                                 $_CONFIG['language']['supported'] is used
 *
 * -m --mode                     : Specify the translation mode (strict, full, most or none)
 *
 * scan / scanonly / onlyscan    : Only perform translation scan, do not actually translate the files (NOT YET IMPLEMENTED)
 *
 * noupdate / nodb               : Do not send updated translations back to the translation server (NOT YET IMPLEMENTED)
 *
 * @copyright Sven Oostenbrink <support@ingiga.com>, Johan Geuze
 *
 * INFO:
 * If curl causes an exception due to an HTTP100 response
 * it is probably caused by Apache having issues with Expect headers
 * as it's explained in
 * http://stackoverflow.com/questions/3889574/apache-and-mod-proxy-not-handling-http-100-continue-from-client-http-417
 *
 * The solution is to add
 * <IfModule mod_headers.c>
 *    RequestHeader unset Expect early
 * </IfModule>
 * in the translation server apache configuration
 */
$usage = './scipts/base/translate clear
./scipts/base/translate scan
./scipts/base/translate translate';

$help = 'The translate script can translate the www/en directory to configured languages using the remote translation server

METHODS

clear                                   -

scan                                    -

translate                               -';

require_once(dirname(__FILE__).'/../../libs/startup.php');
load_libs('file,inet,curl,crypt');
load_config('translate');



$available_modes     = array('strict',
                             'full',
                             'most',
                             'none');



/*
 * Process requested actions
 */
switch(cli_method()){
    case 'clear':
        cli_no_arguments_left();

        foreach($languages as $language){
            if($language == 'en'){
                continue;
            }

            cli_log(tr('Deleting ":language"', array(':language' => $language)));
            file_delete_tree(ROOT.'www/'.$language);
        }

        break;

    case 'scan':
        cli_log(tr('Executing translateable string search'));

        $noutf8check = (cli_argument('--no-utf') or cli_argument('--no-utf8') or cli_argument('--no-utf8-check'));
        $ignore_html = (cli_argument('--ignore-html'));
        $ignore_php  = (cli_argument('--ignore-php'));

        cli_no_arguments_left();

        if($noutf8check){
            cli_log(tr('Skipping UTF8 check due to "noutf8check" command line parameter'), 'yellow');
        }

        $results = array('translations' => array(),
                         'failed_html'  => array(),
                         'failed_php'   => array(),
                         'count'        => 0);

        file_tree_execute(array('path'      => ROOT.'www/en',
                                'recursive' => true,
                                'params'    => array('noutf8check' => $noutf8check),
                                'callback'  => function($file, $type, $params) use (&$results){

            $extension = file_get_extension($file);

//            if(($extension != 'php') and ($extension != 'js')){
            if($extension != 'php'){
                /*
                 * Only translate PHP and JS files
                 */
                return;
            }

            if(VERBOSE){
                cli_log(tr('Scanning file ":file"', array(':file' => $file)));

            }else{
                cli_dot();
            }

            $content = file_get_contents($file);

            /*
             * UTF8 check!
             */
            if(!$params['noutf8check']){
                if(!str_is_utf8($content)){
                    /*
                     * Crap, this file is not UTF8 and will bork the translator. Update file contents, and safe file to force all files be UTF8
                     */
                    $content = utf8_encode($content);
                    file_put_contents($file, $content);

                    $forcedutf8[str_replace(ROOT, '', $file)] = true;

                    if(VERBOSE){
                        cli_dot();
                    }
                }
            }

//            preg_match_all('/tr\([\'"](.*?)[\'"](:?\s*,\s*array\((.*)\))?\)/iu', $content , $matches, PREG_PATTERN_ORDER);
            preg_match_all('/tr\([\'"](.*?)[\'"](:?\s*,\s*array\((.*)\))?\)/iu', $content , $matches, PREG_PATTERN_ORDER);

            if(!empty($matches[1])){
                foreach($matches[1] as $key => $value){
                    if(strip_tags($value, isset_get($_CONFIG['translate']['allowed_tags'])) != $value){
                        /*
                         * Translation string contains HTML!
                         */
                        $results['failed_html'][$value] = $file;
                        $results['count']++;

                    }elseif(strstr($value,'.$')){
                        /*
                         * Translation string contains PHP variables!
                         */
                        $results['failed_php'][$value] = $file;

                    }else{
                        /*
                         * Translation string is ok
                         */
                        $short_file = str_replace(ROOT, '', $file);
                        $results['translations'][$short_file][$value] = '';
                    }
                }
            }
        }));

        cli_dot(false);

        if(VERBOSE){
            cli_log(tr('Found :count strings', array(':count' => number_format($count))), 'white');
        }

        if(count($results['failed_html']) > 0){
            foreach($results['failed_html'] as $string => $file){
                if($ignore_html){
                    cli_log(tr('Found HTML ":html" in ":file"', array(':html' => str_size(str_truncate(str_log($string), 80), 80), ':file' => str_from($file, ROOT))), 'red');
                    $crash = true;

                }else{
                    if(VERBOSE){
                        cli_log(tr('Ignoring file ":file" because of HTML', array(':file' => str_from($file, ROOT))), 'yellow');
                    }
                }
            }

            if(!empty($crash)){
                throw new bException(tr('Translatable strings with disallowed HTML tags found'), 'translation-error');
            }

            cli_log(tr('Ignored ":count" files because of HTML', array(':count' => count($results['failed_html']))), 'yellow');
        }

        if(count($results['failed_php']) > 0){
            foreach($results['failed_php'] as $string => $file){
                if($ignore_php){
                    cli_log(tr('Found PHP ":php" in ":file"', array(':php' => $string, ':file' => $file)), 'red');
                    $crash = true;

                }else{
                    if(VERBOSE){
                        cli_log(tr('Ignoring file ":file" because of PHP', array(':file' => str_from($file, ROOT))), 'yellow');
                    }
                }
            }

            if(!empty($crash)){
                throw new bException(tr('Translatable strings with PHP code found'), 'translation-error');
            }

            cli_log(tr('Ignored ":count" files because of PHP', array(':count' => count($results['failed_php']))), 'yellow');
        }

        cli_log(tr('Sending translatable strings to server'), 'green');

        $timestamp = date('c');

        /*
         * Construct data for sending
         */
        $data = array('project'      => PROJECT,
                      'api_key'      => $_CONFIG['translate']['api_key'],
                      'translations' => $results['translations'],
                      'method'       => 'post',
                      'timestamp'    => $timestamp);

        try{
$_CONFIG['translate']['url'] = 'http://toolkit.ingiga.com.l.ingiga.com/api/translate.php';
            $response = curl_get(array('url'         => $_CONFIG['translate']['url'],
                                       'getdata'     => true,
                                       'proxies'     => false,
                                       'getheaders'  => false,
                                       'post'        => array('data' => encrypt($data, $_CONFIG['translate']['passphrase'])),
                                       'httpheaders' => false));

        }catch(Exception $e){
showdie($e);
            if(substr($e->getCode(), 0, 4) == 'HTTP'){
                $server_message = $e->getData()['data'];
                $code           = $e->getCode();

                throw new bException(tr('Server connection gave HTTP code ":code" with server message ":message"', array(':code' => $code, ':message' => $server_message)), 'translation_error');
            }

            throw new bException(tr('Error trying to connect with server : ":error"', array(':error' => $e->getMessage())), 'translation_error');
        }
showdie($response);

        if(empty($response['status'])){
            throw new bException(tr('Error trying to connect with server'), 'translation_error');
        }

        $returned_data = json_decode(decrypt(trim($response['data']), $_CONFIG['translate']['passphrase']), true);

        if(!is_array($returned_data) or ($returned_data['status'] != 'success')){
            throw new bException(tr('Failed to receive translations', 'translation_error'));
        }


        if(VERBOSE){
            cli_log('Received translations', 'green');
        }

        break;

    case 'translate':
        $noutf8check = (cli_argument('--no-utf') or cli_argument('--no-utf8')   or cli_argument('--no-utf8-check'));
        $mode        = cli_argument('--mode'     , true, $_CONFIG['translate']['mode']);
        $languages   = cli_argument('--languages', 'all');

        cli_no_arguments_left();

        /*
         * Validate command line parameters
         */
        if(empty($languages)){
            $languages = array_keys($_CONFIG['language']['supported']);

            if(empty($languages)){
                throw new bException(tr('No languages specified, no languages configured'), 'not-specified');
            }

            cli_log(tr('Translating to configured languages ":languages"', array(':languages' => implode(', ', $languages))), 'white');

        }else{
            cli_log(tr('Translating to requested languages ":languages"', array(':languages' => implode(', ', $languages))), 'white');
        }

        if(!in_array($mode, $available_modes)){
            throw new bException(tr('Unknown mode ":mode" specified', array(':mode' => $mode)), 'unknown');
        }

        foreach($languages as $id => $language){
            if($language == 'en'){
                log_message('Ignoring translation to English', 'translate', 'yellow');
                unset($languages[$id]);
                continue;
            }

            if(!preg_match('/\w{2}/', $language)){
                throw new bException(tr('Invalid language code ":language" specified', array(':language' => $language)), 'invalid');
            }
        }

        /*
         * Translate to specified languages
         */
        foreach($languages as $language){
            $source_dir = ROOT.'www/en';
            $target_dir = ROOT.'www/'.$language;

            cli_log(tr('translate: Starting :language', array(':language' => $language)), 'white');

            if(VERBOSE){
                cli_log(tr('Searching for translateable strings : '), '', false);
            }

            if($noutf8check){
                cli_log(tr('Skipping UTF8 check due to "noutf8check" command line parameter'), 'yellow');
            }

            $results = array('translations' => array(),
                             'failed_html'  => array(),
                             'failed_php'   => array(),
                             'count'        => 0);

            $params  = array('source_dir'   => $source_dir,
                             'target_dir'   => $target_dir,
                             'noutf8check'  => $noutf8check);

            file_tree_execute(array('path'      => ROOT,
                                    'recursive' => true,
                                    'params'    => $params,
                                    'callback'  => function($file, $type, $params) use ($results){

                if(file_get_extension($file) != 'php'){
                    return;
                }

                $target_file = $params['target_dir'].str_replace($params['source_dir'], '', $file);

                /*
                 * Timestamp check, we skip files that were not modified since last scan
                 * Instead of an == comparation we check that the difference is less than 10 seconds
                 * Since a  touch on the entire project wont be made on all files at exactly the same second
                 */
                if(file_exists($target_file) and (abs(filemtime($file) - filemtime($target_file)) < 10)){
                    if(VERBOSE){
                        cli_log(tr('Skipping file ":file" because it hasn\'t changed since last string scan', array(':file' => $file)), 'yellow');

                    }else{
                        cli_dot();
                    }

                    return;
                }

                if(VERBOSE){
                    cli_log(tr('Scanning file ":file"', array(':file' => $file)));

                }else{
                    cli_dot();
                }

                $content = file_get_contents($file);

                /*
                 * UTF8 check!
                 */
                if(!$params['noutf8check']){
                    if(!str_is_utf8($content)){
                        /*
                         * Crap, this file is not UTF8 and will bork the translator. Update file contents, and safe file to force all files be UTF8
                         */
                        $content = utf8_encode($content);
                        file_put_contents($file, $content);

                        $forcedutf8[str_replace(ROOT, '', $file)] = true;

                        if(VERBOSE){
                            cli_dot();
                        }
                    }
                }

                preg_match_all('/tr\([\'"](.*?)[\'"](:?\s*,\s*array\((.*)\))?\)/iu', $content , $matches, PREG_PATTERN_ORDER);

                if(!empty($matches[1])){
                    foreach($matches[1] as $key => $value){
                        if(strip_tags($value, isset_get($_CONFIG['translate']['allowed_tags'])) != $value){
                            /*
                             * Translation string contains HTML!
                             */
                            $results['failed_html'][$value] = $file;
                            $results['count']++;

                        }elseif(strstr($value,'.$')){
                            /*
                             * Translation string contains PHP variables!
                             */
                            $results['failed_php'][$value] = $file;

                        }else{
                            /*
                             * Translation string is ok
                             */
                            $short_file = str_replace(ROOT, '', $file);
                            $results['translations'][$short_file][$value] = '';
                        }
                    }
                }
            }));

            if(VERBOSE){
                cli_log(tr('Found :count strings', array(':count' => number_format($count))), 'white');
            }

            if(count($results['failed_html']) > 0){
                foreach($results['failed_html'] as $string => $file){
                    cli_log(tr('Contains HTML ":html" in ":file"', array(':html' => $string, ':file' => $file)), 'red');
                }

               throw new bException(tr('Translatable strings with disallowed HTML tags found'), 'translation-error');
            }

            if(count($results['failed_php']) > 0){
                foreach($results['failed_php'] as $string => $file){
                    cli_log(tr('Contains PHP ":php" in ":file"', array(':php' => $string, ':file' => $file)), 'red');
                }

               throw new bException(tr('Translatable strings with PHP code found'), 'translation-error');
            }

            if(VERBOSE){
                cli_log(tr('Requesting translations from server'), '', false);
            }

            /*
             * Construct data for sending
             */
            $data = array('project'         => PROJECT,
                          'api_key'         => $_CONFIG['translate']['api_key'],
                          'translations'    => $results['translations'],
                          'target_language' => $language,
                          'method'          => 'get',
                          'options'         => array('mode' => $mode));

            try{
$_CONFIG['translate']['url'] = 'http://toolkit.ingiga.com.l.ingiga.com/api/translate.php';
                $response = curl_get(array('url'         => $_CONFIG['translate']['url'],
                                           'getdata'     => true,
                                           'proxies'     => false,
                                           'getheaders'  => false,
                                           'post'        => array('data' => encrypt($data, $_CONFIG['translate']['passphrase'])),
                                           'httpheaders' => false));

            }catch(Exception $e){
                if(substr($e->getCode(), 0, 4) == 'HTTP'){
                    $server_message = $e->getData()['data'];
                    $code           = $e->getCode();

                    throw new bException(tr('Server connection gave HTTP code ":code" with server message ":message"', array(':code' => $code, ':message' => $server_message)), 'translation_error');
                }

                throw new bException(tr('Error trying to connect with server : ":error"', array(':error' => $e->getMessage())), 'translation_error');
            }

            if(empty($response['status'])){
                throw new bException(tr('Error trying to connect with server'), 'translation_error');
            }
showdie($response);
            $returned_data = decrypt(trim($response['data']), $_CONFIG['translate']['passphrase']);

            if(!is_array($returned_data) or ($returned_data['status'] != 'success')){
                throw new bException(tr('Failed to receive translations', 'translation_error'));
            }


            if(VERBOSE){
                cli_log('Received translations', 'green');
            }

            $params['translations'] = $returned_data['translations'];

            //translations ready, start processing.
            //delete target dir
            try{
                // if(VERBOSE){
                //     cli_log('Deleting target dir '.$target_dir, 'translate', '', true);
                // }

                shell_exec('rm -rf '.$target_dir);

                // Copy english to target dir
                if(VERBOSE){
                    cli_log(tr('Copying ":source" to ":target"', array(':source' => $params['source_dir'], ':target' => $target_dir)));
                }

                shell_exec('cp -a '.$params['source_dir'].' '.$target_dir);

                // :DELETE: Its not going to save too much space, and doesnt make sense
                //          to only link css and forgot about js, images, etc
                // // CSS should be symlink since it wont change between languages
                // file_delete_tree(slash($target_dir).'pub/css');
                // symlink('../../en/pub/css', slash($target_dir).'pub/css');

                //Apply translations
                if(VERBOSE){
                    cli_log(tr('Applying translations'), '', true);
                }

                foreach($params['translations'] as $short_file => $data){
                    if(VERBOSE){
                        cli_log(tr('Translating ":file"', array(':file' => $short_file)), '', false);
                    }

                    if(!empty($forcedutf8[$short_file])){
                        if(VERBOSE){
                            cli_log(tr('*FORCED-UTF8* '), 'yellow', false);
                        }
                    }

                    if(!file_exists(ROOT.$short_file)){
                        cli_log(tr(' File ":file" not found', array(':file' => ROOT.$short_file)), 'red');

                    }else{
                        //store new file
                        $filedata    = file_get_contents(ROOT.$short_file);
                        $target_file = str_replace($params['source_dir'], $target_dir, ROOT.$short_file);

                        //replace strings
                        foreach($data as $source => $translation){
                            if(VERBOSE){
                                cli_dot();
                            }

                            $from     = array('tr("'.$source.'"'     , "tr('".$source."'");
                            $to       = array('tr("'.$translation.'"', "tr('".$translation."'");
                            $filedata = str_replace($from, $to, $filedata);
                        }

                        file_put_contents($target_file, $filedata);

                        if(VERBOSE){
                            cli_log('Saved', 'green');
                        }
                    }
                }

                cli_log(tr('Translations completed'), 'green');

                if($returned_data['stats']['translations_missing'] > 0){
                    cli_log('Missing ":count" translations', array(':count' => number_format($returned_data['stats']['translations_missing'])), 'yellow');
                }

                cli_log('Successfully translated ":count" sections', array(':count' => number_format($returned_data['stats']['translations_done'])), 'green');

            }catch(Exception $e){
                throw new bException(tr('Error applying ":lang" translations', array(':lang' => $language)), $e);
            }
        }

        break;

    case '':
        throw new bException(tr('No method specified'), 'no-method');

    default:
        throw new bException(tr('Unknown method ":method" specified', array(':method' => cli_method())), 'unknown');
}
?>
