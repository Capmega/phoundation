#!/usr/bin/php
<?php
/*
 * This is the Phoundation command line interface setup script
 */
$usage = './scripts/base/setup [PROJECTNAME]
./scripts/base/setup [-F | --force]';

$help  = 'This is the BASE framework install script. It will ask you a number of questions and from that setup and configure your BASE framework for your new project.';

require_once(__DIR__.'/../../libs/startup.php');
cli_only();
load_libs('git,config');

if (SEED) {
    if (!FORCE) {
        throw new CoreException(tr('This project has already been setup, and to avoid overwriting your previous setup, this script will be blocked unless you run it in FORCE mode using -F'), 'warning');
    }

    log_console(tr('WARNING! This project has already been setup! The setup script will run anyway because FORCE mode was specified on the command line'), 'warning');
}

log_console(tr('Welcome to the BASE framework setup script!'), 'white');
log_console(tr('You will be asked a number of questions about your project, needed to automatically setup your project. Afterwards, you can still change every setting in the config/ files'));



/*
 * Required variables for config/project.php setup, default values, etc.
 */
$fail    = true;
$version = '0.1.0';
$name    = cli_argument(0);
$config  = array('project'    => array('seed' => str_random(mt_rand(16, 32))),
                 'production' => array(''     => config_read('production')));



/*
 * Get project name
 */
while ($fail) {
    $config['project']['name'] = cli_readline(tr('What is the name of your project'.($name ? ' ['.$name.'] ' : '').'?'), false, 'cyan');

    $match = preg_match('/[a-z-]{2,32}/', $config['project']['name']);

    if (!$match) {
        if (!$config['project']['name'] and $name) {
            $config['project']['name'] = $name;

        } else {
            log_console(tr('Please specify a valid project name. Valid project names can only contain "a-z-", must be lower case, and must be between 2 and 32 characters'), 'warning');
            continue;
        }
    }

    break;
}



/*
 * Get project version
 */
while ($fail) {
    $config['project']['version'] = cli_readline(tr('What is the version of your project [:default] ?', array(':default' => $version)), false, 'cyan');

    if (!$config['project']['version']) {
        $config['project']['version'] = $version;
    }

    $match = preg_match('/[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/i', $config['project']['version']);

    if (!$match) {
        log_console(tr('Please specify a valid project version. Valid project versions must have the form of number.number.number, like for example "0.1.0"'), 'warning');
        continue;
    }

    break;
}



/*
 * Get project production domain
 */
while ($fail) {
    $config['production']['']['domain']['__value__'] = cli_readline(tr('What is the production FQDN (Fully Qualified Domain Name, without http://, or https://) [:fqdn] ?', array(':fqdn' => $config['project']['name'].'.com')), false, 'cyan');

    if (!$config['production']['']['domain']['__value__']) {
        $config['production']['']['domain']['__value__'] = $config['project']['name'].'.com';
    }

    $match = preg_match('/^(?!\-)(?:[a-zA-Z\d\-]{0,62}[a-zA-Z\d]\.) {1,126}(?!\d+)[a-zA-Z\d]{1,63}$/', $config['production']['']['domain']['__value__']);

    if (!$match) {
        log_console(tr('Please specify a valid domain name. It cannot surpass 255 characters, .'), 'warning');
        continue;
    }

    break;
}



/*
 * Get project production domain
 */
while ($fail) {
    try {
        $multiple_sub_domains = cli_readline(tr('Will your project domain use multiple sub domains [N]?'), false, 'cyan');
        $multiple_sub_domains = get_true_false($multiple_sub_domains, false);
        break;

    }catch(Exception $e) {
        log_console(tr('Please specify y / yes or n / no, or just <enter> for the default value.'), 'warning');
    }
}



/*
 * Get project production domain
 */
if ($multiple_sub_domains) {

} else {
    while ($fail) {
        $single_sub_domain = cli_readline(tr('Will your project domain use single sub domain? If no, just press enter, if yes, please specify the sub domain here: '), false, 'cyan');

        if (!$single_sub_domain) {
            $single_sub_domain = '';

        } else {
            if (!preg_match('/[a-z-]{1,63}/i', $single_sub_domain)) {
                log_console(tr('Please specify a valid domain sections. Valid domain sections can only contain "a-z-" and must be between 1 and 63 characters'), 'warning');
                continue;
            }
        }

        break;
    }
}



/*
 * Get cookie domain configuration
 */
if ($multiple_sub_domains or $single_sub_domain) {
    $config['production']['']['whitelabels']['__value__'] = 'sub';

    while ($fail) {
        try {
            $sub_domain_cookies = cli_readline(tr('Will cookie scope include all sub domains [Y]?'), false, 'cyan');
            $sub_domain_cookies = get_true_false($sub_domain_cookies, true);

            if ($sub_domain_cookies) {
                $config['production']['']['cookie']['domain']['__value__'] = '.'.$config['production']['']['domain']['__value__'];

            } else {
                $config['production']['']['cookie']['domain']['__value__'] = $config['production']['']['domain']['__value__'];
            }

            break;

        }catch(Exception $e) {
            log_console(tr('Please specify y / yes or n / no, or just <enter> for the default value.'), 'warning');
        }
    }

} else {
    $config['production']['']['cookie']['domain']['__value__'] = $config['production']['']['domain']['__value__'];
}



/*
 * Get project production database
 */
while ($fail) {
    $config['production']['']['db']['core']['db']['__value__'] = cli_readline(tr('What is the production database name [:default] ?', array(':default' => Strings::until($config['production']['']['domain']['__value__'], '.'))), false, 'cyan');

    if (!$config['production']['']['db']['core']['db']['__value__']) {
        $config['production']['']['db']['core']['db']['__value__'] = Strings::until($config['production']['']['domain']['__value__'], '.');
    }

    if (!preg_match('/[0-9,a-z,A-Z$_]{2,16}/', $config['production']['']['db']['core']['db']['__value__'])) {
        log_console(tr('Please specify a valid database name. Valid database names can only contain "0-9,a-z,_" and must be between 2 and 16 characters'), 'warning');
        continue;
    }

    break;
}



/*
 * Get project production database username
 */
while ($fail) {
    $config['production']['']['db']['core']['user']['__value__'] = cli_readline(tr('What is the production database username [:default] ?', array(':default' => Strings::until($config['production']['']['domain']['__value__'], '.'))), false, 'cyan');

    if (!$config['production']['']['db']['core']['user']['__value__']) {
        $config['production']['']['db']['core']['user']['__value__'] = Strings::until($config['production']['']['domain']['__value__'], '.');
    }

    if (!preg_match('/[0-9,a-z,A-Z$_]{2,16}/', $config['production']['']['db']['core']['user']['__value__'])) {
        log_console(tr('Please specify a valid database name. Valid database usernames can only contain "a-z-" and must be between 2 and 16 characters'), 'warning');
        continue;
    }

    break;
}



/*
 * Get project production database password
 */
while ($fail) {
    $password = str_random(16);

    $config['production']['']['db']['core']['pass']['__value__'] = cli_readline(tr('What is the production database user password to access your main database [:password] ?', array(':password' => $password)), false, 'cyan');

    if (!$config['production']['']['db']['core']['pass']['__value__']) {
        $config['production']['']['db']['core']['pass']['__value__'] = $password;
    }
    break;
}



/*
 * Get project production database timezone
 */
while ($fail) {
    $timezone = 'UTC';

    $config['production']['']['db']['core']['timezone']['__value__'] = cli_readline(tr('What is the production database user password to access your main database [:default] ?', array(':default' => $timezone)), false, 'cyan');

    if (!$config['production']['']['db']['core']['timezone']['__value__']) {
        $config['production']['']['db']['core']['timezone']['__value__'] = $timezone;
    }

    $timezone = strtoupper($timezone);
    break;
}



/*
 * Write project config/project.php file
 */
log_console(tr('Writing project file...'), 'white');
config_write_project($config['project']['name'], $config['project']['version'], $config['project']['seed']);

$project = $config['project']['name'];
unset($config['project']);



/*
 * Write project configuration files
 */
log_console(tr('Writing configuration files...'), 'white');

foreach($config as $environment => $files) {
    log_console(tr('Writing configuration environment ":environment"...', array(':environment' => $environment)));

    foreach($files as $file => $data) {
        log_console(tr('Writing configuration file ":file"...', array(':file' => $environment.($file ? '_'.$file : ''))));
        config_write($data, $environment, $file);
    }
}


/*
 * Add the setup to git and commit as INIT commit
 */
git_add(ROOT.'config/');
git_commit(tr('INIT: setup project ":project"', array(':project' => $project)));
?>
