#!/usr/bin/php
<?php
/*
 * This is the project deploy script
 *
 * Possible arguments:
 *
 * subenv SUBENVIRONMENTNAME  - Deploy another sub environment than the
 *                              current default
 *
 * all                        - Deploy all sub environments
 *
 * docontent / docontentcheck - Check content files
 *
 * dosyntax / doparse         - Do PHP syntax check parse
 *
 * nodeploy / test            - Do not deploy, only translate
 *
 * nohook / nohooks           - Do not execute hooks
 *
 * noinit                     - Do not execute an init on the target server
 *
 * nonotify                   - Do not send notifications
 *
 * nopush                     - Do not automatically git push all changes and
 *                              tags
 *
 * noparrallel                - Do not use parrallel rsync deploy, even if the
 *                              website is configured to do so anyway
 *
 * nositemap                  - Do not automatically reupdate the sitemap files
 *
 * notag / notags             - Do not tag current version (tagging is
 *                              automatically disabled if doversion has
 *                              NOT been set)
 *
 * notranslate                - Do not execute file translation
 *
 * stash                      - Execute a "git stash" before and "git stash
 *                              pop" after deploy, in case the WT contained
 *                              changes
 *
 * upversion / upversions     - Update version (Does not do so by default)
 *
 * HOOK SCRIPTS: Below are shown (in order) the hook scripts that will be
 *               executed If the hook scripts exist (in ROOT/scripts/hooks)
 *               they will be executed. If not, they will be ignored
 *
 * deploy_pre
 * deploy_post_content
 * deploy_post_syntax
 * deploy_post_version
 * deploy_post_tag
 * deploy_post_push
 * deploy_pre_deploy
 * deploy_post_translation
 * deploy_post_deploy
 * deploy_post_permission
 * deploy_post_init
 * deploy_post_sitemap
 * deploy_post_notify
 * deploy_post_deploy
 * deploy_post
 *
 * @copyright Sven Oostenbrink <support@svenoostenbrink.com>, Johan Geuze
 */
$usage = "./scripts/base/deploy SUBENVIRONMENT / all\n".
         "./scripts/base/deploy\n";

$help  = "The deploy script can deploy the project to target environments, like trial, production, etc.
This is the project deploy script

Possible arguments:

subenv SUBENVIRONMENTNAME  - Deploy another sub environment than the
                             current default

all                        - Deploy all sub environments

nodeploy / test            - Do not deploy, only translate

nonotify                   - Do not send notifications

continuersync              - Only functional for sites that have
                             rsync_parrallel configured, will attempt to
                             continue an interrupted rsync to the copy of the
                             target site. If it does not exist, it will start
                             over as normal. This is useful for when a long
                             rsync with large files was interrupted, and you do
                             not want to have to restart the entire deploy from
                             scratch

dosyntax / doparse         - Do PHP syntax check parse

docontent / docontentcheck - Check content files

notranslate                - Do not execute file translation

nohook / nohooks           - Do not execute hooks

upversion / upversions     - Update version (Does not do so by default)

notag / notags             - Do not tag current version (tagging is
                             automatically disabled if doversion has
                             NOT been set)

nopush                     - Do not automatically git push all changes and
                             tags

noinit                     - Do not execute an init on the target server

nositemap                  - Do not automatically reupdate the sitemap files

stash                      - Execute a \"git stash\" before and \"git stash
                             pop\" after deploy, in case the WT contained
                             changes

HOOK SCRIPTS: Below are shown (in order) the hook scripts that will be
              executed If the hook scripts exist (in ROOT/scripts/hooks)
              they will be executed. If not, they will be ignored

deploy_pre
deploy_post_content
deploy_post_syntax
deploy_post_version
deploy_post_tag
deploy_post_push
deploy_pre_deploy
deploy_post_translation
deploy_post_deploy
deploy_post_permission
deploy_post_init
deploy_post_sitemap
deploy_post_notify
deploy_post_deploy
deploy_post";

require_once(dirname(__FILE__).'/../../libs/startup.php');

try{
    cli_only();
    load_libs('init,deploy');

    log_screen('Starting deploy of project "'.PROJECT.'"', 'deploy', 'white');

    /*
     * Ensure we're not running on the production environment.
     * Deployment is always done to targets, and production is always a target, we cannot deploy from a target to a target
     */
    if(ENVIRONMENT == 'production') {
        throw new bException('You are running the deply script on production environment? Are you high?', 'production');
    }

    /*
     * Check command line parameters
     */
    $noinit        =   argument('noinit');
    $nositemap     =   argument('nositemap');
    $nohooks       =  (argument('nohook')     or argument('nohooks'));
    $nosyntax      = !(argument('dosyntax')   or argument('doparse'));
    $nodeploy      =  (argument('nodeploy')   or argument('test'));
    $noversion     = !(argument('upversion')  or argument('upversions'));
    $nocontent     = !(argument('docontent')  or argument('docontentcheck'));
    $nofixperms    =  (argument('nofixperms') or argument('nofixpermissions'));

    $notag         =  (argument('notag')      or argument('notags') or $noversion);
    $nopush        =  (argument('nopush')     or ($noversion and $notag));
    $stash         =   argument('stash');

    $message       =   argument('message'      , true);
    $continuersync =   argument('continuersync', true);
    $targets       =   argument('target'       , 'all', argument('targets', 'all'));

    $tilde         = '~'.date('Ymd-His');

    if(!$message and !$notag){
        throw new bException('No tag message specified! please use ./scripts/base/deploy ..... message "commit message"', 'notspecified');
    }

    /*
     * Load deployment configuration
     */
    include(ROOT.'config/deploy.php');

    if(empty($_CONFIG['deploy'])){
        throw new bException('No deploy configuration found', 'config');
    }

    /*
     * Check target configuration availability
     */
    if(!$targets){
        throw new bException('No target environment specified!', 'notspecified');
    }

    if(count($targets) == 1){
        $targets = array_pop($targets);
    }

    if($targets === true){
        /*
         * "./scripts/base/deploy all" was used
         */
        $targets = 'all';
    }

    if($targets == 'all'){
        /*
         * Get all deployment targets
         */
        $targets = array_keys($_CONFIG['deploy']);
        log_console('Deploying to ALL target environments!', 'warning', 'yellow');

    }elseif(is_array($targets)){
        log_console('Deploying to specified target environments "'.str_log(str_force($targets, ', ')).'"', 'warning', 'yellow');

    }else{
        log_console('Deploying to specified target environment "'.str_log($targets).'"', 'warning', 'yellow');
        $targets = array($targets);
    }

    if(!$targets){
        throw new bException('No deployment targets specified', 'notspecified');
    }



    /*
     * If we're going to deploy to production environment, ensure that we
     * either are on master or production branch, since we won't deploy
     * from any other branch (for safety)
     */
    if(in_array('production', $targets)){
        load_libs('git');
        $branch = git_branch();

        if(($branch != 'production') and ($branch != 'master')){
            if(!FORCE){
                throw new bException(tr('Cannot deploy the current GIT branch "'.str_log($branch).'" to production environment. For safety, deployment to production environment is restricted to either "production" or "master" branches'), 'productioninvalidbranch');
            }
        }
    }



    /*
     * Do project BOM check
     */
    if(argument('nobomcheck')){
        log_screen('Skipping BOM check due to "nobomcheck" option', 'deploy', 'yellow');

    }else{
        log_screen('Executing BOM check', 'deploy', 'white');
        script_exec('base/clearbom', 'quiet');
    }



    /*
     * Do a PHP syntax check on the entire project
     */
    if($nosyntax){
        log_console('Skipping PHP syntax check due to no "dosyntax" command line parameter', 'deploy', 'yellow');

    }else{
        log_console('Executing PHP syntax check', 'deploy', 'white');

        exec('find . -type f -name "*.php"', $output);

        if(!is_array($output)){
            throw new bException('Syntax check failed', 'production');
        }

        if(!$output){
            throw new bException('No php files found.', 'production');
        }

        foreach($output as $file){
            if(substr($file, 0, 7) == './data/'){
                /*
                 * Do not check PHP files in ROOT/data
                 */
                continue;
            }

            exec('php -l '.ROOT.$file.' > /dev/null', $syntaxoutput, $return);

            if($return){
                throw new bException('Content scan failed on file "'.$file.'" with "'.str_log($syntaxoutput).'"', 'production');
            }

            log_console('#', '', 'green', false);
        }

        log_console('', '');
        init_hook('deploy_post_content', $nohooks);

    }



    /*
     * Do a content file check on the entire project
     */
    if($nocontent){
        log_screen('Skipping content file check due to "nocontent" command line parameter', 'deploy', 'yellow');

    }else{
        log_screen('Executing content file check', 'deploy', 'white');

        exec('grep load_content  www scripts -R', $output);

        if(!is_array($output)){
            throw new bException('Content scan failed', 'production');
        }

        if(!$output){
            throw new bException('No "load_content" found which is impossible, because the system library has it.', 'production');
        }

        /*
         * Extract a list of unique files
         */
        $files = array();

        foreach($output as $line){
            if(preg_match('/(.*?):.*?load_content\s*\(\s*\'(.*?)\'\s*,/i', $line, $matches)){
                /*
                 * Skip function definitions, comments, etc.
                 */
                if(empty($matches[2])){
                    /*
                     * Not a valid match, skip
                     */
                    continue;
                }

                $files[$matches[2]] = $matches[1];
            }
        }

        /*
         * Ensure content file availability
         */
        foreach($files as $file => $definedin){
            if(substr($definedin, 0, 14) == 'scripts/tests/'){
                continue;
            }

            foreach($deploy_config['languages'] as $language){
                log_console('Searching for file "'.$file.'" on "'.$deploy_config['target_server'].'"', 'deploy');

                exec('ssh -t -p '.isset_get($deploy_config['target_port'], 22).' '.$deploy_config['target_user'].'@'.$deploy_config['target_server'].' \'ls '.($file = $deploy_config['target_dir'].'data/content/'.$language.'/'.$file.'.html').' 2>&1 /dev/null\'', $contentoutput, $return);

                if($return){
                    throw new bException('Missing content file "'.str_log($file).'" for language "'.str_log($language).'", defined in "'.$definedin.'"', 'production');
                }
            }
        }

        init_hook('deploy_post_syntax', $nohooks);
    }



    /*
     * Do a project version revision upgrade
     */
    if($noversion){
        log_console('Skipping PHP version update due to no "doversion" command line parameter', 'deploy', 'yellow');

    }else{
        log_console('Executing PHP version update', 'deploy', 'white');

        /*
         * Get version data
         */
        $oldversion = PROJECTCODEVERSION;
        $newversion = init_version_upgrade($oldversion, 'revision');

        /*
         * Update project configuration file
         */
        $data = file_get_contents(ROOT.'config/project.php');
        $data = preg_replace('/\''.$oldversion.'\'\);/', '\''.$newversion.'\');', $data);

        file_put_contents(ROOT.'config/project.php', $data);

        exec('cd '.ROOT.'; git add config/project.php; git commit -m "Upgraded project \"'.PROJECT.'\" version to \"'.$newversion.'\""');

        init_hook('deploy_post_version', $nohooks);

    }



    /*
     * Do system tag with the new version
     */
    if($noversion or $notag){
        log_console('Skipping git version tagging due to either no "doversion" or no "dotag" command line parameters', 'deploy', 'yellow');

    }else{
        log_console('Executing git version tagging', 'deploy', 'white');

        passthru('cd '.ROOT.'; git tag -am "['.PROJECT.(REQUIRE_SUBENVIRONMENTS ? ' / '.(argument('all') ? 'all' : $subenvironments[0]) : '').' / '.$newversion.'] '.$message.'" '.$newversion.';', $exitcode);

        if($exitcode){
            throw new bException('Git tagging failed with exit code "'.str_log($exitcode).'"', 'git_tag');
        }

        init_hook('deploy_post_tag', $nohooks);
    }



    /*
     * Do git push all changes and tags
     */
    if($noversion or $notag or $nopush){
        log_console('Skipping git push for changes and tags due to no "doversion" or no "dotag" or no "dopush" command line parameters', 'deploy', 'yellow');

    }else{
        log_console('Executing git push', 'deploy', 'white');

        passthru('cd '.ROOT.'; git push origin '.$target_environment.'; git push --tags', $exitcode);

        if($exitcode){
            throw new bException('Git push failed with exit code "'.str_log($exitcode).'"', 'git_push');
        }

        init_hook('deploy_post_push', $nohooks);
    }



    foreach($targets as $target_environment){
        if(empty($_CONFIG['deploy'][$target_environment])){
            throw new bException('Unknown target environment "'.str_log($target_environment).'" specified', 'unknown');
        }

        /*
         * Ensure that target environment configuration file is available.
         */
        if(!file_exists(ROOT.'config/'.$target_environment.'.php')){
            throw new bException('Target environment "'.str_log($target_environment).'" has no configuration file', 'missingfile');
        }

        $deploy_config = $_CONFIG['deploy'][$target_environment];

        log_console('Deploying to target environment "'.str_log($target_environment).'"', 'deploy', 'white');

        /*
         * Check if we dont have any commits
         */
        if(!trim(shell_exec('git status | grep "nothing to commit" | wc -l'))) {
            if(!FORCE){
                if(!$stash){
                    throw new bException('Git commit pending', 'COMMITFIRST');
                }

                log_console('Changes detected, git stashing changes before comming', 'stash', 'yellow');
                safe_exec('git stash');
            }

        }else{
            $stash = false;
        }

        init_hook('deploy_pre', $nohooks);

        if(REQUIRE_SUBENVIRONMENTS) {
            /*
             * This project uses sub environments!
             */
            include(ROOT.'config/subenvironments.php');

            if(argument('all')){
                /*
                 * Deploy ALL sub projects!
                 */
                $subenvironments = $_CONFIG['subenvironments'];
                log_screen('You are about to deploy '.PROJECT.' with ALL SUBENVIRONMENTS in languages ('.implode(',', $deploy_config['languages']).', en), Do you want to proceed? (yes/no)', 'deploy', 'purple', true);

            }else{
                /*
                 * Deploy the project of the current subenvironment
                 */
                $subenvironments = array(SUBENVIRONMENTNAME);
                log_screen('You are about to deploy '.PROJECT.' with subenvironment '.SUBENVIRONMENT.' in languages ('.implode(',', $deploy_config['languages']).', en), Do you want to proceed? (yes/no)', 'deploy', 'yellow', true);
            }

            if(!$nodeploy){
                $handle = fopen('php://stdin', 'r');
                $line   = fgets($handle);

                if(trim($line) != 'yes'){
                    log_screen('Aborting deploy', 'deploy','red');
                    exit;
                }
            }

        }else{
            $subenvironments = array('');
        }



        /*
         * Now go over all environments and translate and deploy
         */
        foreach($subenvironments as $subenvironment){
            if($subenvironment){
                $display_subenvironment = '('.$subenvironment.') ';
                $subenv_subenvironment  = ' subenv '.$subenvironment;

            }else{
                $display_subenvironment = '';
                $subenv_subenvironment  = '';
            }



            /*
             * Load environment specific configuration and override current config
             */
            deploy_update_config($subenvironment);

            log_screen($display_subenvironment.'Starting deploy '.($subenvironment ? 'for subenvironment "'.$subenvironment.'" ' : '').'on "'.date('d M Y h:i').'"', 'deploy', 'white');

            init_hook('deploy_pre_deploy', $nohooks);



            /*
             * If version was upgraded, execute an init to avoid leaving the dev site inoperable
             */
            if(!$noversion){
                log_console('Project version revision was updated, executing init to update project database', 'deploy', 'white');
                passthru(ROOT.'script/base/init env '.$target_environment.$subenv_subenvironment, $exitcode);

                if($exitcode){
                    throw new bException('System init failed with exit code "'.str_log($exitcode).'"', 'local_init');
                }
            }



            /*
             * Do code translation
             */
            if(argument('notranslate')){
                log_screen($display_subenvironment.'Skipping translations due to "notranslate" option', 'deploy', 'yellow');

            }else{
                log_screen($display_subenvironment.'Executing translations', 'deploy', 'white');

                if(count($deploy_config['languages'])) {
                    foreach($deploy_config['languages'] as $language) {
                        log_screen($display_subenvironment.'Translating to '.$language, 'deploy', 'white');
                        script_exec('base/translate', array($language));

                        init_hook('deploy_post_translation', $nohooks);
                    }
                }
            }



            /*
             * In case of rsync_parrallel option, copy the target dir and use the copy for the rsync and file permissions update
             */
            if(argument('noparrallel')){
                log_console($display_subenvironment.'Deploying in non rsync parrallel mode due to "noparrallel" option', 'yellow');
                $deploy_config['rsync_parrallel'] = false;
            }


            /*
             * Continue rsyncing a previously stopped deploy?
             */
            if($continuersync){
                if(!$deploy_config['rsync_parrallel']){
                    throw new bException(tr('The continuersync option was specified which makes no sense when either the project does not support rsync_parrallel, or when rsync_parrallel has been disabled because of the command line option "noparrallel"'), 'invalid');
                }

                /*
                 * Validate $continuersync value
                 */
                while(!preg_match('/^20\d{6}-\d{6}$/', $continuersync)){
                    if(!preg_match('/^'.str_rfrom($deploy_config['target_dir'], '/').'~20\d{6}-\d{6}\/?$/', $continuersync)){
                        throw new bException(tr('The specified continuersync option "'.str_log($continuersync).'" is invalid, it should be in the Ymd-His format, or targetpath~Ymd-His'), 'invalid');
                    }

                    $continuersync = str_until(str_from($continuersync, '~'), '/');
                }
            }


            if(!empty($deploy_config['rsync_parrallel'])){
                /*
                 * Make a copy on the server, rsync that copy, then move that copy in place of the current version. This will cause less down time due to version differences
                 */
                log_screen($display_subenvironment.'Deploying in rsync to parrallel mode...', 'deploy', 'white');

                if($continuersync){
                    /*
                     * Search for existing copies
                     */
                    if(count(safe_exec('ssh -t -p '.isset_get($deploy_config['target_port'], 22).' '.$deploy_config['target_user'].'@'.$deploy_config['target_server'].' \'ls '.($deploy_config['target_dir']).'~'.$continuersync.' 2> /dev/null \'', 2)) < 2){
                        /*
                         * Does not exist
                         */
                        throw new bException(tr('The specified continuesync path "'.str_log(($deploy_config['target_dir']).'~'.$continuersync).'" on the target environment "'.str_log($target_environment).'" does not exist'), '');
                    }

                    $tilde = '~'.$continuersync;
                    log_screen($display_subenvironment.' Continuing with specified copy "'.str_log($deploy_config['target_dir'].$tilde).'" of current version...', 'deploy', 'white');

                }else{
                    log_screen($display_subenvironment.'Creating copy of current version to "'.str_log($deploy_config['target_dir'].$tilde).'"...', 'deploy', 'white');
                    passthru('ssh -t -p '.isset_get($deploy_config['target_port'], 22).' '.$deploy_config['target_user'].'@'.$deploy_config['target_server'].' \''.($deploy_config['sudo'] ? 'sudo ' : '').'rm '.$deploy_config['target_dir'].$tilde.' -rf; '.($deploy_config['sudo'] ? 'sudo ' : '').'cp -a '.$deploy_config['target_dir'].' '.$deploy_config['target_dir'].$tilde.'\'', $exitcode);

                    if($exitcode){
                        throw new bException('rsync_parrallel initial copy failed with exit code "'.str_log($exitcode).'"', 'rsync_parrallel');
                    }
                }

                $deploy_config['target_dir'] .= $tilde;
            }



            /*
             * Do the deploy
             */
            if($nodeploy){
                log_screen($display_subenvironment.'NOT deploying, due to "nodeploy" or "test" command line parameter', 'deploy', 'yellow');

            }else{
                $exclude = ' --exclude="www/en/sitemap.html*" --exclude="www/en/sitemap.xml*" --exclude="www/en/mock" --exclude="data/mocks" --exclude="data/mock*" --exclude="data/uploads" --exclude="data/packages" --exclude=".git*" --exclude="/data/system" ';

                if(count($deploy_config['exclude_dirs'])) {
                    foreach($deploy_config['exclude_dirs'] as $key => $dir) {
                        $exclude .= ' --exclude="'.$dir.'" ';
                    }
                }

                log_screen($display_subenvironment.'Deploying project to target server "'.$deploy_config['target_server'].'" on path "'.$deploy_config['target_dir'].'"...', 'deploy', 'white');
                passthru('rsync -acz --progress -p --delete '.($deploy_config['sudo'] ? '--rsync-path="sudo rsync" ' : '').'-e "ssh -p '.$deploy_config['target_port'].'" '.ROOT.' '.$deploy_config['target_user'].'@'.$deploy_config['target_server'].':'.$deploy_config['target_dir'].' '.$exclude, $exitcode);
                exec('ssh -t -p '.isset_get($deploy_config['target_port'], 22).' '.$deploy_config['target_user'].'@'.$deploy_config['target_server'].' \'mkdir '.$deploy_config['target_dir'].'/data/system 2> /dev/null; touch '.$deploy_config['target_dir'].'/data/system/last_deploy\'', $contentoutput, $return);

                if($exitcode){
                    throw new bException('Rsync failed with exit code "'.str_log($exitcode).'"', 'rsync');
                }

                init_hook('deploy_post_deploy', $nohooks);
            }



            /*
             * Fix permissions
             */
            if($nofixperms){
                log_screen($display_subenvironment.'Skipping file permission update due to "nofixpermissions" command line parameter', 'deploy', 'yellow');

            }else{
                log_screen($display_subenvironment.'Executing file permission update', 'deploy', 'white');

                if(!empty($deploy_config['rsync_parrallel'])){
                    passthru($command = 'ssh -t -p '.isset_get($deploy_config['target_port'], 22).' '.$deploy_config['target_user'].'@'.$deploy_config['target_server'].' \''.$deploy_config['target_dir'].'/scripts/base/fixpermissions env '.$target_environment.$subenv_subenvironment.' nologin target_dir '.$deploy_config['target_dir'].'\' ', $exitcode);

                }else{
                    passthru($command = 'ssh -t -p '.isset_get($deploy_config['target_port'], 22).' '.$deploy_config['target_user'].'@'.$deploy_config['target_server'].' \''.$deploy_config['target_dir'].'/scripts/base/fixpermissions env '.$target_environment.$subenv_subenvironment.' nologin \'', $exitcode);
                }

                if($exitcode){
                    throw new bException('Fixpermissions failed with exit code "'.str_log($exitcode).'"', 'fixpermissions');
                }

                init_hook('deploy_post_permission', $nohooks);
            }



            /*
             * From here, the target directory should be normal again
             */
            $deploy_config['target_dir'] = str_until($deploy_config['target_dir'], '~');



            /*
             * In case of rsync_parrallel option, move the copy back in place, and remove the original
             */
            if(!empty($deploy_config['rsync_parrallel'])){
                log_screen($display_subenvironment.'Moving new version in place...', 'deploy', 'white');
                passthru('ssh -t -p '.isset_get($deploy_config['target_port'], 22).' '.$deploy_config['target_user'].'@'.$deploy_config['target_server'].' \''.($deploy_config['sudo'] ? 'sudo ' : '').'mv '.$deploy_config['target_dir'].' '.$deploy_config['target_dir'].$tilde.'; '.($deploy_config['sudo'] ? 'sudo ' : '').'mv '.$deploy_config['target_dir'].$tilde.' '.$deploy_config['target_dir'].'\'', $exitcode);

                if($exitcode){
                    throw new bException('Moving new version in place failed with exit code "'.str_log($exitcode).'"', 'rsync_parrallel_move');
                }

                log_screen($display_subenvironment.'Deleting old version...', 'deploy', 'white');
                passthru('ssh -t -p '.isset_get($deploy_config['target_port'], 22).' '.$deploy_config['target_user'].'@'.$deploy_config['target_server'].' \''.($deploy_config['sudo'] ? 'sudo ' : '').'rm '.$deploy_config['target_dir'].$tilde.' -rf\'', $exitcode);

                if($exitcode){
                    throw new bException('Deleting old version in place failed with exit code "'.str_log($exitcode).'"', 'rsync_parrallel_delete');
                }
            }



            /*
             * Execute init on target
             */
            if($noinit){
                log_screen($display_subenvironment.'Skipping target init due to "noinit" command line parameter', 'deploy', 'yellow');

            }else{
                log_screen($display_subenvironment.'Executing init on target server', 'deploy', 'white');

                passthru($command = 'ssh -t -p '.isset_get($deploy_config['target_port'], 22).' '.$deploy_config['target_user'].'@'.$deploy_config['target_server'].' \''.$deploy_config['target_dir'].'/scripts/base/init env '.$target_environment.$subenv_subenvironment.' \'', $exitcode);

                if($exitcode){
                    throw new bException('Target version init failed with exit code "'.str_log($exitcode).'"', 'target_init');
                }

                init_hook('deploy_post_init', $nohooks);
            }



            /*
             * Auto rebuild the sitemap?
             */
            if($nositemap){
                log_screen($display_subenvironment.'Skipping auto sitemap deploy due to "nositemap" command line parameter', 'deploy', 'yellow');

            }else{
                log_screen($display_subenvironment.'Executing sitemap scan and deploy on target server', 'deploy', 'white');

                passthru($command = 'ssh -t -p '.isset_get($deploy_config['target_port'], 22).' '.$deploy_config['target_user'].'@'.$deploy_config['target_server'].' \''.$deploy_config['target_dir'].'/scripts/base/sitemap scan env '.$target_environment.$subenv_subenvironment.' \'', $exitcode);

                if($exitcode){
                    throw new bException('Target sitemap scan failed with exit code "'.str_log($exitcode).'"', 'target_sitemap_scan');
                }

                foreach($deploy_config['languages'] as $language){
                    passthru($command = 'ssh -t -p '.isset_get($deploy_config['target_port'], 22).' '.$deploy_config['target_user'].'@'.$deploy_config['target_server'].' \''.$deploy_config['target_dir'].'/scripts/base/sitemap deploy   html '.$language.' env '.$target_environment.$subenv_subenvironment.' \'', $exitcode);

                    if($exitcode){
                        throw new bException('Target sitemap HTML build failed with exit code "'.str_log($exitcode).'"', 'target_sitemap_html');
                    }

                    passthru($command = 'ssh -t -p '.isset_get($deploy_config['target_port'], 22).' '.$deploy_config['target_user'].'@'.$deploy_config['target_server'].' \''.$deploy_config['target_dir'].'/scripts/base/sitemap deploy    xml '.$language.' env '.$target_environment.$subenv_subenvironment.' \'', $exitcode);

                    if($exitcode){
                        throw new bException('Target sitemap XML build failed with exit code "'.str_log($exitcode).'"', 'target_sitemap_xml');
                    }

                    passthru($command = 'ssh -t -p '.isset_get($deploy_config['target_port'], 22).' '.$deploy_config['target_user'].'@'.$deploy_config['target_server'].' \''.$deploy_config['target_dir'].'/scripts/base/sitemap deploy robots '.$language.' env '.$target_environment.$subenv_subenvironment.' \'', $exitcode);

                    if($exitcode){
                        throw new bException('Target sitemap robots build failed with exit code "'.str_log($exitcode).'"', 'target_sitemap_robots');
                    }
                }

                init_hook('deploy_post_sitemap', $nohooks);
            }



            /*
             * Send notifications
             */
            if(argument('nonotify')){
                log_screen($display_subenvironment.'Skipping deploy notifications due to "nonotify" command line parameter', 'deploy', 'yellow');

            }else{
                log_screen($display_subenvironment.'Executing deploy notifications', 'deploy', 'white');

                notify('deploy', 'Deployed project "'.PROJECT.'" subenvironment "'.str_log($subenvironment).'" and languages "'.str_log(implode(', ', $deploy_config['languages'])).'"', null, $subenvironment);
                init_hook('deploy_post_notify', $nohooks);
            }


            if($stash){
                log_console('Git stashed changes detected, unstashing', 'stash', 'yellow');
                safe_exec('git stash pop');
            }

            /*
             * Done!
             */
            if($subenvironment){
                log_screen($display_subenvironment.'Finished deploy for project "'.strtolower(PROJECT).'" subenvironment "'.$subenvironment.'"', 'deploy', 'green');

            }else{
                log_screen($display_subenvironment.'Finished deploy for project "'.strtolower(PROJECT).'"', 'deploy', 'green');
            }

            init_hook('deploy_post_deploy', $nohooks);
        }

        init_hook('deploy_post', $nohooks);

        if(count($subenvironments) > 1){
            log_screen('Finished deploy for all environments in target "'.str_log($target_environment).'"', 'deploy', 'green');
        }
    }

    init_hook('deploy_finish', $nohooks);

    if(count($subenvironments) > 1){
        log_screen('Finished deploy for all targets', 'deploy', 'green');
    }

}catch(Exception $e){
// :TODO: Add "git stash pop" in case a stash was done
    cli_error('scripts/base/deploy: Failed', $e);
}
?>
