#!/usr/bin/php
<?php
/*
 * This is the project deploy script
 * See the help contents for more information
 *
 * @copyright Sven Oostenbrink <support@ingiga.com>, Johan Geuze
 */
$usage = "./scripts/base/deploy ENVIRONMENT / all\n".
         "./scripts/base/deploy\n";

$help  = "The deploy script can deploy the project to target environments, like trial, production, etc.
This is the project deploy script

Possible arguments:

This is the project deploy script





OPTIONS

--all / -a                      - Deploy all sub environments

--ignore-changes / -i           - Ignore git status, don't check for
                                  uncommitted changes

--do-content-check              - Check content files

--do-syntax / --doparse         - Do PHP syntax check parse

--no-deploy / --test            - Do not deploy, only translate

--no-hook / --no-hooks          - Do not execute hooks

--no-init                       - Do not execute an init on the target server

--no-notify                     - Do not send notifications

--no-push                       - Do not automatically git push all changes
                                  and tags

--no-parrallel                  - Do not use parrallel rsync deploy, even if
                                  the website is configured to do so anyway

--no-sitemap                    - Do not automatically reupdate the sitemap
                                  files

--no-tag / --no-tags            - Do not tag current version (tagging is
                                  automatically disabled if doversion has
                                  NOT been set)

--no-translate                  - Do not execute file translation

--no-bom-check                  - Do not test for BOM character in all
                                  PHP files. The ByteOrderMark character is a
                                  UTF8 character (added mostly by apple
                                  machines) that indicates how to read the
                                  UTF8 text, but is interpreted by the PHP as
                                  a character before the <?php tag, which can
                                  cause problems with headers(). The clearbom
                                  script will strip the BOM characters and is
                                  by default always executed on each deploy
                                  to be sure no BOM characters end up in
                                  production code. This option disables the
                                  BOM check.

--no-backup                     - Do NOT execute a site / database backup, even
                                  though by default, a backup should be done

--do-backup                     - Execute a site / database backup, even though
                                  by default, a backup should not be done

--stash                         - Execute a \"git stash\" before and \"git
                                  stash pop\" after deploy, in case the WT
                                  contained changes

--up-version / --up-versions    - Update version (Does not do so by default)

--send-content-texts            - rsync the data/content/photos path as well
                                  (Normally always skipped)

--send-content-photos           - rsync the data/content/LANGUAGECODE paths as
                                  well (Normally always skipped)

--update-sitemap                - rsync the www/LANG/sitemap file as well
                                  (Normally always skipped)

-F --force                      - Force a deploy, even when it should be
                                  stopped due to (for example) git changes

-C --nocolor                    - Do not use color in output

-T --test                       - Do not do anything, just test the flow of
                                  the deploy



HOOK SCRIPTS: Below are shown (in order) the hook scripts that will be
              executed If the hook scripts exist (in ROOT/scripts/hooks)
              they will be executed. If not, they will be ignored

deploy_post_content
deploy_post_syntax
deploy_post_version
deploy_post_tag
deploy_post_push
deploy_post_touch
deploy_pre
deploy_pre_deploy
deploy_post_translation
deploy_post_deploy
deploy_post_permission
deploy_post_init
deploy_post_sitemap
deploy_post_notify
deploy_post_deploy
deploy_post
deploy_finish

Copyright Sven Oostenbrink <support@ingiga.com>, Johan Geuze";

require_once(__DIR__.'/../../libs/startup.php');

cli_only(true);
load_libs('init,deploy');

log_console(tr('Starting deploy of project ":project"', array(':project' => PROJECT)), 'white');

/*
 * Ensure we're not running on the production environment.
 * Deployment is always done to targets, and production is always a target, we cannot deploy from a target to a target
 */
if(ENVIRONMENT == 'production') {
    throw new bException('You are running the deploy script on production environment? Are you high?', 'warning/production');
}

/*
 * Check command line parameters
 */
$noinit              =   cli_argument('--no-init');
$nositemap           =   cli_argument('--no-sitemap');
$nohooks             =  (cli_argument('--no-hook')        or cli_argument('--no-hooks'));
$nosyntax            = !(cli_argument('--do-syntax')      or cli_argument('--do-parse'));
$nodeploy            =  (cli_argument('--no-deploy')      or cli_argument('--test'));
$noversion           = !(cli_argument('--up-version')     or cli_argument('--up-versions'));
$nocontent           = !(cli_argument('--do-content')     or cli_argument('--do-conten-tcheck'));
$nofixperms          =  (cli_argument('--no-fix-perms')   or cli_argument('--no-fix-permissions'));
$nofixstructure      =  (cli_argument('--no-fix-struct')  or cli_argument('--no-fix-structure'));
$all                 =  (cli_argument('--all')            or cli_argument('-a'));
$ignore              =  (cli_argument('--ignore-changes') or cli_argument('-i'));
$nocacheclear        =   cli_argument('--no-cache-clear');
$notranslate         =   cli_argument('--no-translate');
$ignore_php          =   cli_argument('--ignore-php');
$ignore_html         =   cli_argument('--ignore-html');
$ignore_rsync_errors =   cli_argument('--ignore-rsync-errors');

$send_content_photos =   cli_argument('--send-content-photos');
$send_content_texts  =   cli_argument('--send-content-texts');
$send_sitemap        =   cli_argument('--send-sitemap');

$notag               =  (cli_argument('--no-tag')        or cli_argument('--no-tags') or $noversion);
$nopush              =   cli_argument('--no-push');
$stash               =   cli_argument('--stash');
$notouch             =   cli_argument('--no-touch');

$nocompress          =   cli_argument('--no-compress');
$forcecompress       =   cli_argument('--force-compress');
$noparrallel         =   cli_argument('--no-parrallel');
$nonotify            =   cli_argument('nonotify');

$message             =   cli_argument('--message'       , true);
$continuersync       =   cli_argument('--continuer-sync', true);
$targets             =   cli_argument('--target'        , 'all', cli_argument('--targets', 'all'));
$nobomcheck          =   cli_argument('--no-bom-check');
$nobackup            =   cli_argument('--no-backup');
$dobackup            =   cli_argument('--do-backup');

$tilde               = '~'.date('Ymd-His');
$categories          =   cli_arguments();

foreach($categories as $category){
    if(substr($category, 0, 1) == '-'){
        throw new bException(tr('Invalid category ":category" specified', array(':category' => $category)), 'invalid');
    }
}

cli_no_arguments_left();

if(!$message and !$notag){
    throw new bException(tr('No tag message specified! please use ./scripts/base/deploy ..... message "commit message"'), 'warning/not-specified');
}



/*
 * Load deployment configuration
 */
include(ROOT.'config/deploy.php');

if(empty($_CONFIG['deploy'])){
    throw new bException(tr('No deploy configuration found'), 'warning/validation');
}



/*
 * Check target configuration availability
 */
if(!$targets){
    if(!$categories){
        throw new bException(tr('No target environment or environment categories specified!'), 'warning/not-specified');
    }

    /*
     * If we're going to deploy to production categories, ensure that we
     * either are on master or production branch, since we won't deploy
     * from any other branch (for safety)
     */
    if(in_array('production', $categories)){
        load_libs('git');
        $branch = git_branch();

        if($branch != 'production'){
            if(!FORCE){
                throw new bException(tr('Cannot deploy the current GIT branch ":branch" to production category. For safety, deployment to production environment is restricted to git "production" branch only', array(':branch' => $branch)), 'warning/validation');
            }

            /*
             * Notify about forced deploy!
             */
            notify('deploy', tr('DEPLOY WARNING! NON PRODUCTION BRANCH DEPLOYED TO PRODUCTION: Deployed branch ":branch" to production category for project ":project"', array(':branch' => $branch, ':project' => PROJECT)));
        }
    }

    /*
     * Get the targets from the specified categories
     */
    foreach(array_force($categories) as $category){
        foreach($_CONFIG['deploy'] as $target => $deploy){
            if(empty($deploy['categories'])) continue;

            $deploy['categories'] = array_force($deploy['categories']);

            if(in_array($category, $deploy['categories'])){
                $targets[] = $target;
            }
        }
    }

    if(empty($targets)){
        throw new bException(tr('The specified categories or targets ":categories" contain no configured deploy targets', array(':categories' => $categories)), 'warning/not-specified');
    }
}

if(count($targets) == 1){
    $targets = array_pop($targets);
}

if($targets === true){
    /*
     * "./scripts/base/deploy all" was used
     */
    $targets = 'all';
}

if($targets == 'all'){
    /*
     * Get all deployment targets
     */
    $targets = array_keys($_CONFIG['deploy']);
    log_console(tr('Deploying to ALL target environments ":targets"', array(':targets' => $targets)), 'yellow');

}elseif(is_array($targets)){
    log_console(tr('Deploying to specified target environments ":targets"', array(':targets' => str_force($targets, ', '))), 'yellow');

}else{
    log_console(tr('Deploying to specified target environment ":target"', array(':target' => str_force($targets))), 'yellow');
    $targets = array($targets);
}

if(!$targets){
    throw new bException('No deployment targets specified', 'warning/not-specified');
}



/*
 * Check if we dont have any changes that should be committed first
 */
if(!$ignore){
    if(!trim(shell_exec('git status | grep "nothing to commit" | wc -l'))) {
        if(!FORCE){
            if(!$stash){
                throw new bException('Git commit pending', 'warning/validation');
            }

            log_console(tr('Changes detected, git stashing changes before comming'), 'yellow');
            safe_exec('git stash');
        }

    }else{
        $stash = false;
    }
}



/*
 * If we're going to deploy to production environment, ensure that we
 * either are on master or production branch, since we won't deploy
 * from any other branch (for safety)
 */
if(in_array('production', $targets)){
    load_libs('git');
    $branch = git_branch();

    if($branch != 'production'){
        if(!FORCE){
            throw new bException(tr('Cannot deploy the current GIT branch ":branch" to production environment. For safety, deployment to production environment is restricted to git "production" branch only', array(':branch' => $branch)), 'warning/validation');
        }

        /*
         * Notify about forced deploy!
         */
        notify('deploy', tr('DEPLOY WARNING! NON PRODUCTION BRANCH DEPLOYED TO PRODUCTION: Deployed branch ":branch" to production environment for project ":project"', array(':branch' => $branch, ':project' => PROJECT)));
    }
}



/*
 * Do project BOM check
 */
if($nobomcheck){
    log_console(tr('Skipping BOM check due to "--no-bom-check" option'), 'yellow');

}else{
    log_console(tr('Executing BOM check'), 'white');
    script_exec('base/clearbom');
}



/*
 * Do a PHP syntax check on the entire project
 */
if($nosyntax){
    log_console(tr('Skipping PHP syntax check due to no "--do-syntax" command line parameter'), 'yellow');

}else{
    log_console(tr('Executing PHP syntax check'), 'white');

    exec('find . -type f -name "*.php"', $output);

    if(!is_array($output)){
        throw new bException('Syntax check failed', 'warning/validation');
    }

    if(!$output){
        throw new bException('No php files found.', 'warning/validation');
    }

    foreach($output as $file){
        if(substr($file, 0, 7) == './data/'){
            /*
             * Do not check PHP files in ROOT/data
             */
            continue;
        }

        exec('php -l '.ROOT.$file.' > /dev/null', $syntaxoutput, $return);

        if($return){
            throw new bException(tr('Content scan failed on file ":file" with ":error"', array(':file' => $file, ':error' => $syntaxoutput)), 'warning/validation');
        }

        cli_dot();
    }

    cli_dot(false);
    init_hook('deploy_post_content', $nohooks, array('exitcode' => $return));

}



/*
 * Do a project version revision upgrade
 */
if($noversion){
    log_console(tr('Skipping PHP version update due to no "--do-version" command line parameter'), 'yellow');

}else{
    log_console(tr('Executing PHP version update'), 'white');

    /*
     * Get version data
     */
    $oldversion = PROJECTCODEVERSION;
    $newversion = init_version_upgrade($oldversion, 'revision');

    /*
     * Update project configuration file
     */
    $data = file_get_contents(ROOT.'config/project.php');
    $data = preg_replace('/\''.$oldversion.'\'\);/', '\''.$newversion.'\');', $data);

    file_put_contents(ROOT.'config/project.php', $data);

    exec('cd '.ROOT.'; git add config/project.php; git commit -m "Upgraded project \"'.PROJECT.'\" version to \"'.$newversion.'\""');

    init_hook('deploy_post_version', $nohooks, array('oldversion' => $oldversion,
                                                     'newversion' => $newversion));

}



/*
 * Do system tag with the new version
 */
if($noversion or $notag){
    log_console(tr('Skipping git version tagging due to either no "--do-version" or no "--do-tag" command line parameters'), 'yellow');

}else{
    log_console(tr('Executing git version tagging'), 'white');

    passthru('cd '.ROOT.'; git tag -am "['.PROJECT.' / '.$newversion.'] '.$message.'" '.$newversion.';', $exitcode);

    if($exitcode){
        throw new bException('Git tagging failed with exit code "'.str_log($exitcode).'"', 'warning/git');
    }

    init_hook('deploy_post_tag', $nohooks, array('exitcode' => $exitcode));
}



/*
 * Do git push all changes and tags
 */
if($nopush){
    log_console(tr('Skipping git push for changes and tags due to no "--do-version" or no "--do-tag" or no "--do-push" command line parameters'), 'yellow');

}else{
    log_console(tr('Executing git push'), 'white');

    /*
     * Get current branch
     */
    $branch = trim(shell_exec('git rev-parse --abbrev-ref HEAD'));

    passthru('cd '.ROOT.'; git push origin '.$branch.' && git push origin '.$branch.' --tags', $exitcode);

    if($exitcode){
        throw new bException('Git push failed with exit code "'.str_log($exitcode).'"', 'warning/git');
    }

    init_hook('deploy_post_push', $nohooks, array('exitcode' => $exitcode));
}



/*
 * If version was upgraded, execute an init to avoid leaving the dev site inoperable
 */
if(!$noversion){
    log_console(tr('Project version revision was updated, executing init script to update project database'), 'white');
    passthru(ROOT.'script/base/init --env '.$target_environment, $exitcode);

    if($exitcode){
        throw new bException(tr('System init failed with exit code ":code"', array(':code' => $exitcode)), 'warning/init');
    }
}



/*
 * Run compress script
 */
if($nocompress){
    log_console(tr('Skipping file compress due to "--no-compress" command line parameter'), 'yellow');

}else{
    log_console(tr('Executing file compress script'), 'white');

    $option = '';

    if($forcecompress){
        /*
         * Compress script should be run with -f option
         */
        log_console(tr('Executing file compress script with force mode'), 'white');
        $option = ' -f';
    }

    try{
        script_exec('base/compress', $option);

    }catch(Exception $e){
        throw new bException('script_exec(): Failed to execute "'.str_log('base/compress').'"', $e);
    }

    /*
     * Compress script generates files that aren't git commited
     * so we must do a git commit for those files.
     */
    if(!trim(shell_exec('git status | grep "nothing to commit" | wc -l'))){
        log_console(tr('Changes detected from the compression script script, committing to git'), 'white');
        safe_exec('cd '.ROOT.'; git add www/cdn; git add www/en/pub; git add www/en/admin/pub; ');
        safe_exec('git commit -m "Deploy commit: compressed files changed"');

        if(!$nopush){
            passthru('cd '.ROOT.'; git push && git push --tags', $exitcode);
        }
    }
}



/*
 * Do code translation
 */
if($notranslate){
    log_console(tr('Skipping translations due to "--no-translate" option'), 'yellow');

}else{
    if($_CONFIG['language']['supported']){
        log_console(tr('Executing translations'), 'white');

        $options[] = 'translate';

        if($ignore_php){
            $options[] = '--ignore-php';
        }

        if($ignore_html){
            $options[] = '--ignore-html';
        }

        script_exec('base/translate', $options);
        init_hook('deploy_post_translation', $nohooks, array('languages' => $_CONFIG['language']['supported']));

    }else{
        log_console(tr('Not translating, not a multilingual site'), 'yellow');
    }
}



/*
 * Update the mtime of the entire project tree to ensure caching wont happen and the webserver will send out the new files
 */
if($notouch){
    log_console(tr('Skipping touch mtime update due to no "--no-touch" command line parameters'), 'yellow');

}else{
    log_console(tr('Executing touch on entire project tree updating all mtimes (Excluding ROOT/data/content/)'), 'white');

    passthru('cd '.ROOT.'; find . ! -path "./data/content/*" -exec touch {} \;', $exitcode);

    if($exitcode){
        throw new bException('Touch failed with exit code ":code"', array(':code' => $exitcode), 'warning/git');
    }

    init_hook('deploy_post_touch', $nohooks, array('exitcode' => $exitcode));
}



foreach($targets as $target_environment){
    if(!preg_match('/^[a-z0-9]+$/', $target_environment)){
        throw new bException('Invalid target environment name "'.str_log($target_environment).'" specified, can only contain alphanumeric characters', 'warning/invalid');
    }

    if(empty($_CONFIG['deploy'][$target_environment])){
        throw new bException('Unknown target environment "'.str_log($target_environment).'" specified', 'warning/unknown');
    }

    /*
     * Ensure that target environment configuration file is available.
     */
    if(!file_exists(ROOT.'config/'.$target_environment.'.php')){
        throw new bException('Target environment "'.str_log($target_environment).'" has no configuration file', 'warning/validation');
    }

    $deploy_config               = $_CONFIG['deploy'][$target_environment];
    $deploy_config['target_dir'] = unslash($deploy_config['target_dir']);

    array_ensure($deploy_config, 'target_user,target_server,target_port,target_dir,categories,modes,include_dirs,exclude_dirs,rsync_parrallel,sudo,user,group,dir_mode,file_mode,www_mode');

    if(!$deploy_config['target_user']){
        /*
         * No target user specified, use the current process user
         */
        load_libs('process');
        $deploy_config['target_user'] = process_get_user();
    }

    log_console(tr('Deploying to target environment ":target" on server ":server"', array(':target' => $target_environment, ':server' => $deploy_config['target_server'])), 'white');

    init_hook('deploy_pre', $nohooks, array('target_user'   => $deploy_config['target_user'],
                                            'target_port'   => $deploy_config['target_port'],
                                            'target_server' => $deploy_config['target_server'],
                                            'target_dir'    => $deploy_config['target_dir']));



    /*
     * Determine SUDO setup for this environment
     */
    $sudo        = '';
    $sudo_user   = '';
    $target_port = isset_get($deploy_config['target_port'], 22);

    if($deploy_config['sudo']){
        if($deploy_config['sudo'] === true){
            $sudo      = 'export SHELL=/bin/bash; sudo -s ';
            $sudo_user = 'export SHELL=/bin/bash; sudo -s ';

        }elseif(is_string($deploy_config['sudo'])){
            $sudo      = 'export SHELL=/bin/bash; sudo -s ';
            $sudo_user = 'export SHELL=/bin/bash; sudo -s -u '.$deploy_config['sudo'].' ';

        }else{
            throw new bException(tr('Invalid sudo configuration ":configuration" found for target environment ":target". It should be either true, false, or an (existing) username string', array(':configuration' => $deploy_config['sudo'], ':target' => $target_environment)), 'warning/invalid');
        }
    }



    /*
     * Do a content file check on the entire project
     */
    if($nocontent){
        log_console(tr('Skipping content file check due to "--no-content" command line parameter'), 'yellow');

    }else{
        log_console(tr('Executing content file check'), 'white');

        exec('grep load_content  www scripts -R', $output);

        if(!is_array($output)){
            throw new bException('Content scan failed', 'warning/failed');
        }

        if(!$output){
            throw new bException('No "load_content" found which is impossible, because the system library has it.', 'warning/validation');
        }

        /*
         * Extract a list of unique files
         */
        $files = array();

        foreach($output as $line){
            if(preg_match('/(.*?):.*?load_content\s*\(\s*\'(.*?)\'\s*,/i', $line, $matches)){
                /*
                 * Skip function definitions, comments, etc.
                 */
                if(empty($matches[2])){
                    /*
                     * Not a valid match, skip
                     */
                    continue;
                }

                $files[$matches[2]] = $matches[1];
            }
        }

        /*
         * Ensure content file availability
         */
        foreach($files as $file => $definedin){
            if(substr($definedin, 0, 14) == 'scripts/tests/'){
                continue;
            }

            if($_CONFIG['language']['supported']){
                foreach($_CONFIG['language']['supported'] as $code => $language){
                    log_console(tr('Searching for file ":file" on ":target"', array(':file' => $file, ':target' => $deploy_config['target_server'])));

                    exec('ssh -t -p '.$target_port.' '.$deploy_config['target_user'].'@'.$deploy_config['target_server'].' \''.$sudo.'ls '.($file = $deploy_config['target_dir'].'data/content/'.$code.'/'.$file.'.html').' 2>&1 /dev/null\'', $contentoutput, $return);

                    if($return){
                        throw new bException('Missing content file "'.str_log($file).'" for language "'.str_log($language).'", defined in "'.$definedin.'"', 'warning/validation');
                    }
                }
            }
        }

        init_hook('deploy_post_syntax', $nohooks, array('exitcode' => $return));
    }



    /*
     * Load environment specific configuration and override current config
     */
    log_console(tr('Starting deploy on ":date"', array(':date' => date('d M Y h:i'))), 'white');

    init_hook('deploy_pre_deploy', $nohooks, array('target_user'    => $deploy_config['target_user'],
                                                   'target_port'    => $deploy_config['target_port'],
                                                   'target_server'  => $deploy_config['target_server'],
                                                   'target_dir'     => $deploy_config['target_dir']));



    /*
     * In case of rsync_parrallel option, copy the target dir and use the copy for the rsync and file permissions update
     */
    if($noparrallel){
        log_console(tr('Deploying in non rsync parrallel mode due to "--no-parrallel" option'), 'yellow');
        $deploy_config['rsync_parrallel'] = false;
    }


    /*
     * Continue rsyncing a previously stopped deploy?
     */
    if($continuersync){
        if(!$deploy_config['rsync_parrallel']){
            throw new bException(tr('The continuersync option was specified which makes no sense when either the project does not support rsync_parrallel, or when rsync_parrallel has been disabled because of the command line option "noparrallel"'), 'warning/invalid');
        }

        /*
         * Validate $continuersync value
         */
        while(!preg_match('/^20\d{6}-\d{6}$/', $continuersync)){
            if(!preg_match('/^'.str_rfrom($deploy_config['target_dir'], '/').'~20\d{6}-\d{6}\/?$/', $continuersync)){
                throw new bException(tr('The specified continuersync option "'.str_log($continuersync).'" is invalid, it should be in the Ymd-His format, or targetpath~Ymd-His'), 'warning/invalid');
            }

            $continuersync = str_until(str_from($continuersync, '~'), '/');
        }
    }



    /*
     *
     */
    if($nobackup and $dobackup){
        throw new bException(tr('The options --do-backup and --no-backup cannot be used together'), 'warning/invalid');
    }

    if(!isset($deploy_config['auto_backup'])){
        $deploy_config['auto_backup'] = true;
    }

    if((!$deploy_config['auto_backup'] and !$dobackup) or $nobackup){
        log_console(tr('Not executing auto site backup, due to either configuration or --no-backup option'), 'yellow');

    }else{
        /*
         * Make a backup of website files and database
         */
        log_console(tr('Generating auto site and database backup'), 'white');

        load_libs('config');
        $config = config_get_for_environment($target_environment);

        /*
         * Does the project exist at all? or is it an initial deploy?
         */
        passthru('ssh -t -p '.$target_port.' '.$deploy_config['target_user'].'@'.$deploy_config['target_server'].' \''.$sudo.'mkdir /data/backups/'.date_convert(null, 'Ymd').' > /dev/null 2>&1', $exitcode);

        if($exitcode){
            throw new bException(tr('rsync_parrallel copy failed with exit code ":code"', array(':code' => $exitcode)), 'warning/rsync');
        }

        passthru('ssh -t -p '.$target_port.' '.$deploy_config['target_user'].'@'.$deploy_config['target_server'].' \''.$sudo.'mysqldump -p -K -R -n -e --dump-date --comments -B '.$config['db']['core']['db'].' | gzip > /data/backups/'.date_convert(null, 'Ymd').'/'.$config['db']['core']['db'].'.sql.gz', $exitcode);

        if($exitcode){
            throw new bException(tr('rsync_parrallel copy failed with exit code ":code"', array(':code' => $exitcode)), 'warning/rsync');
        }

        passthru('ssh -t -p '.$target_port.' '.$deploy_config['target_user'].'@'.$deploy_config['target_server'].' \''.$sudo.'tar -cjf /data/backups/'.date_convert(null, 'Ymd').'/'.basename($deploy_config['target_dir']).'.tgz '.$deploy_config['target_dir'], $exitcode);

        if($exitcode){
            throw new bException(tr('rsync_parrallel copy failed with exit code ":code"', array(':code' => $exitcode)), 'warning/rsync');
        }
    }



    /*
     *
     */
    if(!empty($deploy_config['rsync_parrallel'])){
        /*
         * Make a copy on the server, rsync that copy, then move that copy in place of the current version. This will cause less down time due to version differences
         */
        log_console(tr('Deploying in rsync to parrallel mode'), 'white');

        if($continuersync){
            /*
             * Search for existing copies
             */
            if(count(safe_exec('ssh -t -p '.$target_port.' '.$deploy_config['target_user'].'@'.$deploy_config['target_server'].' \''.$sudo.'ls '.($deploy_config['target_dir']).'~'.$continuersync.' 2> /dev/null \'', 2)) < 2){
                /*
                 * Does not exist
                 */
                throw new bException(tr('The specified continuesync path "'.str_log(($deploy_config['target_dir']).'~'.$continuersync).'" on the target environment "'.str_log($target_environment).'" does not exist'), 'warning/not-exist');
            }

            $tilde = '~'.$continuersync;
            log_console(tr('Continuing with specified copy ":copy" of current version', array(':copy' => $deploy_config['target_dir'].$tilde)), 'white');

        }else{
            log_console(tr('Creating copy of current version to ":target"', array(':target' => $deploy_config['target_dir'].$tilde)), 'white');

            /*
             * Does the project exist at all? or is it an initial deploy?
             */
            passthru('ssh -t -p '.$target_port.' '.$deploy_config['target_user'].'@'.$deploy_config['target_server'].' \''.$sudo.'ls '.$deploy_config['target_dir'].'\' > /dev/null 2>&1', $exitcode);

            if($exitcode){
                /*
                 * Doesn't exist!
                 */
                passthru('ssh -t -p '.$target_port.' '.$deploy_config['target_user'].'@'.$deploy_config['target_server'].' \''.$sudo.'mkdir '.$deploy_config['target_dir'].'\'', $exitcode);
            }

            passthru('ssh -t -p '.$target_port.' '.$deploy_config['target_user'].'@'.$deploy_config['target_server'].' \''.$sudo.'rm '.$deploy_config['target_dir'].$tilde.' -rf; '.$sudo.'cp -a '.$deploy_config['target_dir'].' '.$deploy_config['target_dir'].$tilde.'\'', $exitcode);

            if($exitcode){
                throw new bException(tr('rsync_parrallel copy failed with exit code ":code"', array(':code' => $exitcode)), 'warning/rsync');
            }
        }

        $deploy_config['target_dir'] .= $tilde;
    }



    /*
     * Do the deploy
     */
    if($nodeploy){
        log_console(tr('NOT deploying, due to "--no-deploy" or "--test" command line parameter'), 'yellow');

    }else{
        $exclude = ' --exclude="data/log" --exclude="data/ssh_keys/" --exclude=*~ --exclude="data/mocks" --exclude="data/templates" --exclude="tmp" --exclude="data/mock*" --exclude="data/uploads" --exclude="data/packages" --exclude=".git*" --exclude="/data/system"  --exclude="/data/tmp" --exclude="sitemaps" --exclude="sitemap.xml" ';
        $include = '';

        if(!$send_content_photos){
            $exclude .= ' --exclude="data/content/photos" ';
        }

        if($deploy_config['include_dirs']){
            foreach($deploy_config['include_dirs'] as $key => $dir) {
                $include .= ' --include="'.$dir.'" ';
            }
        }

        if(!$send_content_texts){
            if($_CONFIG['language']['supported']){
                foreach($_CONFIG['language']['supported'] as $code => $language){
                    $exclude .= ' --exclude="data/content/'.$code.'" ';
                }
            }
        }

        if($_CONFIG['language']['supported']){
            foreach($_CONFIG['language']['supported'] as $code => $language){
                if(!$send_sitemap){
                    $exclude .= ' --exclude="www/'.$code.'/sitemap*" ';
                }

                $exclude .= ' --exclude="www/'.$code.'/mock" ';
            }
        }

        if($deploy_config['exclude_dirs']){
            foreach($deploy_config['exclude_dirs'] as $key => $dir) {
                $exclude .= ' --exclude="'.$dir.'" ';
            }
        }

        log_console(tr('Deploying project to target server ":server" on path ":path"', array(':server' => $deploy_config['target_server'], ':path' => $deploy_config['target_dir'])), 'white');
        passthru('rsync -aczvAXHS --progress -p --force --delete '.($deploy_config['sudo'] ? '--rsync-path="sudo rsync" ' : '').'-e "ssh -p '.$deploy_config['target_port'].'" '.ROOT.' '.$deploy_config['target_user'].'@'.$deploy_config['target_server'].':'.$deploy_config['target_dir'].' '.$include.' '.$exclude, $exitcode);
        exec('ssh -t -p '.$target_port.' '.$deploy_config['target_user'].'@'.$deploy_config['target_server'].' \''.$sudo.'mkdir -p '.$deploy_config['target_dir'].'/data/system 2> /dev/null; '.$sudo.'touch '.$deploy_config['target_dir'].'/data/system/last_deploy\'', $contentoutput, $return);

        if($exitcode and !$ignore_rsync_errors){
            throw new bException('Rsync failed with exit code "'.str_log($exitcode).'"', 'warning/rsync');
        }

        init_hook('deploy_post_deploy', $nohooks, array('target_user'    => $deploy_config['target_user'],
                                                        'target_port'    => $deploy_config['target_port'],
                                                        'target_server'  => $deploy_config['target_server'],
                                                        'target_dir'     => $deploy_config['target_dir']));
    }



    /*
     * Fix structure
     */
    if($nofixstructure){
        log_console(tr('Skipping structure fix due to "--no-fix-structure" command line parameter'), 'yellow');

    }else{
        log_console(tr('Executing structure fix'), 'white');

        if(!empty($deploy_config['rsync_parrallel'])){
            passthru($command = 'ssh -t -p '.$target_port.' '.$deploy_config['target_user'].'@'.$deploy_config['target_server'].' \''.$sudo.$deploy_config['target_dir'].'/scripts/base/fix-structure --env '.$target_environment.' \'', $exitcode);

        }else{
            passthru($command = 'ssh -t -p '.$target_port.' '.$deploy_config['target_user'].'@'.$deploy_config['target_server'].' \''.$sudo.$deploy_config['target_dir'].'/scripts/base/fix-structure --env '.$target_environment.' \'', $exitcode);
        }

        if($exitcode){
            throw new bException('fix-permissions failed with exit code "'.str_log($exitcode).'"', 'warning/failed');
        }

        init_hook('deploy_post_permission', $nohooks, array('target_user'   => $deploy_config['target_user'],
                                                            'target_port'   => $deploy_config['target_port'],
                                                            'target_server' => $deploy_config['target_server'],
                                                            'target_dir'    => $deploy_config['target_dir']));
    }



    /*
     * Fix permissions
     */
    if($nofixperms){
        log_console(tr('Skipping file permission fix due to "--no-fix-permissions" command line parameter'), 'yellow');

    }else{
        log_console(tr('Executing file permission fix'), 'white');

        if(!empty($deploy_config['rsync_parrallel'])){
            passthru($command = 'ssh -t -p '.$target_port.' '.$deploy_config['target_user'].'@'.$deploy_config['target_server'].' \''.$sudo.$deploy_config['target_dir'].'/scripts/base/fix-permissions --env '.$target_environment.' \'', $exitcode);

        }else{
            passthru($command = 'ssh -t -p '.$target_port.' '.$deploy_config['target_user'].'@'.$deploy_config['target_server'].' \''.$sudo.$deploy_config['target_dir'].'/scripts/base/fix-permissions --env '.$target_environment.' \'', $exitcode);
        }

        if($exitcode){
            throw new bException(tr('fix-permissions failed with exit code ":code" while executing command ":command"', array(':code' => $exitcode, ':command' => $command)), 'warning/failed');
        }

        init_hook('deploy_post_permission', $nohooks, array('target_user'   => $deploy_config['target_user'],
                                                            'target_port'   => $deploy_config['target_port'],
                                                            'target_server' => $deploy_config['target_server'],
                                                            'target_dir'    => $deploy_config['target_dir']));
    }



    /*
     * From here, the target directory should be normal again
     */
    $deploy_config['target_dir'] = str_until($deploy_config['target_dir'], '~');



    /*
     * In case of rsync_parrallel option, move the copy back in place, and remove the original
     */
    if(!empty($deploy_config['rsync_parrallel'])){
        log_console(tr('Moving new version in place'), 'white');
        passthru('ssh -t -p '.$target_port.' '.$deploy_config['target_user'].'@'.$deploy_config['target_server'].' \''.$sudo.'mv '.$deploy_config['target_dir'].' '.$deploy_config['target_dir'].$tilde.'_old; '.$sudo.'mv '.$deploy_config['target_dir'].$tilde.' '.$deploy_config['target_dir'].'\'', $exitcode);

        if($exitcode){
            throw new bException('Moving new version in place failed with exit code "'.str_log($exitcode).'"', 'warning/failed');
        }

        log_console(tr('Deleting old version'), 'white');
        passthru('ssh -t -p '.$target_port.' '.$deploy_config['target_user'].'@'.$deploy_config['target_server'].' \''.$sudo.'rm '.$deploy_config['target_dir'].$tilde.'_old -rf\'', $exitcode);

        if($exitcode){
            throw new bException('Deleting old version in place failed with exit code "'.str_log($exitcode).'"', 'warning/failed');
        }
    }



    /*
     * Execute init on target
     */
    if($noinit){
        log_console(tr('Skipping target init due to "--no-init" command line parameter'), 'yellow');

    }else{
        log_console(tr('Executing init on target server with environment ":env"', array(':env' => $target_environment)), 'white');
        passthru($command = 'ssh -t -p '.$target_port.' '.$deploy_config['target_user'].'@'.$deploy_config['target_server'].' \''.$sudo.$deploy_config['target_dir'].'/scripts/base/init --env '.$target_environment.' \'', $exitcode);

        if($exitcode){
            throw new bException('Target version init failed with exit code "'.str_log($exitcode).'"', 'warning/init');
        }

        init_hook('deploy_post_init', $nohooks, array('target_user'     => $deploy_config['target_user'],
                                                      'target_port'     => $deploy_config['target_port'],
                                                      'target_server'   => $deploy_config['target_server'],
                                                      'target_dir'      => $deploy_config['target_dir']));
    }


// :DELETE: Sitemaps are no longer updated on deploy, this entire code has become obsolete and only causes crashes upon deploy. Remove ASAP
    ///*
    // * Auto rebuild the sitemap?
    // */
    //if($nositemap){
    //    log_console(tr('Skipping auto sitemap deploy due to "--no-sitemap" command line parameter'), 'yellow');
    //
    //}else{
    //    log_console(tr('Executing sitemap scan and deploy on target server'), 'white');
    //
    //    passthru($command = 'ssh -t -p '.$target_port.' '.$deploy_config['target_user'].'@'.$deploy_config['target_server'].' \''.$sudo_user.$deploy_config['target_dir'].'/scripts/base/sitemap scan --env '.$target_environment.' \'', $exitcode);
    //
    //    if($exitcode){
    //        throw new bException('Target sitemap scan failed with exit code "'.str_log($exitcode).'"', 'target_sitemap_scan');
    //    }
    //
    //    if($_CONFIG['language']['supported']){
    //        foreach($_CONFIG['language']['supported'] as $language){
    //            passthru($command = 'ssh -t -p '.$target_port.' '.$deploy_config['target_user'].'@'.$deploy_config['target_server'].' \''.$sudo_user.$deploy_config['target_dir'].'/scripts/base/sitemap deploy   html '.$language.' --env '.$target_environment.' \'', $exitcode);
    //
    //            if($exitcode){
    //                throw new bException('Target sitemap HTML build failed with exit code "'.str_log($exitcode).'"', 'target_sitemap_html');
    //            }
    //
    //            passthru($command = 'ssh -t -p '.$target_port.' '.$deploy_config['target_user'].'@'.$deploy_config['target_server'].' \''.$sudo_user.$deploy_config['target_dir'].'/scripts/base/sitemap deploy    xml '.$language.' --env '.$target_environment.' \'', $exitcode);
    //
    //            if($exitcode){
    //                throw new bException('Target sitemap XML build failed with exit code "'.str_log($exitcode).'"', 'target_sitemap_xml');
    //            }
    //
    //            passthru($command = 'ssh -t -p '.$target_port.' '.$deploy_config['target_user'].'@'.$deploy_config['target_server'].' \''.$sudo_user.$deploy_config['target_dir'].'/scripts/base/sitemap deploy robots '.$language.' --env '.$target_environment.' \'', $exitcode);
    //
    //            if($exitcode){
    //                throw new bException('Target sitemap robots build failed with exit code "'.str_log($exitcode).'"', 'target_sitemap_robots');
    //            }
    //        }
    //    }
    //
    //    init_hook('deploy_post_sitemap', $nohooks, array('exitcode' => $exitcode));
    //}

    /*
     * Send notifications
     */
    if($nonotify){
        log_console(tr('Skipping deploy notifications due to "--no-notify" command line parameter'), 'yellow');

    }else{
        log_console(tr('Executing deploy notifications'), 'white');

        notify('deploy', 'Deployed project "'.PROJECT.'" with languages "'.str_log(implode(', ', array_force($_CONFIG['language']['supported']))).'"');

        init_hook('deploy_post_notify', $nohooks, array('target_user'   => $deploy_config['target_user'],
                                                        'target_port'   => $deploy_config['target_port'],
                                                        'target_server' => $deploy_config['target_server'],
                                                        'target_dir'    => $deploy_config['target_dir']));
    }

    /*
     * Cache clear
     */
    if($nocacheclear){
        log_console(tr('Skipping cache clear due to "--no-cache-clear" command line parameter'), 'yellow');

    }else{
        log_console(tr('Executing cache clear'), 'white');

        passthru('ssh -t -p '.$target_port.' '.$deploy_config['target_user'].'@'.$deploy_config['target_server'].' \''.$sudo.$deploy_config['target_dir'].'/scripts/base/cache clear --env '.$target_environment.'\'', $exitcode);

        if($exitcode){
            throw new bException('Cache clear failed with exit code "'.str_log($exitcode).'"', 'warning/failed');
        }
    }

    if($stash){
        log_console(tr('Git stashed changes detected, unstashing'), 'yellow');
        safe_exec('git stash pop');
    }


    /*
     * Done!
     */
    log_console(tr('Finished deploy for project ":project" environment ":env"', array(':project' => PROJECT, ':env' => $target_environment)), 'green');

    init_hook('post_deploy', $nohooks, array('target_user'   => $deploy_config['target_user'],
                                             'target_port'   => $deploy_config['target_port'],
                                             'target_server' => $deploy_config['target_server'],
                                             'target_dir'    => $deploy_config['target_dir']));
}


/*
 * We're all done here!
 */
init_hook('deploy_finish', $nohooks, array('target_user'    => $deploy_config['target_user'],
                                           'target_port'    => $deploy_config['target_port'],
                                           'target_server'  => $deploy_config['target_server'],
                                           'target_dir'     => $deploy_config['target_dir']));
cli_run_once_local(true);
?>
