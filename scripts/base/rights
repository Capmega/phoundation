#!/usr/bin/php
<?php
/*
 * This script manages the available rights
 */
$usage = "./scripts/base/rights list\n".
         "./scripts/base/rights create --name NAME --description DESCRIPTION\n".
         "./scripts/base/rights modify ID|NAME --name NAME --description DESCRIPTION\n".
         "./scripts/base/rights delete|undelete|erase ID|NAME ID|NAME ...\n".
         "./scripts/base/rights for USER\n";

$help  = "This is the rights management script";

require_once(dirname(__FILE__).'/../../libs/startup.php');

load_libs('user,rights');

switch(cli_method()){
    case 'list':
        cli_log('Showing currently available rights', 'white');

        $limit   = 200;

        $r       = sql_query('SELECT `name`,
                                     `status`,
                                     `description`

                              FROM   `rights`'.($limit ? ' LIMIT '.$limit : ''));

        cli_log(str_size('Name', 20).' '.str_size('Status', 16).' Description', 'cyan');

        while($right = sql_fetch($r)){
            cli_log(str_size($right['name'], 20).' '.str_size(status($right['status']), 16).' '.$right['description']);
        }

        break;

    case 'for':
        $users_id = cli_argument(1);
        cli_no_arguments_left();

        if(!$users_id){
            throw new bException(tr('No user specified'), 'not-specified');
        }

        $user = sql_get('SELECT `id`,
                                `name`,
                                `username`,
                                `email`

                         FROM   `users`

                         WHERE  `id`   = :id
                         OR     `name` = :name', array(':id'   => $users_id,
                                                       ':name' => $users_id));

        if(!$user){
            throw new bException(tr('Specified user ":user" does not exist', array(':user' => $users_id)), 'not-exist');
        }

        cli_log(tr('Showing rights for user ":user"', array(':user' => name($user))), 'white');

        $list = sql_list('SELECT    `rights`.`name`,
                                    `rights`.`description`

                          FROM      `users_rights`

                          LEFT JOIN `rights`
                          ON        `rights`.`id`             = `users_rights`.`rights_id`

                          WHERE     `users_rights`.`users_id` = :users_id',

                          array(':users_id' => $user['id']));

        if(!$list){
            cli_log(tr('This user has no rights assigned'), 'yellow');

        }else{
            cli_log(str_size('Name', 16).'Description', 'cyan');

            foreach($list as $name => $description){
                cli_log(str_size($name, 16).$description);
            }
        }

        break;

    case 'create':
        try{
            $right = cli_arguments('--name,--description');
            $right = rights_validate($right);

            cli_no_arguments_left();

            sql_query('INSERT INTO `rights` (`createdby`, `name`, `description`)
                       VALUES               (:createdby , :name , :description)',

                       array(':createdby'   => isset_get($_SESSION['user']['id']),
                             ':name'        => $right['name'],
                             ':description' => $right['description']));

            cli_log(tr('Created new right ":right"', array(':right' => $right['name'])), 'green');
            break;

        }catch(Exception $e){
            throw new bException(tr('Failed to create new right'), $e);
        }

        break;

    case 'modify':
        try{
            $old_right = cli_argument(1);

            if(!$old_right){
                throw new bException(tr('No right specified'), 'not-specified');
            }

            $right = cli_arguments('name,description');

            cli_no_arguments_left();

            $old_right = sql_get('SELECT `id`,
                                         `name`,
                                         `description`

                                  FROM   `rights`

                                  WHERE  `id`   = :id
                                  OR     `name` = :name', array(':id'   => $old_right,
                                                                ':name' => $old_right));

            if(!$old_right){
                throw new bException(tr('Specified right ":right" does not exist', array(':right' => $old_right)), 'not-specified');
            }

            $right = rights_validate($right, $old_right);

            sql_query('UPDATE `rights`

                       SET    `modifiedon`  = NOW(),
                              `modifiedby`  = :modifiedby,
                              `name`        = :name,
                              `description` = :description

                       WHERE  `id`          = :id',

                       array(':modifiedby'  => isset_get($_SESSION['user']['id']),
                             ':name'        => $right['name'],
                             ':description' => $right['description'],
                             ':id'          => $right['id']));

            /*
             * Now also update the cached right names
             */
            sql_query('UPDATE `users_rights`

                       SET    `name` = :name

                       WHERE  `id`   = :id',

                       array(':id'   => $right['id'],
                             ':name' => $right['name']));

            cli_log(tr('Modified right ":right"', array(':right' => $right['name'])), 'green');
            break;

        }catch(Exception $e){
            throw new bException(tr('Failed to modify right'), $e);
        }

        break;

    case 'delete':
        $rights = arguments();

        if(empty($rights)){
            throw new bException(tr('No rights specified'), 'not-specified');
        }

        $in_name = sql_in($rights, 'name');
        $in_id   = sql_in($rights, 'id');

        if(FORCE){
            $status = '';

        }else{
            $status = ' AND `status` IS NULL ';
        }

        $r  = sql_query('UPDATE `rights`

                         SET    `status` = "deleted"

                         WHERE  `name` IN ('.implode(',', array_keys($in_name)).')
                         OR     `id`   IN ('.implode(',', array_keys($in_id)).')'.$status,

                         array_merge($in_name, $in_id));

        switch(!$r->rowCount()){
            case 0:
                cli_log(tr('Not deleted any rights'), 'error');
                break;

            case count($rights):
                cli_log(tr('Deleted only ":count" rights from the specified ":specified" rights', array(':count' => $r->rowCount(), ':specified' => count($rights))), 'yellow');
                break;

            default:
                cli_log(tr('Deleted ":count" rights', array(':count' => $r->rowCount())), 'green');
        }

        break;

    case 'undelete':
        $rights = arguments();

        if(empty($rights)){
            throw new bException(tr('No rights specified'), 'not-specified');
        }

        $in_name = sql_in($rights, 'name');
        $in_id   = sql_in($rights, 'id');

        if(FORCE){
            $status = '';

        }else{
            $status = ' AND `status` = "deleted" ';
        }

        $r  = sql_query('UPDATE `rights`

                         SET    `status` = NULL

                         WHERE  `name` IN ('.implode(',', array_keys($in_name)).')
                         OR     `id`   IN ('.implode(',', array_keys($in_id)).')'.$status,

                         array_merge($in_name, $in_id));

        switch(!$r->rowCount()){
            case 0:
                cli_log(tr('Not undeleted any rights'), 'error');
                break;

            case count($rights):
                cli_log(tr('Undeleted only ":count" rights from the specified ":specified" rights', array(':count' => $r->rowCount(), ':specified' => count($rights))), 'yellow');
                break;

            default:
                cli_log(tr('Undeleted ":count" rights', array(':count' => $r->rowCount())), 'green');
        }

        break;

    case 'erase':
        $rights = arguments();

        if(empty($rights)){
            throw new bException(tr('No rights specified'), 'not-specified');
        }

        $in_name = sql_in($rights, 'name');
        $in_id   = sql_in($rights, 'id');

        if(FORCE){
            $status = '';

        }else{
            $status = ' AND `status` = "deleted" ';
        }

        /*
         * Get a list of all rights we're about to erase, because we'll need to erase references as well
         */
        $rights = sql_query('SELECT FROM `rights`

                             WHERE  `name` IN ('.implode(',', array_keys($in_name)).')
                             OR     `id`   IN ('.implode(',', array_keys($in_id)).')'.$status,

                         array_merge($in_name, $in_id));

        $in = sql_in($rights, 'id');

        unset($in_id);
        unset($in_name);

        /*
         * Now erase the rights
         */
        $r  = sql_query('DELETE FROM `rights`

                         WHERE  `id` IN ('.implode(',', array_keys($in)).')',

                         $in);

        if(!$r->rowCount()){
            cli_log(tr('Not erased any rights'), 'error');

        }else{
            switch($r->rowCount()){
                case 0:
                    break;

                case count($rights):
                    cli_log(tr('Erased only ":count" rights from the specified ":specified" rights', array(':count' => $r->rowCount(), ':specified' => count($rights))), 'yellow');
                    break;

                default:
                    cli_log(tr('Erased ":count" rights', array(':count' => $r->rowCount())), 'green');
            }

            /*
             * Rights are assigned to users and roles. Remove all references
             */
            $r  = sql_query('DELETE FROM `users_rights`

                             WHERE  `rights_id` IN ('.implode(',', array_keys($in)).')',

                             $in);

            cli_log(tr('Removed ":count" user assigned rights', array(':count' => $r->rowCount())), 'green');

            $r  = sql_query('DELETE FROM `roles_rights`

                             WHERE       `roles_id` IN ('.implode(',', array_keys($in)).')',

                             $in);

            cli_log(tr('Removed ":count" user assigned rights', array(':count' => $r->rowCount())), 'green');
        }

        break;

    case '':
        throw new bException(tr('No option specified'), 'not-specified');

    default:
        throw new bException(tr('Invalid option ":method" specified', array(':method' => cli_method())), 'unknown');
}
?>
