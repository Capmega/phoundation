#!/usr/bin/php
<?php
/*
 * This is an empty test script template
 */
$usage = './scripts/base/patch [option]';

$help  = 'This is the base / toolkit patch script. This script will check all
base and toolkit files available on this project for changes, and those
changes found will be converted into patches which will be transported
automatically to your local base and toolkit installations for further
processing

When run on base, this script will generate an error.

When run on toolkit, it will only execute the work on base files



ARGUMENTS



--stat                          - Will only show status of applied diffs';

require_once(dirname(__FILE__).'/../../libs/startup.php');

cli_only();
load_libs('git,patch,file');

$stat = cli_argument('--stat');
cli_no_arguments_left();



/*
 *
 */
if(!PROJECT){
    throw new bException(tr('This project has no project name!'), 'invalid');
}

if(PROJECT == 'INGIGA_TOOLKIT'){
    $base_only = true;
}



/*
 * Determine what type of project this is
 */
if(file_exists(ROOT.'www/en/role.php') and file_exists(ROOT.'www/en/roles.php')){
    $type = 'admin';

}elseif(file_exists(ROOT.'www/en/role.php') and file_exists(ROOT.'www/en/roles.php')){
    $type = 'normal';

}else{
    throw new bException(tr('Failed to find role.php and roles.php files to identify website type'), 'not-exist');
}



/*
 * Prepare patch paths, must exist and be empty
 */
$base_path    = patch_get_base_location();
$toolkit_path = patch_get_toolkit_location();



/*
 * Ensure that base and toolkit have no pending changes
 */
if(git_status($base_path)){
    throw new bException(tr('The base project has pending git changes'), 'has-changes');
}

if(!$base_only){
    if(git_status($toolkit_path)){
        throw new bException(tr('The toolkit project has pending git changes'), 'has-changes');
    }
}



/*
 *
 */
$files = git_status(ROOT);

foreach($files as $file => $status){
    if($status != 'modified') continue;
    $changed = false;

    log_console(tr('Checking file ":file"', array(':file' => $file)));

    ///*
    // * Check if file is possibly base
    // */
    //if(preg_match('/www\/[a-z-_]+\.php/', $file)){
    //    /*
    //     * Files for multilingual websites
    //     */
    //
    //}

    if(preg_match_all('/www\/[a-z]{2}\/(admin\/)?[a-z-_]+\.php/', $file, $matches)){
        if($type == 'admin'){
            /*
             * These are toolkit UI files
             */
            if(patch_file_exists_in_base($file)){
                log_console('Identified file as toolkit');

            }
        }
    }

    if(preg_match('/libs\/[a-z-_]+\.php/', $file)){
        /*
         * These are library files, most likely base, possibly toolkit
         */
        if(patch_file_exists_in_base($file)){
            log_console('Identified file as base');
            patch($file, $base_path);
        }
    }

    if(preg_match('/libs\/handlers\/[a-z-_]+\.php/', $file)){
        /*
         * These are library files, most likely base, possibly toolkit
         */
        if(patch_file_exists_in_base($file)){
            log_console('Identified file as base');
            patch($file, $base_path);
        }
    }

    if(preg_match('/scripts\/base\/[a-z-]+/', $file)){
        log_console('Identified file as base');
        patch($file, $base_path);
    }

    if(preg_match('/config\/base\/[a-z-]+/', $file)){
        log_console('Identified file as base');
        patch($file, $base_path);
    }

    if(VERBOSE){
        log_console(tr('Processing file ":file"', array(':file' => $file)), ($changed ? 'green' : ''));

    }else{
        cli_dot(10, '.', ($changed ? 'green' : ''));
    }
}
?>
