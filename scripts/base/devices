#!/usr/bin/php
<?php
/*
 * This script manages the available devices
 */
$usage = './scripts/base/devices list
./scripts/base/devices scan PRODUCT_FILTER [SERVER]
./scripts/base/devices supported
./scripts/base/devices list
./scripts/base/devices show DEVICE_ID | DEVICE SERVER
./scripts/base/devices modify DEVICE_ID [--category CATEGORY] [--company COMPANY] [--branch BRANCH] [--department DEPARTMENT]
./scripts/base/devices enable|disable|delete|undelete|erase ID|NAME ID|NAME ...
./scripts/base/clear [TYPE]
./scripts/base/setup DEVICE_ID';

$help  = 'This is the devices management script. This script can be used to manage the
registered devices



METHODS



supported                       - Prints a list of the supported device types



list                            - List the available devices

    [--t, --type TYPE]          - Filter by the specified type. See method
                                  "supported" to get a list of supported types



show DEVICE                     - Show the specified device



scan [TYPES] [SERVERS]          - Scan the specified servers for the specified
                                  device types. If no device type was specified,
                                  all device types will be scanned. If no
                                  servers were specified, all servers will be
                                  scanned

                                  NOTE: The device scanning for certain devices
                                  may take a while. Document scanners can take
                                  10-15 per server to be scanned

    [--category CATEGORY]         Assign the found devices to the specified
                                  category

    [--company COMPANY]           Assign the found devices to the specified
                                  company

    [--branch BRANCH]             Assign the found devices to the specified
                                  branch

    [--department DEPARTMENT]     Assign the found devices to the specified
                                  department

    [--employee EMPLOYEE]         Assign the found devices to the specified
                                  employee

    [--customer CUSTOMER]         Assign the found devices to the specified
                                  customer

    [--provider PROVIDER]         Assign the found devices to the specified
                                  provider

    [--inventory INVENTORY_CODE]  Assign the found devices to the specified
                                  inventory code



modify [ID]                     - Update the specified device

    [--category CATEGORY]         Assign the specified device to the specified
                                  category

    [--company COMPANY]           Assign the specified device to the specified
                                  company

    [--branch BRANCH]             Assign the specified device to the specified
                                  branch

    [--department DEPARTMENT]     Assign the specified device to the specified
                                  department

    [--employee EMPLOYEE]         Assign the specified device to the specified
                                  employee

    [--customer CUSTOMER]         Assign the specified device to the specified
                                  customer

    [--provider PROVIDER]         Assign the specified device to the specified
                                  provider

    [--inventory INVENTORY_CODE]  Assign the specified device to the specified
                                  inventory code



disable DEVICES                 - Disable the specified devices. After this, the
                                  devices will have status "disabled", will show
                                  up by default with the "list" method, but can
                                  not be used by the system



enable DEVICES                  - Disable the specified devices. After this, the
                                  devices will have status "NULL", will show
                                  up by default with the "list" method, and can
                                  be used by the system



delete DEVICES                  - Disable the specified devices. After this, the
                                  devices will have status "deleted", will show
                                  up by default with the "list" method, but can
                                  not be used by the system



undelete DEVICES                - Disable the specified devices. After this, the
                                  devices will have status "NULL", will show
                                  up by default with the "list" method, and can
                                  be used by the system



erase DEVICES                   - Erase the specified devices



clear [TYPE]                    - Erase the specified TYPE type devices from the
                                  database. If no TYPE was specified, all
                                  devices will be erased



setup DEVICE                    - Setup the specified device by automatically
                                  installing the required drivers (EXPERIMENTAL)';

require_once(__DIR__.'/../../libs/startup.php');
load_libs('devices');

switch (cli_method()) {
    case 'list':
        $type = cli_argument('-t,--type', true);
        cli_no_arguments_left();

        if ($type) {
            $type  = devices_validate_types($type);
            $where = ' WHERE (`devices`.`status` IS NULL OR `devices`.`status` != "_new")
                       AND    `devices`.`type` = :type';

            $execute[':type'] = $type;

        } else {
            $execute = null;
            $where   = ' WHERE `devices`.`status` IS NULL
                         OR    `devices`.`status` != "_new"';
        }

        $devices = sql_query('SELECT    `devices`.`id`,
                                        `devices`.`status`,
                                        `devices`.`servers_id`,
                                        `devices`.`manufacturer`,
                                        `devices`.`type`,
                                        `devices`.`model`,
                                        `devices`.`vendor`,
                                        `devices`.`vendor_string`,
                                        `devices`.`product`,
                                        `devices`.`product_string`,
                                        `devices`.`libusb`,
                                        `devices`.`bus`,
                                        `devices`.`device`,
                                        `devices`.`string`,
                                        `devices`.`default`,
                                        `devices`.`description`,
                                        `devices`.`name`,

                                        `servers`.`domain`,
                                        `servers`.`seodomain`

                              FROM      `devices`

                              LEFT JOIN `servers`
                              ON        `servers`.`id` = `devices`.`servers_id`

                              '.$where.'

                              ORDER BY  `servers`.`domain` ASC, `devices`.`type` ASC

                              '.sql_limit(),

                              $execute);

        if (!$devices->rowCount()) {
            log_console(tr('There are currently no devices available'), 'QUIET/yellow');

        } else {
            log_console(tr('Showing currently available devices'), 'QUIET/white');
            log_console(str_size(tr('#id'), 6, ' ', true).' '.str_size(tr('Name'), 20).' '.str_size(tr('Type'), 20).' '.str_size(tr('Domain'), 20).' '.str_size(tr('Status'), 12).' '.str_size(tr('Vendor'), 16).' '.str_size(tr('Manufacturer'), 16).' '.str_size(tr('Model'), 16).' '.str_size(tr('Bus'), 3).' '.str_size(tr('Device'), 3).' '.str_size(tr('Description'), 32).' '.tr('Device string'), 'QUIET/cyan');

            while ($device = sql_fetch($devices)) {
                log_console(str_size($device['id'], 6, ' ', true).' '.str_size(not_empty($device['name'], '-'), 20).' '.str_size($device['type'], 20).' '.str_size(not_empty($device['domain'], '-'), 20).' '.str_size(cli_status_color($device['status']), 12).' '.str_size($device['vendor_string'], 16).' '.str_size($device['manufacturer'], 16).' '.str_size($device['model'], 16).' '.str_size($device['bus'], 3).' '.str_size($device['device'], 3).' '.str_size($device['description'], 32).' '.$device['string']);
            }
        }

        break;

    case 'show':
        $id     = cli_argument(1);
        $server = cli_argument(2);

        cli_no_arguments_left();

        try {
            $device = devices_get($id, $server);

        }catch(Exception $e) {
            switch ($e->getRealCode()) {
                case 'invalid':
                    // FALLTHROUGH
                case 'not-specified':
                    throw $e->makeWarning(true);
            }
        }

        if (!$device) {
            throw new CoreException(tr('The specified device id ":id" does not exist', array(':id' => $id)), 'warning/not-exist');
        }

        ksort($device);

        foreach ($device as $key => $value) {
            log_console(cli_color($key.':', 'white').' '.$value);
        }

        $options = devices_list_option_keys($device['id']);

        if (!$options) {
            log_console();
            log_console(tr('This device does not have any configurable options available'), 'white');

        } else {
            log_console();
            log_console(tr('Configurable options:'), 'white');

            foreach ($options as $key => $values) {
                if (isset($values['default'])) {
                    $default = $values['default'];
                    unset($values['default']);

                } else {
                    $default = null;
                }

                log_console($key.':'.($default ? cli_color(' [ '.$default.' ]', 'cyan') : ''), 'white');

                foreach ($values as $value) {
                    log_console('        '.$value);
                }
            }
        }

        break;

    case 'modify':
        try {
            $assign_category   = cli_argument('--category'  , true);
            $assign_company    = cli_argument('--company'   , true);
            $assign_branch     = cli_argument('--branch'    , true);
            $assign_department = cli_argument('--department', true);
            $assign_employee   = cli_argument('--employee'  , true);
            $customer          = cli_argument('--customer'  , true);
            $assign_provider   = cli_argument('--provider'  , true);
            $assign_inventory  = cli_argument('--inventory' , true);
            $id                = cli_argument(1);

            cli_no_arguments_left();

            $device = devices_get($id);

            if (!$device) {
                throw new CoreException(tr('The specified device id ":id" does not exist', array(':id' => $id)), 'warning/not-exist');
            }

            /*
             * Validate category / company / branch / department / employee / customer / provider / inventory data
             */
            if ($assign_category) {
                load_libs('categories');
                $category = categories_get($assign_category);

                if (!$category) {
                    throw new CoreException(tr('The specified category ":category" does not exist', array(':category' => $assign_category)), 'not-exists');
                }
            }

            if ($assign_inventory) {
                load_libs('inventories');
                $inventory = inventories_get($assign_inventory);

                if (!$inventory) {
                    throw new CoreException(tr('The specified inventory ":inventory" does not exist', array(':inventory' => $assign_inventory)), 'not-exists');
                }
            }

            if ($assign_provider) {
                load_libs('providers');
                $provider = providers_get($assign_provider);

                if (!$provider) {
                    throw new CoreException(tr('The specified provider ":provider" does not exist', array(':provider' => $assign_provider)), 'not-exists');
                }
            }

            if ($customer) {
                load_libs('customers');
                $device['customers_id'] = customers_get(array('columns' => 'id',
                                                              'filters' => array('seoname' => $customer)));

                if (!$device['customers_id']) {
                    throw new CoreException(tr('The specified customer ":customer" does not exist', array(':customer' => $customer)), 'not-exists');
                }
            }

            if ($assign_company) {
                load_libs('companies');
                $company = categories_get($assign_company);

                if (!$company) {
                    throw new CoreException(tr('The specified company ":company" does not exist', array(':company' => $assign_company)), 'not-exists');
                }
            }

            if ($assign_branch) {
                if (empty($company)) {
                    throw new CoreException(tr('No company specified for the branch ":branch"', array(':branch' => $assign_branch)), 'not-specified');
                }

                $branch = categories_get_branch($assign_branch);

                if (!$branch) {
                    throw new CoreException(tr('The specified branch ":branch" does not exist in the company', array(':branch' => $assign_branch, ':company' => $company['name'])), 'not-exists');
                }
            }

            if ($assign_department) {
                if (empty($branch)) {
                    throw new CoreException(tr('No branch specified for the department ":department"', array(':department' => $assign_department)), 'not-specified');
                }

                $department = categories_get_department($assign_department);

                if (!$department) {
                    throw new CoreException(tr('The specified department ":department" does not exist in the branch ":branch"', array(':department' => $assign_department, ':branch' => $branch['name'])), 'not-exists');
                }
            }

            if ($assign_employee) {
                if (empty($department)) {
                    throw new CoreException(tr('No department specified for the employee ":employee"', array(':employee' => $assign_employee)), 'not-specified');
                }

                $employee = categories_get_employee($assign_employee);

                if (!$employee) {
                    throw new CoreException(tr('The specified employee ":employee" does not exist in the department ":department"', array(':employee' => $assign_employee, ':department' => $department['name'])), 'not-exists');
                }
            }

            devices_update($device);

        }catch(Exception $e) {
            switch ($e->getRealCode()) {
                case 'not-exists':
                    throw $e->makeWarning(true);
            }

            throw new CoreException(tr('Failed to scan for devices'), $e);
        }

        break;

    case 'supported':
        $devices = devices_validate_types();
        log_console(tr('Supported device types:'), 'QUIET/white');

        foreach ($devices as $device => $type) {
            log_console($device);
        }

        break;

    case 'scan':
        try {
            $assign_category   = cli_argument('--category'  , true);
            $assign_company    = cli_argument('--company'   , true);
            $assign_branch     = cli_argument('--branch'    , true);
            $assign_department = cli_argument('--department', true);
            $assign_employee   = cli_argument('--employee'  , true);
            $customer          = cli_argument('--customer'  , true);
            $assign_provider   = cli_argument('--provider'  , true);
            $assign_inventory  = cli_argument('--inventory' , true);
            $sudo              = cli_argument('--sudo');
            $types             = cli_argument(1);
            $servers           = cli_argument(2);
            $count             = 0;

            cli_no_arguments_left();

            /*
             * Validate category / company / branch / department / employee / customer / provider / inventory data
             */
            if ($assign_category) {
                load_libs('categories');
                $category = categories_get($assign_category);

                if (!$category) {
                    throw new CoreException(tr('The specified category ":category" does not exist', array(':category' => $assign_category)), 'not-exists');
                }
            }

            if ($assign_inventory) {
                load_libs('inventories');
                $inventory = inventories_get($assign_inventory);

                if (!$inventory) {
                    throw new CoreException(tr('The specified inventory ":inventory" does not exist', array(':inventory' => $assign_inventory)), 'not-exists');
                }
            }

            if ($assign_provider) {
                load_libs('providers');
                $provider = providers_get($assign_provider);

                if (!$provider) {
                    throw new CoreException(tr('The specified provider ":provider" does not exist', array(':provider' => $assign_provider)), 'not-exists');
                }
            }

            if ($customer) {
                load_libs('customers');
                $device['customers_id'] = customers_get(array('columns' => 'id',
                                                              'filters' => array('seoname' => $customer)));

                if (!$device['customers_id']) {
                    throw new CoreException(tr('The specified customer ":customer" does not exist', array(':customer' => $customer)), 'not-exists');
                }
            }

            if ($assign_company) {
                load_libs('companies');
                $company = categories_get($assign_company);

                if (!$company) {
                    throw new CoreException(tr('The specified company ":company" does not exist', array(':company' => $assign_company)), 'not-exists');
                }
            }

            if ($assign_branch) {
                if (empty($company)) {
                    throw new CoreException(tr('No company specified for the branch ":branch"', array(':branch' => $assign_branch)), 'not-specified');
                }

                $branch = categories_get_branch($assign_branch);

                if (!$branch) {
                    throw new CoreException(tr('The specified branch ":branch" does not exist in the company', array(':branch' => $assign_branch, ':company' => $company['name'])), 'not-exists');
                }
            }

            if ($assign_department) {
                if (empty($branch)) {
                    throw new CoreException(tr('No branch specified for the department ":department"', array(':department' => $assign_department)), 'not-specified');
                }

                $department = categories_get_department($assign_department);

                if (!$department) {
                    throw new CoreException(tr('The specified department ":department" does not exist in the branch ":branch"', array(':department' => $assign_department, ':branch' => $branch['name'])), 'not-exists');
                }
            }

            if ($assign_employee) {
                if (empty($department)) {
                    throw new CoreException(tr('No department specified for the employee ":employee"', array(':employee' => $assign_employee)), 'not-specified');
                }

                $employee = categories_get_employee($assign_employee);

                if (!$employee) {
                    throw new CoreException(tr('The specified employee ":employee" does not exist in the department ":department"', array(':employee' => $assign_employee, ':department' => $department['name'])), 'not-exists');
                }
            }

            devices_set_status('not-found');

            $servers_devices = devices_scan($types, $servers, $sudo);

            foreach ($servers_devices as $servers_id => $devices) {
                foreach ($devices as $device) {
                    /*
                     * Assign device to category / company / branch / department
                     */
                    $device['categories_id']  = isset_get($category['id']);
                    $device['companies_id']   = isset_get($company['id']);
                    $device['branches_id']    = isset_get($branch['id']);
                    $device['departments_id'] = isset_get($department['id']);
                    $device['employees_id']   = isset_get($employee['id']);
                    $device['providers_id']   = isset_get($provider['id']);

                    try {
                        $device = devices_insert($device, $servers_id);

                        if (empty($device['_exists'])) {
                            $count++;
                        }

                    }catch(Exception $e) {
                        /*
                         * Device failed to add. Log and continue to next device
                         */
                        log_console($e);
                        log_console(tr('Failed to add device ":device"', array(':device' => isset_get($device['string']))), 'yellow');
                    }
                }
            }

            if ($count) {
                log_console(tr('Added / updated ":count" devices', array(':count' => $count)), 'green');

            } else {
                log_console(tr('No devices added'), 'yellow');
            }

        }catch(Exception $e) {
            switch ($e->getRealCode()) {
                case 'not-exists':
                    throw $e->makeWarning(true);
            }

            throw new CoreException(tr('Failed to scan for devices'), $e);
        }

        break;

    case 'clear':
        $type = cli_argument(0);
        cli_no_arguments_left();

        $count = devices_clear($type);

        switch ($count) {
            case 0:
                log_console(tr('Not deleted any devices'), 'error');
                break;

            default:
                log_console(tr('Deleted ":count" devices', array(':count' => $count)), 'green');
        }

        break;

    case 'delete':
        $devices = cli_arguments();
        $in      = sql_in($devices, ':id');

        cli_no_arguments_left();

        if (empty($devices)) {
            throw new CoreException(tr('No devices specified'), 'warning/not-specified');
        }

        if (FORCE) {
            $status = '';

        } else {
            $status = ' AND `status` IS NULL ';
        }

        $r = sql_query('UPDATE `devices`

                        SET    `status` = "deleted"

                        WHERE  `id`   IN ('.sql_in_columns($in).')'.$status,

                        $in);

        switch (!$r->rowCount()) {
            case 0:
                log_console(tr('Not deleted any devices'), 'error');
                break;

            case count($devices):
                log_console(tr('Deleted only ":count" devices from the specified ":specified" devices', array(':count' => $r->rowCount(), ':specified' => count($devices))), 'yellow');
                break;

            default:
                log_console(tr('Deleted ":count" devices', array(':count' => $r->rowCount())), 'green');
        }

        break;

    case 'undelete':
        $devices = cli_arguments();
        $in      = sql_in($devices, ':id');

        cli_no_arguments_left();

        if (empty($devices)) {
            throw new CoreException(tr('No devices specified'), 'warning/not-specified');
        }

        if (FORCE) {
            $status = '';

        } else {
            $status = ' AND `status` IS NULL ';
        }

        $r = sql_query('UPDATE `devices`

                        SET    `status` = NULL

                        WHERE  `id`   IN ('.sql_in_columns($in).')'.$status,

                        $in);

        switch (!$r->rowCount()) {
            case 0:
                log_console(tr('Not undeleted any devices'), 'error');
                break;

            case count($devices):
                log_console(tr('Undeleted only ":count" devices from the specified ":specified" devices', array(':count' => $r->rowCount(), ':specified' => count($devices))), 'yellow');
                break;

            default:
                log_console(tr('Undeleted ":count" devices', array(':count' => $r->rowCount())), 'green');
        }

        break;

    case 'erase':
        $devices = cli_arguments();
        $in      = sql_in($devices, ':id');

        cli_no_arguments_left();

        if (FORCE) {
            $status = '';

        } else {
            $status = ' AND `status` IS NULL ';
        }

        switch (count($devices)) {
            case 0:
                throw new CoreException(tr('No devices specified'), 'warning/not-specified');

            case 1:
                if (isset_get($devices[1]) === 'all') {
                    $all = true;
                    $r   = sql_query('DELETE FROM `devices` WHERE TRUE '.$status);
                    break;
                }

                // FALLTHROUGH

            default:
                $in = sql_in($devices, 'id');
                $r  = sql_query('DELETE FROM `devices` WHERE `id` IN ('.sql_in_columns($in).')'.$status, $in);
        }

        if (!$r->rowCount()) {
            log_console(tr('Not erased any devices'), 'yellow');

        } else {
            if (isset_get($all)) {
                log_console(tr('Erased ":count" devices', array(':count' => $r->rowCount())), 'green');

            } else {
                switch ($r->rowCount()) {
                    case 0:
                        break;

                    case count($devices):
                        log_console(tr('Erased ":count" devices', array(':count' => $r->rowCount())), 'green');
                        break;

                    default:
                        log_console(tr('Erased only ":count" devices from the specified ":specified" devices', array(':count' => $r->rowCount(), ':specified' => count($devices))), 'yellow');
                }
            }
        }

        break;

    case 'setup':
        $type  = cli_argument(1);
        $brand = cli_argument(2);
        $model = cli_argument(3);

        cli_no_arguments_left();
        load_libs('drivers');

        drivers_setup($type, $brand, $model);
        break;

    case '':
        throw new CoreException(tr('No method specified'), 'no-method');

    default:
        throw new CoreException(tr('Unknown method ":method" specified', array(':method' => cli_method())), 'unknown-method');
}
?>
