#!/usr/bin/php
<?php
/*
 * This is the changes management script. This script can copy changes meant
 * for base or toolkit directly to the project so they can be committed there
 */
$usage = './scripts/base/changes [option]';

$help  = 'This is the base / toolkit changes patche script. This script will
check all base and toolkit files available on this project for changes, and
those changes found will be converted into patches which will be transported
automatically to your local base and toolkit installations for further
processing

When run on base, this script will generate an error.

When run on toolkit, it will only execute the work on base files



METHODS



status                          - Will show status of applied diffs. Implies
                                  --no-clean

patch                           - Will apply the diff patches to both base and toolkit. If either base or toolkit has changes,

  --create-only                 - Only create the patch files, do not apply
                                  them

  --no-clean                    - Do NOT clean up local base / toolkit changes
                                  after all patches have applied successfully';

require_once(dirname(__FILE__).'/../../libs/startup.php');

cli_only();
load_libs('git,patch,file');



/*
 * Define a list of files that should be skipped because they will very likely
 * be changed on the project level. List should be regex strings
 */
$skip = array('base'    => array(),
              'toolkit' => array('/www\/en\/(admin\/)?index\.php/',  // Admin index file
                                 '/logo.+?.(png|jpg)/'               // Site logos
                                 ));



/*
 * Test if we're on base or toolkit. This script cannot be used on base, and
 * if we're on toolkit, only check for base changes
 */
if(!PROJECT){
    throw new bException(tr('This project has no project name, perhaps you are trying to run this on the base project?'), 'invalid');
}

$base_only = (PROJECT == 'INGIGA_TOOLKIT');



/*
 * Determine what method to execute
 */
$method = cli_method();

switch($method){
    case 'status':
        cli_no_arguments_left();
        break;

    case 'diff':
        cli_no_arguments_left();
        break;

    case 'patch':
        $create_only = cli_argument('--create-only');
        $no_clean    = cli_argument('--no-clean');

        cli_no_arguments_left();
        break;

    case '':
        throw new bException(tr('No method specified'), 'no-method');

    default:
        throw new bException(tr('Unknown method ":method" specified', array(':method' => cli_method())), 'unknown-method');
}



/*
 * Determine what type of project this is
 */
if(file_exists(ROOT.'www/en/role.php') and file_exists(ROOT.'www/en/roles.php')){
    $type = 'intranet';
    log_console(tr('Detected that this website is intranet site...'), 'VERBOSE');

}elseif(file_exists(ROOT.'www/en/admin/role.php') and file_exists(ROOT.'www/en/admin/roles.php')){
    $type = 'normal';
    log_console(tr('Detected that this website is a normal site...'), 'VERBOSE');

}else{
    throw new bException(tr('Failed to find role.php and roles.php files to identify website type'), 'warning/not-exist');
}



/*
 * Prepare patch paths, must exist and be empty
 */
$paths['base']    = patch_get_base_location();
$paths['toolkit'] = patch_get_toolkit_location();



/*
 * Ensure that base and toolkit have no pending changes
 */
if(($method == 'patch') and !FORCE){
    if(git_status($paths['base'])){
        throw new bException(tr('The base project has pending git changes'), 'warning/has-changes');
    }

    if(empty($base_only)){
        if(git_status($paths['toolkit'])){
            throw new bException(tr('The toolkit project has pending git changes'), 'warning/has-changes');
        }
    }
}



/*
 * Get a list of all files that contain changes and separate them by base and toolkit sections
 */
$files    = git_status(ROOT);
$sections = array('base'    => array(),
                  'toolkit' => array());

switch($method){
    case 'status':
        break;

    case 'diff':
        log_console(tr('Gathering file changes'), 'QUIET/white', false);
        break;

    case 'patch':
        log_console(tr('Gathering file changes'), 'QUIET/white', false);
        break;
}

foreach($files as $file => &$status){
    try{
        if($status != 'modified') continue;

        log_console(tr('Checking file ":file"', array(':file' => $file)), 'VERBOSE');

        ///*
        // * Check if file is possibly base
        // */
        //if(preg_match('/www\/[a-z-_]+\.php/', $file)){
        //    /*
        //     * Files for multilingual websites
        //     */
        //
        //}

        if(preg_match_all('/www\/[a-z]{2}\/admin\/[a-z-_]+\.php/', $file)){
            /*
             * This is an admin UI file
             */
            if(!$base_only){
                if(patch_file_exists_in_toolkit(str_replace('admin/', '', $file))){
                    log_console(tr('Identified file as toolkit'), 'VERBOSE');
                    $sections['toolkit'][$file] = $status;
                }
            }

        }elseif(preg_match_all('/www\/[a-z]{2}\/[a-z-_]+\.php/', $file)){
            /*
             * This is an admin UI file
             */
            if($type == 'intranet'){
                if(patch_file_exists_in_toolkit(str_replace('admin/', '', $file))){
                    log_console(tr('Identified file as toolkit'), 'VERBOSE');
                    $sections['toolkit'][$file] = $status;
                }
            }

        }elseif(preg_match_all('/www\/[a-z]{2}\/pub\/.+/', $file, $matches)){
            /*
             * This is an admin UI pub file for an intranet site
             */
            if($type == 'intranet'){
                if(!$base_only){
                    if(patch_file_exists_in_toolkit(str_replace('admin/', '', $file))){
                        log_console(tr('Identified file as toolkit'), 'VERBOSE');
                        $sections['toolkit'][$file] = $status;
                    }
                }
            }

        }elseif(preg_match_all('/www\/[a-z]{2}\/pub\/admin\/.+/', $file, $matches)){
            /*
             * These are admin pub files (very likely toolkit)
             */
            if(!$base_only){
                if(patch_file_exists_in_toolkit(str_replace('admin/', '', $file))){
                    log_console(tr('Identified file as toolkit'), 'VERBOSE');
                    $sections['toolkit'][$file] = $status;
                }
            }

        }elseif(preg_match('/libs\/[a-z-_]+\.php/', $file)){
            /*
             * These are library files, most likely base, possibly toolkit
             */
            if(patch_file_exists_in_base($file)){
                log_console(tr('Identified file as base'), 'VERBOSE');
                $sections['base'][$file] = $status;
            }

        }elseif(preg_match('/libs\/handlers\/[a-z-_]+\.php/', $file)){
            /*
             * These are library files, most likely base, possibly toolkit
             */
            if(patch_file_exists_in_base($file)){
                log_console(tr('Identified file as base'), 'VERBOSE');
                $sections['base'][$file] = $status;
            }

        }elseif(preg_match('/scripts\/base\/[a-z-]+/', $file)){
            log_console(tr('Identified file as base'), 'VERBOSE');
            $sections['base'][$file] = $status;

        }elseif(preg_match('/config\/base\/[a-z-]+/', $file)){
            log_console(tr('Identified file as base'), 'VERBOSE');
            $sections['base'][$file] = $status;
        }

        cli_dot(1, 'green', '.', true);

    }catch(Exception $e){
        throw new bException(tr('Failed to build sections list'), $e);
    }
}

cli_dot(false, 'green', '.', true);



/*
 * Get the file changes in this project and pass over each file
 */
if(!$sections){
    log_console(tr('No base or toolkit files with changes were found!'), 'QUIET/green');
}

foreach($sections as $section => $list){
    switch($method){
        case 'status':
            log_console(tr('Showing modified files for section ":section"', array(':section' => $section)), 'QUIET/white');
            break;

        case 'diff':
            log_console(tr('Showing modified file diffs for section ":section"', array(':section' => $section)), 'QUIET/white');
            break;

        case 'patch':
            log_console(tr('Applying patches for ":section"', array(':section' => $section)), 'QUIET/white', false);
    }

    foreach($list as $file => &$status){
        try{
            $changed   = false;
            $skip_file = false;

            if($skip[$section]){
                foreach($skip[$section] as $regex){
                    if(preg_match($regex, $file)){
                        $skip_file = true;
                    }
                }
            }

            if($skip_file){
                continue;
            }

            switch($method){
                case 'status':
                    log_console(tr('  :file', array(':file' => $file)));
                    $skip_file = true;

                case 'diff':
                    log_console(tr('Showing diff for file ":file"', array(':file' => $file)), 'QUIET/white');
            }

            if($skip_file){
                continue;
            }

            /*
             * Patch or show diff
             */
            if($section == 'base'){
                patch($file, $paths[$section], ((($method == 'patch') and $create_only) ? 'create' : $method));
                $status = 'patched';

            }else{
                patch($file, $paths[$section], ((($method == 'patch') and $create_only) ? 'create' : $method), array($file => str_replace('admin/', '', $file)));
                $status = 'patched';
            }

            if($method == 'patch'){
                cli_dot(1, 'green', '.', true);
            }

        }catch(Exception $e){
            switch($e->getCode()){
                case 'failed':
                    /*
                     * git patching failed. Cleanup base and toolkit paths
                     */
                    git_clean($paths['base']   , true, true);
                    git_clean($paths['toolkit'], true, true);

                    git_checkout($paths['base']   , true, true);
                    git_checkout($paths['toolkit'], true, true);

                    $e = new bException(tr('Patching failed for file ":file", halting process, cleaned base and toolkit projects! Apply this file manually!', array(':file' => $file)), $e);
                    $e->setCode('no-trace');
                    throw $e;

                default:
                    throw $e;
            }
        }
    }

    cli_dot(false, 'green', '.', true);
}

unset($status);



/*
 * Patching was applied correctly! Delete changes for base and toolkit that have been sent
 */
if($method == 'patch'){
    if($no_clean or $create_only){
        log_console(tr('Not cleaning local changes due to --no-clean or --create-only option'), 'yellow');

    }else{
        log_console(tr('All files patched successfully. Cleaning local changes'), 'white', false);

        foreach($files as $file => $status){
            if($status === 'patched'){
                log_console(tr('Cleaning up file ":file"', array(':file' => $file)), 'VERBOSE');
                cli_dot(1, 'green', '.', true);
                git_checkout($file);
            }
        }

        cli_dot(false, 'green', '.', true);
    }
}
?>
