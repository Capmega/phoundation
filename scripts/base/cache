#!/usr/bin/php
<?php
/*
 * This script can be used to access various cache functions
 */
$usage = './scripts/base/cache clear [key KEY] [namespace NAMESPACE]
./scripts/base/cache size
./scripts/base/cache files
./scripts/base/cache info
./scripts/base/cache find (SOON!)';

$help  = 'This is the cache management script



METHODS



clear                           - Clear the complete cache

clear [--key KEY]               - Clear the specified key from the cache

clear [--namespace NAMESPACE]   - Clear the specified namespace from the cache

size                            - Returns the total size of cache in use

count                           - Returns the total amount of objects cache

files                           - Alias for count

info                            - Return both size and count information';

require_once(__DIR__.'/../../libs/startup.php');

switch (cli_method()) {
    case 'clear':
        /*
         * Clear the cache
         */
        $key       = cli_argument('--key');
        $namespace = cli_argument('--namespace');
        cli_no_arguments_left();

        cache_clear($key, $namespace);

        load_libs('blogs');
        blogs_update_urls();
        log_console('Cleared caches', 'green');
        break;

    case 'size':
        cli_no_arguments_left();

        $size = cache_size();
        log_console(tr('The cache is ":size" large', array(':size' => bytes($size))), 'white');
        break;

    case 'count':
        // FALLTHROUGH
    case 'files':
        cli_no_arguments_left();

        $count = cache_count();
        log_console(tr('The cache contains ":count" objects', array(':count' => $count)), 'white');
        break;

    case 'info':
        cli_no_arguments_left();

        $size   = cache_size();
        $count  = cache_count();
        $method = $_CONFIG['cache']['method'];

        log_console(tr('The cache contains ":count" objects, and is ":size" large', array(':count' => $count, ':size' => bytes($size))), '', 'white');

        switch ($method) {
            case 'file':
                log_console(tr('The cache is using the filesystem for storage')                   , 'white');
                log_console(tr('The cache directory is ":ROOTdata/cache"', array(':ROOT' => ROOT)), 'white');
                break;

            case 'memcached':
                log_console(tr('The cache is using memcached for storage'), '', 'white');
                break;

            default:
                throw new CoreException(tr('Unknown cache method ":method" configured in $_CONFIG[cache][method]'. array(':method' => $_CONFIG['cache']['method'])), 'warning/unknown');
        }

        break;

    case 'find':
// :TODO: Implement
        break;

    case '':
        throw new CoreException(tr('No method specified, please specify one of "clear", "scan", or "translate"'), 'no-method');

    default:
        throw new CoreException(tr('Unknown method ":method" specified, please specify one of "clear", "scan", or "translate"', array(':method' => cli_method())), 'unknown');
}
?>
