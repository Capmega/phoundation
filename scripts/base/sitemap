#!/usr/bin/php
<?php
/*
 * This script creates sitemap files for all languages
 *
 * Idea taken from http://yoast.com/xml-sitemap-php-script/
 * Written by Sven Oostenbrink
 *
 * Copyright (C), 2011 - 2012 - Sven Oostenbrink, so.oostenbrink@gmail.com
 *
 * Sitemap scanner should honor robots.txt and meta robots noindex!
 * Sitemap scanner should extract descriptions from pages
 */
$usage = './scripts/base/sitemap clear
./scripts/base/sitemap info
./scripts/base/sitemap list files
./scripts/base/sitemap list entries
./scripts/base/sitemap update
./scripts/base/sitemap generate';

$help  = 'This sitemap script can create new sitemap files



METHODS



clear                           - Clear all sitemap entries from the database

info                            - Show information on how the sitemap files will
                                  be generated

list files                      - List all files that will be generated by the
                                  current sitemap entries

list entries                    - List all current sitemap entries in the
                                  database

    --groups GROUPS             - Only show entries that are member of the
                                  specified groups

    --only-groups               - Only show the available groups

generate                        -

update                          - ';

require_once(__DIR__.'/../../libs/startup.php');

cli_only(true);
load_libs('sitemap');

if(empty($_CONFIG['sitemap']['enabled'])){
    log_console(tr('Sitemap has been disabled in the configuration'), 'yellow');
    die(1);
}

switch(cli_method()){
    case 'clear':
        /*
         * Clear sitemap database.
         */
        if(cli_method(1)){
            log_console(tr('Clearing sitemap data for group ":group"', array(':group' => cli_method(1))), 'white');

        }else{
            log_console(tr('Clearing sitemap data'), 'white');
        }

        cli_no_arguments_left();
        sitemap_clear(cli_method(1));

        log_console(tr('Sitemap data has been cleared'), 'green');

        break;

    case 'info':
        log_console(tr('Multi language: '), 'white', false);

        if($_CONFIG['language']['supported']){
            log_console(tr('Yes'));

        }else{
            log_console(tr('No'));
        }

        log_console(tr('Multi domain: '), 'white', false);

        $files = sitemap_list_files();

        if(!count($files)){
            log_console(tr('Unknown, sitemap table empty'));

        }elseif(count($files) == 1){
            log_console(tr('No'));

        }elseif(count($files) <= count($_CONFIG['language']['supported'])){
            log_console(tr('No'));

        }else{
            log_console(tr('Yes'));
        }

        log_console(tr('Amount of files: '), 'white', false);
        log_console(count($files));

        log_console(tr('Amount of entries: '), 'white', false);
        log_console(sql_get('SELECT COUNT(`id`) FROM `sitemaps_data` WHERE `status` IS NULL'));
        break;

    case 'list':
        switch(cli_method(1)){
            case 'files':
                $id    = 0;
                $files = sitemap_list_files();
                array_unshift($files, array('language' => '--',
                                            'file'     => 'sitemap (index)',
                                            'path'     => ROOT.'www/sitemap.xml'));

                if(!count($files)){
                    log_console(tr('There are currently no sitemap entries registered'), 'QUIET/yellow');

                }else{
                    log_console(str_size(tr('#id'), 6).' '.str_size(tr('Language'), 8).' '.str_size(tr('File'), 24).' '.str_size(tr('Path'), 80), 'QUIET/cyan');

                    foreach($files as $file){
                        log_console(str_size($id++, 6).' '.str_size($file['language'], 8).' '.str_size($file['file'], 24).' '.str_size($file['path'], 80));
                    }
                }

                break;

            case 'entries':
                /*
                 * List currently available sitemap entries in database
                 */
                $entries = sql_query('SELECT `id`,
                                             `createdon`,
                                             `createdby`,
                                             `url`,
                                             `priority`,
                                             `page_modifiedon`,
                                             `change_frequency`,
                                             `language`,
                                             `group`,
                                             `file`

                                      FROM   `sitemaps_data`

                                      WHERE  `status` IS NULL');

                if(!$entries->rowCount()){
                    log_console(tr('There are currently no sitemap entries registered'), 'QUIET/yellow');

                }else{
                    log_console(str_size(tr('#id'), 6).' '.str_size(tr('Created on'), 10).' '.str_size(tr('Created by'), 24).' '.str_size(tr('URL'), 80).' '.str_size(tr('Priority'), 8).' '.str_size(tr('Page modifiedon'), 16).' '.str_size(tr('Change frequency'), 16).' '.str_size(tr('Language'), 8).' '.str_size(tr('Group'), 12).' '.str_size(tr('File'), 12), 'QUIET/cyan');

                    while($entry = sql_fetch($entries)){
                        log_console(str_size($entry['id'], 6).' '.str_size($entry['createdon'], 10).' '.str_size(name($entry['createdby']), 24).' '.str_size($entry['url'], 80).' '.str_size($entry['priority'], 8).' '.str_size($entry['page_modifiedon'], 16).' '.str_size($entry['change_frequency'], 16).' '.str_size($entry['language'], 8).' '.str_size($entry['group'], 12).' '.str_size($entry['file'], 12));
                    }
                }

                break;

            case '':
                throw new BException(tr('No sub method specified for method "list"'), 'no-method');

            default:
                throw new BException(tr('Unknown sub method ":method" specified for method "list"', array(':method' => cli_method())), 'unknown-method');
        }

        break;

    case 'update':
        $generated = sql_get('SELECT COUNT(*) AS `count` FROM `sitemaps_generated`', 'count');

        if(!$generated){
            log_console(tr('No sitemap data has been generated ever before. Generating all sitemap files now'), 'yellow');

        }else{
            if($_CONFIG['language']['supported']){
                $languages = $_CONFIG['language']['supported'];

            }else{
                $languages = array(LANGUAGE => LANGUAGE);
            }

            foreach($languages as $language_code => $language_name){
                /*
                 * Check if there are updates for each language
                 */
                $modified = sql_get('SELECT COUNT(`sitemaps_data`.`id`) AS `count`

                                     FROM   `sitemaps_generated`

                                     JOIN   `sitemaps_data`

                                     ON   ((`sitemaps_data`.`language` = `sitemaps_generated`.`language`) OR (`sitemaps_data`.`language` IS NULL))

                                     WHERE  `sitemaps_generated`.`language` = :language
                                     AND (((`sitemaps_data`.`modifiedon` IS     NULL) AND (`sitemaps_data`.`createdon`  > `sitemaps_generated`.`createdon`))
                                     OR   ((`sitemaps_data`.`modifiedon` IS NOT NULL) AND (`sitemaps_data`.`modifiedon` > `sitemaps_generated`.`createdon`)))',

                                     true, array(':language' => $language_code));

                if($modified){
                    log_console(tr('Sitemap data for language ":language" has been modified, regenerating all sitemap files', array(':language' => $language_name)), 'green');

                }else{
                    if(file_exists(ROOT.'www/en/sitemap.xml')){
                        log_console(tr('Sitemap files for language ":language" exists and sitemap data has not been modified, not regenerating sitemap files', array(':language' => $language_name)), 'green');
                        continue;
                    }

                    log_console(tr('Sitemap data for language ":language" has not been modified, but sitemap file was not found. Regenerating all sitemap files', array(':language' => $language_name)), 'yellow');
                }

                sitemap_generate($language_code);
            }

            break;
        }

        // FALLTHROUGH

    case 'generate':
        cli_no_arguments_left();
        log_console(tr('Regenerating sitemap files'), 'white');

        try{
            $count = sitemap_generate();
            log_console(tr('Generated sitemap file with ":count" entries', array(':count' => $count)), 'green');

        }catch(Exception $e){
            switch($e->getRealCode()){
                case 'not-available':
                    // FALLTHROUGH
                case 'not-specified':
                    throw $e->makeWarning(true);
            }

            throw $e;
        }

        break;

    case '':
        throw new BException(tr('No method specified'), 'no-method');

    default:
        throw new BException(tr('Unknown method ":method" specified', array(':method' => cli_method())), 'unknown-method');
}