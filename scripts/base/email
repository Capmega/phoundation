#!/usr/bin/php
<?php
/*
 * This is the email interface script
 */
$usage = "./scripts/base/email\n".
         "./scripts/base/email method METHOD option users USERS USERS ... [filter FILTER]\n";

$help  = "This is the email interface script

method | methods
    SEND                - Send unsent emails that are stored on the database
                          and still have `status` = new. Then update the
                          status = sent.

    POLL                - Poll for new emails

user | users            - The user email to scan. The user should either exist
                          in the database, or be defined in the configuration
                          file

filter                  - Filter for certain email messages. Valid filters are:
    ALL                 - return all messages matching the rest of the criteria
    ANSWERED            - match messages with the \\ANSWERED flag set
    BCC        [string] - match messages with [string] in the Bcc: field
    BEFORE     [date]   - match messages with Date: before [date]
    BODY       [string] - match messages with [string] in the body of the
                          message
    CC         [string] - match messages with [string] in the Cc: field
    DELETED             - match deleted messages
    FLAGGED             - match messages with the \\FLAGGED (sometimes referred
                          to as Important or Urgent) flag set
    FROM       [string] - match messages with [string] in the From: field
    KEYWORD    [string] - match messages with [string] as a keyword
    NEW                 - match new messages
    OLD                 - match old messages
    ON         [date]   - match messages with Date: matching [date]
    RECENT              - match messages with the \\RECENT flag set
    SEEN                - match messages that have been read (the \\SEEN flag
                          is set)
    SINCE      [date]   - match messages with Date: after [date]
    SUBJECT    [string] - match messages with [string] in the Subject:
    TEXT       [string] - match messages with text [string]
    TO         [string] - match messages with [string] in the To:
    UNANSWERED          - match messages that have not been answered
    UNDELETED           - match messages that are not deleted
    UNFLAGGED           - match messages that are not flagged
    UNKEYWORD  [string] - match messages that do not have the keyword [string]
    UNSEEN              - match messages which have not been read yet";

require_once(dirname(__FILE__).'/../../libs/startup.php');

cli_only();
load_libs('email');

$criteria = strtoupper(argument('filter', true, 'UNSEEN'));
$users    = argument('users'  , true, argument('user'  , true));
$method   = argument('methods', true, argument('method', true));

/*
 * Validate filters
 */
if(!in_array($criteria, array('ALL', 'ANSWERED', 'DELETED', 'FLAGGED', 'NEW', 'OLD', 'RECENT', 'SEEN', 'UNANSWERED', 'UNDELETED', 'UNFLAGGED', 'UNSEEN'))){
    if(!in_array(str_until($criteria, '='), array('BCC', 'BEFORE', 'BODY', 'CC', 'FROM', 'KEYWORD', 'ON', 'SINCE', 'SUBJECT', 'TEXT', 'TO', 'UNKEYWORD'))){
        throw new bException(tr('Unknown filter "%filter%" specified', array('%filter%' => $criteria)), 'unknown');
    }
}

switch($method){
    case 'send':
        /*
         * Send the emails that are still on DB with `status` = "new"
         */
        log_message(tr('Sending unsent emails...'), '', 'white');
        email_send_unsent();
        log_message(tr('Sent emails'), '', 'green');
        break;

    case 'list':
        if(!$users){
            if(!argument('all')){
                throw new bException(tr('No users specified'), 'notspecified');
            }

            $users = array_keys($_CONFIG['email']['users']);
        }

        $list = email_list($users, $criteria);
        showdie($list);
        break;

    case 'poll':
        if(!$users){
            if(!argument('all')){
                throw new bException(tr('No users specified'), 'notspecified');
            }

            $users = array_keys($_CONFIG['email']['users']);
        }

        if($criteria != 'UNSEEN'){
//            throw new bException(tr('Invalid filter "%filter%" specified, polling can only happen on filter "UNSEEN"', array('%filter%' => $criteria)), 'invalid');
        }

        log_message(tr('Polling "%count%" email accounts', array('%count%' => count($users))), '', 'white');

        $count = 0;

        proc_nice(5);

        foreach($users as $user){
            foreach(email_poll($user, $criteria) as $user_emails){
                try{
                    foreach($user_emails as $email){
                        try{
                            $email = email_cleanup($email);
                            email_update_conversation($email, 'received');
                            usleep(1000000);
                            $count++;

                        }catch(Exception $e){
                            log_error($e);
                        }
                    }

                }catch(bException $e){
                    /*
                     * Continue working on the next
                     */
    //:TODO: Add more exception data here
                    log_error(tr('Failed polling process'));
                }
            }

            usleep(1000000);
        }

        switch($count){
            case 0:
                log_console(tr('Added no new emails'), '', 'green');
                break;

            case 1:
                log_message(tr('Added "1" new email'), '', 'green');
                break;

            default:
                log_message(tr('Added "%count%" new emails', array('%count%' => $count)), '', 'green');
        }

        break;

    case 'rebuild':
        /*
         * Create conversations for all messages that do not have conversations yet
         */
        log_console(tr('Rebuilding email conversations'), '', 'white');

        sql_query('UPDATE `email_messages` SET `conversations_id` = NULL;');
        sql_query('DELETE FROM `email_conversations`;');

        $count = 0;
        $r     = sql_query('SELECT   `id`,
                                     `from`,
                                     `to`,
                                     `subject`

                            FROM     `email_messages`

                            WHERE    `conversations_id` IS NULL

                            GROUP BY `from`, `to`

                            ORDER BY `createdon`');

        if($r->rowCount()){
            log_console(tr('Creating conversations for "%count%" messages', array('%count%' => str_log($r->rowCount()))), '');

            $p = sql_prepare('UPDATE `email_messages`

                              SET    `conversations_id` = :conversations_id

                              WHERE (`to`               = :to
                              OR     `from`             = :to)

                              AND   (`to`               = :from
                              OR     `from`             = :from)');

            while($message = sql_fetch($r)){
                if($count++ > 10){
                    $count = 0;
                    log_console('.', '', 'green', false);
                }

                $conversation = email_get_conversation($message);

                $p->execute(array(':conversations_id' => $conversation['id'],
                                  ':from'             => $message['from'],
                                  ':to'               => $message['to']));
            }

            log_console('Done', '', 'green');
        }



        /*
         * First clean all last_messages from conversations and rebuild them from scratch
         */
        log_console('Rebuilding all email conversations', 'conversations', 'white');

        sql_query('UPDATE `email_conversations` SET `last_messages` = ""');

        $count = 0;

        $r     = sql_query  ('SELECT   `id`,
                                       `us`,
                                       `them`,
                                       `last_messages`

                              FROM     `email_conversations`

                              ORDER BY `createdon`');

        $p     = sql_prepare('UPDATE   `email_conversations`

                              SET      `last_messages` = :last_messages,
                                       `direction`     = :direction,
                                       `modifiedon`    = :modifiedon,
                                       `repliedon`     = :repliedon

                              WHERE    `id` = :id');

        while($conversation = sql_fetch($r)){
            if($count++ > 10){
                $count = 0;
                log_console('.', '', 'green', false);
            }

            $msg_count  = 0;
            $repliedon  = null;
            $modifiedon = null;

            $list       = sql_list('SELECT   `id`,
                                             `direction`,
                                             `createdon`,
                                             `text`

                                    FROM     `email_messages`

                                    WHERE   (`to`   = :to
                                    OR       `from` = :to)

                                    AND     (`to`   = :from
                                    OR       `from` = :from)

                                    ORDER BY `createdon` DESC

                                    LIMIT '.$_CONFIG['email']['conversations']['size'],

                                    array(':from' => $conversation['us'],
                                          ':to'   => $conversation['them']));

            $conversation['last_messages'] = array();

            foreach($list as $id => $message){
                if(empty($modifiedon)){
                    $direction  = $message['direction'];
                    $modifiedon = $message['createdon'];
                }

                if(empty($replied) and ($message['direction'] == 'sent')){
                    /*
                     * Register the last reply
                     */
                    $replied = $message['createdon'];
                }

                if(++$msg_count <= $_CONFIG['email']['conversations']['size']){
                    /*
                     * Build the conversations
                     */
                    if($_CONFIG['email']['conversations']['message_dates']){
                        $message['text'] = str_replace('%datetime%', system_date_format($message['createdon']), $_CONFIG['email']['conversations']['message_dates']).$message['text'];
                    }

                    $conversation['last_messages'][] = array('id'        => $id,
                                                             'direction' => $message['direction'],
                                                             'message'   => $message['text']);
                }
            }

            $conversation['last_messages'] = json_encode_custom($conversation['last_messages']);

            $p->execute(array(':id'            => $conversation['id'],
                              ':modifiedon'    => $modifiedon,
                              ':direction'     => $direction,
                              ':repliedon'     => $repliedon,
                              ':last_messages' => $conversation['last_messages']));
        }

        log_console('Done' , '', 'green');
        log_console('Finished!', '', 'green');
        break;

    default:
        throw new bException(tr('Unknown argument "%argument%" specified', array('%argument%' => argument(0))), 'unknown');
}
?>
