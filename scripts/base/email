#!/usr/bin/php
<?php
/*
 * This is the email interface script
 */
$usage = './scripts/base/email
./scripts/base/email send
./scripts/base/email poll';

$help  = 'This is the email management script

METHODS

send                            - Send unsent emails that are stored on the
                                  database and still have `status` = new. Then
                                  update the status = sent.

rebuild                         - Rebuild the email conversations table from the
                                  email messages

list                            - List the available email accounts

poll                            - Poll for new emails

imap                            - Execute imap commands

list                            - List the available mail boxes for the
                                  specifed account



OPTIONS

--users                         - The user email to scan. The user should
                                  either exist in the database, or be defined
                                  in the configuration file

--all | -a                      - [poll, imap] will poll all registered email
                                  addresses

--delete                        - [poll] Delete messages after they have been
                                  received. Cannot be used in combination with
                                  --peek

--peek                          - [poll] Do not set the \"SEEN\" flag when
                                  reading the email messages, leaving them as
                                  \"unread\". Cannot be used in combination with
                                  --delete

--mail-boxes                    - [poll] Comma separated list of mail boxes that
                                  should be polled

--loop N                        - [poll, imap] will restart polling process
                                  right after it finishes for N times. If N is
                                  zero, then it will restart for ever. If N is
                                  one, then it will only run once

--usleep N                      - [poll, imap] Will make the process usleep
                                  for N microseconds after each poll. Defaults
                                  to 5000

--loop-sleep N                  - [poll, imap] Will make the process sleep
                                  for N seconds in between each poll loop. Only
                                  applies when using --loop. Defaults to 5

--repliedon-now                 - (Only for "rebuild" method) set the column
                                  "repliedon" to NOW() instead of NULL

--filter                        - Filter for certain email messages. Valid
                                  filters are:

    ALL                          - Return all messages matching the rest of the
                                   criteria
    ANSWERED                     - Match messages with the \\ANSWERED flag set
    BCC        [string]          - Match messages with [string] in the Bcc:
                                   field
    BEFORE     [date]            - Match messages with Date: before [date]
    BODY       [string]          - Match messages with [string] in the body of
                                   the message
    CC         [string]          - Match messages with [string] in the Cc:
                                   field
    DELETED                      - Match deleted messages
    FLAGGED                      - Match messages with the \\FLAGGED (sometimes
                                   referred to as Important or Urgent) flag set
    FROM       [string]          - Match messages with [string] in the From:
                                   field
    KEYWORD    [string]          - Match messages with [string] as a keyword
    NEW                          - Match new messages
    OLD                          - Match old messages
    ON         [date]            - Match messages with Date: matching [date]
    RECENT                       - Match messages with the \\RECENT flag set
    SEEN                         - Match messages that have been read (the
                                   \\SEEN flag is set)
    SINCE      [date]            - Match messages with Date: after [date]
    SUBJECT    [string]          - Match messages with [string] in the Subject:
    TEXT       [string]          - Match messages with text [string]
    TO         [string]          - Match messages with [string] in the To:
    UNANSWERED                   - Match messages that have not been answered
    UNDELETED                    - Match messages that are not deleted
    UNFLAGGED                    - Match messages that are not flagged
    UNKEYWORD  [string]          - Match messages that do not have the keyword
                                   [string]
    UNSEEN                       - Match messages which have not been read yet';

require_once(__DIR__.'/../../libs/startup.php');

cli_only(true);
load_libs('email');

$criteria = strtoupper(cli_argument('--filter', true, 'UNSEEN'));
$users    = cli_argument('--users', 'all');

if($users){
    /*
     * Only poll the specified email addresses
     */
    $in = sql_in($users);

    $r  = sql_query('SELECT     `email_client_accounts`.`email`

                     FROM      `email_client_accounts`

                     LEFT JOIN `users`
                     ON        `users`.`id` = `email_client_accounts`.`users_id`

                     WHERE     `email_client_accounts`.`email` IN ('.implode(',', array_keys($in)).')', $in);

}else{
    $in = null;
    $r  = sql_query('SELECT    `email_client_accounts`.`email`,
                               IFNULL(IFNULL(`users`.`name`, `users`.`email`), `users`.`username`) AS `user`

                     FROM      `email_client_accounts`

                     LEFT JOIN `users`
                     ON        `users`.`id` = `email_client_accounts`.`users_id`

                     WHERE     `email_client_accounts`.`status` IS NULL');
}

/*
 * Validate filters
 */
if(!in_array($criteria, array('ALL', 'ANSWERED', 'DELETED', 'FLAGGED', 'NEW', 'OLD', 'RECENT', 'SEEN', 'UNANSWERED', 'UNDELETED', 'UNFLAGGED', 'UNSEEN'))){
    if(!in_array(str_until($criteria, '='), array('BCC', 'BEFORE', 'BODY', 'CC', 'FROM', 'KEYWORD', 'ON', 'SINCE', 'SUBJECT', 'TEXT', 'TO', 'UNKEYWORD'))){
        throw new bException(tr('Unknown filter ":filter" specified', array(':filter' => $criteria)), 'unknown');
    }
}

switch(cli_method()){
    case 'clear':
        /*
         * Requires FORCE because its effin dangerous!
         */
        $all = cli_argument('--all');
        cli_no_arguments_left();

        if($all){
            if(!FORCE){
                throw new bException(tr('The "clear" method requires the -F or --force option because its dangerous, it will wipe ALL your email tables!'), 'denied');
            }
// :TEST: Haven't tested this yet, no idea if and how it works

            $r = sql_query('DELETE FROM `email_files`');

            while($file = sql_fetch($r)){
                file_delete($file);
            }

            sql_query('DELETE FROM `email_files`');
            sql_query('DELETE FROM `email_messages`');
            sql_query('DELETE FROM `email_conversations`');
            sql_query('DELETE FROM `email_client_accounts`');

            log_console(tr('Finished wiping ALL email data, messages, conversations, accounts, etc...'), 'green');

        }else{
            if(!FORCE){
                throw new bException(tr('The "clear" method requires the -F or --force option because its dangerous, it will wipe your email_messages and email_conversations tables'), 'denied');
            }

            sql_query('DELETE FROM `email_messages`');
            sql_query('DELETE FROM `email_conversations`');

            log_console(tr('Finished wiping email messages and conversations'), 'green');
        }

        break;

    case 'send':
        /*
         * Send the emails that are still on DB with `status` = "new"
         */
        cli_no_arguments_left();
        log_console(tr('Sending unsent emails'), 'white');

        $count = email_send_unsent();
        log_console(tr('Sent ":count" emails', array(':count' => $count)), 'green');
        break;

    case 'list':
        $all = cli_argument('--all');
        cli_no_arguments_left();

        log_console(str_size(tr('Email'), 32).str_size(tr('User'), 32), 'cyan');

        while($email = sql_fetch($r)){
            log_console(str_size($email['email'], 32).str_size($email['user'], 32));
        }

        break;

    case 'imap':
        $sub = cli_argument(1);

        switch($sub){
            case 'info':
                /*
                 * list the available mail boxes for the specified users
                 */
                $count = 0;

                cli_no_arguments_left();
                load_libs('numbers');

                while($account = sql_fetch($r)){
                    log_console(tr('Fetching information for email ":email"', array(':email' => $account['email'])), 'white');
                    $userdata = email_get_user($account['email']);

                    $userdata['imap'] = str_until($userdata['imap'], '}').'}';
                    $imap             = email_connect($userdata);
                    $info             = imap_mailboxmsginfo($imap);

                    log_console(tr('Account: :account'       , array(':account' => $account['email'])), 'cyan');
                    log_console(tr('Linked user: :user'      , array(':user'    => $account['user'])));
                    log_console(tr('Mailbox: :mailbox'       , array(':mailbox' => $info->Mailbox)));
                    log_console(tr('Last change: :date'      , array(':date'    => $info->Date)));
                    log_console(tr('Total messages: :count'  , array(':count'   => (integer) $info->Nmsgs)));
                    log_console(tr('Recent messages: :count' , array(':count'   => (integer) $info->Recent)));
                    log_console(tr('Unread messages: :count' , array(':count'   => (integer) $info->Unread)));
                    log_console(tr('Deleted messages: :count', array(':count'   => (integer) $info->Deleted)));
                    log_console(tr('Mailbox size: :size'     , array(':size'    => bytes((integer) $info->Size))));

                    $count++;
                }

                log_console(tr('Finished listing all mail boxes for ":count" emails', array(':count' => $count)), 'green');

                break;

            case 'list':
                /*
                 * list the available mail boxes for the specified users
                 */
                cli_no_arguments_left();

                $count = 0;

                while($account = sql_fetch($r, 'email')){
                    log_console(tr('Fetching mail boxes for email ":email"', array(':email' => $account)), 'white');
                    $userdata = email_get_user($account);

                    $userdata['imap'] = str_until($userdata['imap'], '}').'}';
                    $imap             = email_connect($userdata);
                    $boxes            = imap_list($imap, $userdata['imap'], '*');

                    log_console(tr('Found ":count" boxes', array(':count' => count($boxes))), 'cyan');

                    foreach($boxes as $box){
                        log_console($box);
                    }

                    $count++;
                }

                log_console(tr('Finished listing all mail boxes for ":count" accounts', array(':count' => $count)), 'green');

                break;

            case 'delete':
                /*
                 * Delete a group of messages
                 */
                $seen       = cli_argument('--seen');
                $old        = cli_argument('--old', true, 7);
                $mail_boxes = cli_argument('--mail-boxes', true, 'inbox');

                cli_no_arguments_left();

                $mail_boxes = explode(',', $mail_boxes);
                $total      = 0;

                while($account = sql_fetch($r, 'email')){
                    log_console(tr('Deleting emails for account ":account"', array(':account' => $account)), 'white');

                    foreach($mail_boxes as $mail_box){
                        $count = email_delete(array('account'  => $account,
                                                    'mail_box' => $mail_box,
                                                    'criteria' => $criteria,
                                                    'filters'  => array('seen' => $seen,
                                                                        'old'  => $old)));
                    }

                    $total += $count;
                    log_console(tr('Deleted ":count" emails', array(':count' => $count)), 'green');
                }

                log_console(tr('Finished deleting ":total" mails in ":count" accounts', array(':count' => $count, ':total' => $total)), 'green');
                break;

            case '':
                throw new bException(tr('No sub method specified'), 'unknown');

            default:
                throw new bException(tr('Unknown sub method ":method" specified', array(':method' => cli_method())), 'unknown');
        }

        break;

    case 'poll':
        $loops      = cli_argument('--loop'      , true, 1);
        $usleep     = cli_argument('--usleep'    , true, 50000);
        $loop_sleep = cli_argument('--loop-sleep', true, 5);
        $mail_boxes = cli_argument('--mail-boxes', true, 'inbox');
        $delete     = cli_argument('--delete');
        $peek       = cli_argument('--peek');

        cli_no_arguments_left();

        if($peek and $delete){
            throw new bException(tr('Both --peek and --delete were specified, though they are mutually exclusive. Please specify one or the other'), 'conflict');
        }

        if(!is_natural($loops, 0)){
            throw new bException(tr('Please specify a natural number for --loop (an integer number, 0 or higher)'), 'invalid');
        }

        if($criteria != 'UNSEEN'){
//            throw new bException(tr('Invalid filter "%filter%" specified, polling can only happen on filter "UNSEEN"', array('%filter%' => $criteria)), 'invalid');
        }

        $mail_boxes = explode(',', $mail_boxes);
        $count      = 0;
        $first      = true;

        proc_nice(5);

        while($loops-- or $first){
            if($loops){
                log_console(tr('Executing poll loop ":loop"', array(':loop' => abs($loops))), 'white');

            }elseif(!$first){
                log_console(tr('Executing final poll loop'), 'white');
            }

            log_console(tr('Polling ":count" email accounts', array(':count' => $r->rowCount())), 'white');

            $first = false;

            while($account = sql_fetch($r, 'email')){
                if(VERBOSE){
                    log_console(tr('Processing account ":account"', array(':account' => $account)));
                }

                foreach($mail_boxes as $mail_box){
                    if(VERBOSE){
                        log_console(tr('Processing mail box ":mailbox"', array(':mailbox' => $mail_box)));
                    }

                    try{
                        $results = email_poll(array('account'  => $account,
                                                    'mail_box' => $mail_box,
                                                    'criteria' => $criteria,
                                                    'delete'   => $delete,
                                                    'peek'     => $peek,
                                                    'store'    => true));

                        $count += count($results);

                    }catch(Exception $e){
                        log_console($e);
                    }

                    usleep($usleep);
                }
            }

            if($loops or $first){
                /*
                 * We need to loop again, so again get all users
                 */
                sleep($loop_sleep);
                $r->execute($in);
            }
        }

        switch($count){
            case 0:
                log_console(tr('Added no new emails'), 'yellow');
                break;

            case 1:
                log_console(tr('Added "1" new email'), 'green');
                break;

            default:
                log_console(tr('Added ":count" new emails', array(':count' => $count)), 'green');
        }

        break;

    case 'rebuild':
        /*
         * Create conversations for all messages that do not have conversations yet
         */
        $repliedon_now = cli_argument('--repliedon-now');

        cli_no_arguments_left();

        log_console(tr('Rebuilding email conversations'), 'white');

        sql_query('UPDATE `email_messages` SET `conversations_id` = NULL;');
        sql_query('DELETE FROM `email_conversations`;');

        $count = 0;
        $r     = sql_query('SELECT   `id`,
                                     `from`,
                                     `to`,
                                     `subject`

                            FROM     `email_messages`

                            WHERE    `conversations_id` IS NULL

                            GROUP BY `from`, `to`

                            ORDER BY `createdon`');

        if($r->rowCount()){
            log_console(tr('Creating conversations for ":count" messages', array(':count' => $r->rowCount())));

            $p = sql_prepare('UPDATE `email_messages`

                              SET    `conversations_id` = :conversations_id

                              WHERE (`to`               = :to
                              OR     `from`             = :to)

                              AND   (`to`               = :from
                              OR     `from`             = :from)');

            while($message = sql_fetch($r)){
                cli_dot();

                $conversation = email_get_conversation($message);

                $p->execute(array(':conversations_id' => $conversation['id'],
                                  ':from'             => $message['from'],
                                  ':to'               => $message['to']));
            }

            cli_dot(false);
        }



        /*
         * First clean all last_messages from conversations and rebuild them from scratch
         */
        log_console(tr('Rebuilding all email conversations'), 'white');

        sql_query('UPDATE `email_conversations` SET `last_messages` = ""');

        $count = 0;

        $r     = sql_query  ('SELECT   `id`,
                                       `us`,
                                       `them`,
                                       `last_messages`

                              FROM     `email_conversations`

                              ORDER BY `createdon`');

        if($repliedon_now){
            $p = sql_prepare('UPDATE   `email_conversations`

                              SET      `last_messages` = :last_messages,
                                       `direction`     = :direction,
                                       `modifiedon`    = :modifiedon,
                                       `repliedon`     = NOW()

                              WHERE    `id` = :id');

        }else{
            $p = sql_prepare('UPDATE   `email_conversations`

                              SET      `last_messages` = :last_messages,
                                       `direction`     = :direction,
                                       `modifiedon`    = :modifiedon,
                                       `repliedon`     = :repliedon

                              WHERE    `id` = :id');
        }

        while($conversation = sql_fetch($r)){
            cli_dot();

            $msg_count  = 0;
            $repliedon  = null;
            $modifiedon = null;

            $list       = sql_list('SELECT   `id`,
                                             `direction`,
                                             `createdon`,
                                             `text`

                                    FROM     `email_messages`

                                    WHERE   (`to`   = :to
                                    OR       `from` = :to)

                                    AND     (`to`   = :from
                                    OR       `from` = :from)

                                    ORDER BY `createdon` DESC

                                    LIMIT '.$_CONFIG['email']['conversations']['size'],

                                    array(':from' => $conversation['us'],
                                          ':to'   => $conversation['them']));

            $conversation['last_messages'] = array();

            foreach($list as $id => $message){
                if(empty($modifiedon)){
                    $direction  = $message['direction'];
                    $modifiedon = $message['createdon'];
                }

                if(empty($replied) and ($message['direction'] == 'sent')){
                    /*
                     * Register the last reply
                     */
                    $replied = $message['createdon'];
                }

                if(++$msg_count <= $_CONFIG['email']['conversations']['size']){
                    /*
                     * Build the conversations
                     */
                    if($_CONFIG['email']['conversations']['message_dates']){
                        $message['text'] = str_replace('%datetime%', date_convert($message['createdon']), $_CONFIG['email']['conversations']['message_dates']).$message['text'];
                    }

                    $conversation['last_messages'][] = array('id'        => $id,
                                                             'direction' => $message['direction'],
                                                             'message'   => $message['text']);
                }
            }

            $conversation['last_messages'] = json_encode_custom($conversation['last_messages']);

            if($repliedon_now){
                $p->execute(array(':id'            => $conversation['id'],
                                  ':modifiedon'    => $modifiedon,
                                  ':direction'     => $direction,
                                  ':last_messages' => $conversation['last_messages']));

            }else{
                $p->execute(array(':id'            => $conversation['id'],
                                  ':modifiedon'    => $modifiedon,
                                  ':direction'     => $direction,
                                  ':repliedon'     => $repliedon,
                                  ':last_messages' => $conversation['last_messages']));
            }
        }

        cli_dot(false);
        log_console(tr('Finished!'), 'green');
        break;

    case '':
        throw new bException(tr('No method specified'), 'no-method');

    default:
        throw new bException(tr('Unknown method ":method" specified', array(':method' => cli_method())), 'unknown-method');
}

cli_run_once_local(true);
?>
