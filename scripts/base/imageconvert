#!/usr/bin/php
<?php
/*
 * This is an empty test script template
 */
$usage = "./scripts/base/imageconvert --source SOURCE --destination DESTINATION\n";

$help  = "This script con convert specified images with the specified parameters.

OPTIONS

--method                       -

--defaults                     -

--keep-aspect-ratio            -

--quality                      -

--interlace                    -

--strip                        -

--blur                         -

--defines                      -

--sampling-factor              -

--limit-memory                 -

--limit-map                    -

--format                       -

--width -x                     -

--height -y                    -
";

require_once(__DIR__.'/../../libs/startup.php');
throw new bException('THIS SCRIPT IS OBSOLETE! PLEASE USE scripts/base/images INSTEAD!', 'OBSOLETE');
cli_only();
load_libs('file,image');


/*
 * Check parameters
 */
$files       = not_empty(cli_argument('--file', true), cli_argument('--files', 'all'));
$source      = cli_argument('--source'     , true);
$destination = cli_argument('--destination', true);

if(cli_argument('--default') or cli_argument('--defaults')){
    $params = array();

}else{
    $params['keep_aspectratio'] = cli_argument('--keep-aspectratio');
    $params['quality']          = cli_argument('--quality'         , true);
    $params['interlace']        = cli_argument('--interlace'       , true);
    $params['strip']            = cli_argument('--strip'           , true);
    $params['blur']             = cli_argument('--blur'            , true);
    $params['defines']          = cli_argument('--defines'         , true);
    $params['sampling_factor']  = cli_argument('--sampling-factor' , true);
    $params['limit-memory']     = cli_argument('--limit-memory'    , true);
    $params['limit-map']        = cli_argument('--limit-map'       , true);

//    $params['type']            = not_empty(cli_argument('jpg'), (cli_argument('jpeg') ? 'jpg' : ''), cli_argument('png'));

    $method = cli_argument('--method', true);
    $format = cli_argument('--format', true);
    $x      = not_empty(cli_argument('--width' , true), cli_argument('-x', true));
    $y      = not_empty(cli_argument('--height', true), cli_argument('-y', true));
}

cli_no_arguments_left();



/*
 * Check destination path
 */

if($destination){
    $destination = slash($destination);
    file_ensure_path($destination);
}



/*
 * Check source path
 */
$path = $source;

if($source){
    $source = slash(realpath($source));

    if(!file_exists($source)){
        throw new bException(tr('The specified source path ":path" does not exist', array(':path' => $path)), 'not-exist');
    }
}



/*
 * Get file list to process
 */
if(!$files){
    throw new bException(tr('No files specified'), 'not-specified');
}

if((is_string($files) and $files == 'all') or (is_array($files) and (reset($files) == 'all'))){
    /*
     * All files in the specified source path
     */
    $files = scandir($source);
}

if(is_string($files)){
    $files = array($files);
}



/*
 * Ensure that all files exist
 */
log_console(tr('Checking source files'));

foreach($files as $key => &$file){
    $file = trim($file);

    if(($file == '.') or ($file == '..')){
        unset($files[$key]);
        continue;
    }

    if(!file_exists($source.$file)){
        throw new bException(tr('Specified file ":file" does not exist', array(':file' => $source.$file)));
    }

    if(file_exists($destination.$file) and ($destination.$file != $source.$file)){
        throw new bException(tr('Specified file ":file" already exists in the destination', array(':file' => $destination.$file)));
    }
}

unset($file);

log_console(tr('Converting ":count" images', array(':count' => count($files))), 'white');


/*
 *
 */
foreach($files as &$file){
    if(VERBOSE){
        log_dot($file);

    }else{
        log_dot();
    }

    image_convert($source.$file, $destination.$file, $x, $y, $method, $params, $format);
    usleep(5000);
}

unset($file);

if(!VERBOSE){
    log_dot(false);
}
?>
