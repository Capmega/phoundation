#!/usr/bin/php
<?php
/*
 * This is the roles management script
 * Copyright (C) 2015 Sven Oostenbrink
 */
$usage = "./scripts/base/users/roles list\n".
         "./scripts/base/users/roles list rights\n".
         "./scripts/base/users/roles create username USERNAME name REALNAME email EMAIL password PASSWORD\n".
         "./scripts/base/users/roles modify ID|USERNAME [username USERNAME]|[name NAME]|[email EMAIL]\n".
         "./scripts/base/users/roles delete|undelete|erase ID|USERNAME ID|USERNAME ...\n".
         "./scripts/base/users/roles add|remove role ROLEID|ROLENAME right RIGHTID|RIGHTNAME \n";

$help  = "This is the roles management script";

$quiet = true;
require_once(dirname(__FILE__).'/../../../libs/startup.php');

try{
    cli_rights('admin,users,roles');
    load_libs('user,roles');

    switch(argument(0)){
        case 'list':
            if(argument(1) == 'rights'){
                log_console('Showing rights for currently available roles', '');

                $limit   = 200;

                $r       = sql_query('SELECT    `id`,
                                                `name`,
                                                `status`

                                      FROM      `roles`'.($limit ? ' LIMIT '.$limit : ''));

                log_console(str_size('#id', 6).' '.str_size('Name', 20).' '.str_size('Status', 16).' Rights', '', 'white');

                while($role = sql_fetch($r)){
                    $rights = sql_list('SELECT    `rights`.`name`

                                        FROM      `roles_rights`

                                        JOIN      `rights`
                                        ON        `rights`.`id` = `roles_rights`.`rights_id`

                                        AND       `roles_id` = :roles_id',

                                        array(':roles_id' => $role['id']));

                    log_console(str_size($role['id'], 6, ' ', true).' '.str_size($role['name'], 20).' '.str_size(status($role['status']), 16).' '.str_force($rights, ', '), '');
                }

            }else{
                log_console('Showing currently available roles', '');

                $limit   = 200;

                $r       = sql_query('SELECT    `id`,
                                                `name`,
                                                `status`,
                                                `description`

                                      FROM      `roles`'.($limit ? ' LIMIT '.$limit : ''));

                log_console(str_size('#id', 6).' '.str_size('Name', 20).' '.str_size('Status', 16).' Description', '', 'white');

                while($role = sql_fetch($r)){
                    log_console(str_size($role['id'], 6, ' ', true).' '.str_size($role['name'], 20).' '.str_size(status($role['status']), 16).' '.$role['description'], '');
                }
            }

            break;

        case 'create':
            try{
                $role = roles_validate(arguments('name,description'));

                sql_query('INSERT INTO `roles` (`createdby`, `name`, `description`)
                           VALUES              (:createdby , :name , :description)',

                           array(':createdby'   => isset_get($_SESSION['user']['id']),
                                 ':name'        => $role['name'],
                                 ':description' => $role['description']));

                log_console(tr('Created new role "%role%"', array('%role%' => str_log($role['name']))), '', 'green');
                break;

            }catch(Exception $e){
                throw new bException('Failed to create new role', $e);
            }

            break;

        case 'modify':
            try{
                if(!argument(1)){
                    throw new bException(tr('No role specified'), 'notspecified');
                }

                $old_role = sql_get('SELECT `id`, `name`, `description` FROM `roles` WHERE `id` = :role OR `name` = :role', array(':role' => argument(1)));

                if(!$old_role){
                    throw new bException(tr('Specified role "%role%" does not exist', array('%role%' => argument(1))), 'notspecified');
                }

                $role = roles_validate(arguments('name,description'), $old_role);

                sql_query('UPDATE `roles`

                           SET    `modifiedon`  = NOW(),
                                  `modifiedby`  = :modifiedby,
                                  `name`        = :name,
                                  `description` = :description

                           WHERE  `id`          = :id',

                           array(':modifiedby'  => isset_get($_SESSION['user']['id']),
                                 ':name'        => $role['name'],
                                 ':description' => $role['description'],
                                 ':id'          => $old_role['id']));

                /*
                 * Now also update the cached role names
                 */
                sql_query('UPDATE `users_roles`

                           SET    `name` = :name

                           WHERE  `id`   = :id',

                           array(':id'   => $old_role['id'],
                                 ':name' => $role['name']));

                log_console(tr('Modified role "%role%"', array('%role%' => str_log($role['name']))), '', 'green');
                break;

            }catch(Exception $e){
                throw new bException('Failed to modify role', $e);
            }

            break;

        case 'delete':
            cli_roles('modify');
            array_shift($argv);

            if(empty($argv)){
                throw new bException(tr('No roles specified'), 'notspecified');
            }

            $in = sql_in($argv);
            $r  = sql_query(debug_sql('UPDATE `roles` SET `status` = "deleted" WHERE `name` IN ('.implode(',', array_keys($in)).') or `id` IN ('.implode(',', array_keys($in)).')', $in));

            if(!$r->rowCount()){
                throw new bException(tr('Not deleted any roles'), 'notfound');
            }

            log_console(tr('Deleted "%count%" roles', array('%count%' => $r->rowCount())), '', 'green');
            break;

        case 'undelete':
            cli_roles('modify');
            array_shift($argv);

            if(empty($argv)){
                throw new bException(tr('No roles specified'), 'notspecified');
            }

            $in = sql_in($argv);
            $r  = sql_query(debug_sql('UPDATE `roles` SET `status` = NULL WHERE `name` IN ('.implode(',', array_keys($in)).') or `id` IN ('.implode(',', array_keys($in)).')', $in));

            if(!$r->rowCount()){
                throw new bException(tr('Not undeleted any roles'), 'notfound');
            }

            log_console(tr('Undeleted "%count%" roles', array('%count%' => $r->rowCount())), '', 'green');
            break;

        case 'erase':
            cli_roles('modify');
            array_shift($argv);

            if(empty($argv)){
                throw new bException(tr('No roles specified'), 'notspecified');
            }

            $in = sql_in($argv);
            $r  = sql_query(debug_sql('DELETE FROM `roles` WHERE (`name` IN ('.implode(',', array_keys($in)).') or `id` IN ('.implode(',', array_keys($in)).')) AND `status` = "deleted"', $in));

            if(!$r->rowCount()){
                throw new bException(tr('Not erased any roles'), 'notfound');
            }

            log_console(tr('Erased "%count%" roles', array('%count%' => $r->rowCount())), '', 'green');
            break;

        case 'add':
            $role = roles_get();

            /*
             * Make sure rights have been specified
             */
            if(!$arguments = argument('rights', 'all')){
                if(!$arguments = argument('right', 'all')){
                    throw new bException('No "rights" or "right" keyword, or no rights list specified', 'notspecified');
                }
            }

            /*
             * Ensure that specified rights exist, and get more detailed rights data
             */
            foreach($arguments as $key => $value){
                if(!$right = rights_get($value, 'id,name')){
                    throw new bException('Unknown right "'.str_log($value).'" specified', 'unknown');
                }

                $rights[$right['name']] = $right;
            }

            /*
             * Add the specified rights
             */
            foreach($rights as $right){
                if(!sql_get('SELECT `id` FROM `roles_rights` WHERE `roles_id` = :roles_id AND `rights_id` = :rights_id', array(':roles_id' => $target_user['id'], ':rights_id' => $right['id']), 'id')){
                    sql_query('INSERT INTO `roles_rights` (`rights_id`, `roles_id`)
                               VALUES                     (:rights_id , :roles_id )',

                               array(':roles_id'  => $target_user['id'],
                                     ':rights_id' => $right['id']));
                }
            }

            log_console('Added rights "'.str_log(array_keys($rights)).'" to user "'.user_name($target_user).'"', '', 'white');
            break;

        case 'remove':
            $role = roles_get();

            /*
             * Make sure rights have been specified
             */
            if(!$arguments = argument('rights', 'all')){
                if(!$arguments = argument('right', 'all')){
                    throw new bException('No "rights" or "right" keyword, or no rights list specified', 'notspecified');
                }
            }

            /*
             * Ensure that specified rights exist, and get more detailed rights data
             */
            foreach($arguments as $key => $value){
                if(!$right = rights_get($value, 'id,name')){
                    throw new bException('Unknown right "'.str_log($value).'" specified', 'unknown');
                }

                $rights[$right['name']] = $right;
            }

            /*
             * Add the specified rights
             */
            foreach($rights as $right){
                sql_query('DELETE FROM `roles_rights`

                           WHERE       `roles_id`  = :roles_id

                           AND         `rights_id` = :rights_id',

                           array(':roles_id'  => $role['id'],
                                 ':rights_id' => $right['id']));
            }

            log_console(tr('Removed rights "%rights%" from role "%role%"', array('%role%' => user_name($role), '%rights%' => str_log($argv))), '', 'white');
            break;

        case '':
            throw new bException('base/users/roles: No option specified. Please specify one of "list, for/has, add/set/give, unset/take, create, delete/remove/erase"', 'notspecified');

        default:
            throw new bException('base/users/roles: Invalid option "'.str_log(argument(0)).'" specified', 'unknown');
    }

}catch(Exception $e){
    throw new bException('base/users/roles: Failed', $e);
}
?>
