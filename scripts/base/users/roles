#!/usr/bin/php
<?php
/*
 * This script manages is a user is an admin or not
 */
$quiet = true;
require_once(dirname(__FILE__).'/../../../libs/startup.php');

try{
    $user = right_or_redirect('admin,users,roles');

    load_libs('user');

    switch(argument(0)){
        case 'list':
            log_console('Showing currently available roles', '');

            $list = sql_list('SELECT    `name`,
                                        `description`

                              FROM      `roles`');

            log_console(str_size('Name', 20).' Description', '', 'white');

            foreach($list as $name => $description){
                log_console(str_size($name, 20).' '.$description, '');
            }

            break;

        case 'right':
            // FALLTHROUGH
        case 'rights':
            if(!$target_user){
                throw new bException('base/users/roles: No user specified', 'notspecified');
            }

            log_console('Showing rights for role "'.user_name($target_user).'"', '');

            $role = s_get_role();

            $list = sql_list('SELECT    `roles`.`name`,
                                        `roles`.`description`

                              FROM      `roles_rights`

                              LEFT JOIN `roles`
                              ON        `roles`.`id`          = `roles_rights`.`roles_id`

                              WHERE     `roles_rights`.`name` = :name',

                              array(':roles_id' => $role['id']));

            if(!$list){
                log_console('This role has no rights assigned', '', 'yellow');

            }else{
                log_console(str_size('Name', 16).'Description', '', 'white');

                foreach($list as $name => $description){
                    log_console(str_size($name, 16).$description, '');
                }
            }

            die(0);

        case 'set':
            // FALLTHROUGH
        case 'give':
            $role = s_get_role();
            $user = s_get_role();

            /*
             * Make sure rights have been specified
             */
            if(!$arguments = argument('rights', 'all')){
                if(!$arguments = argument('right', 'all')){
                    throw new bException('No "rights" or "right" keyword, or no rights list specified', 'notspecified');
                }
            }

            /*
             * Ensure that specified rights exist, and get more detailed rights data
             */
            foreach($arguments as $key => $value){
                if(!$right = rights_get($value, 'id,name')){
                    throw new bException('Unknown right "'.str_log($value).'" specified', 'unknown');
                }

                $rights[$right['name']] = $right;
            }

            /*
             * Add the specified rights
             */
            foreach($rights as $right){
                if(!sql_get('SELECT `id` FROM `users_rights` WHERE `users_id` = :users_id AND `rights_id` = :rights_id', array(':users_id' => $target_user['id'], ':rights_id' => $right['id']), 'id')){
                    sql_query('INSERT INTO `users_rights` (`addedby`, `rights_id`, `users_id`, `name`)
                               VALUES                     (:addedby , :rights_id , :users_id , :name )',

                               array(':addedby'   => $_SESSION['user']['id'],
                                     ':users_id'  => $target_user['id'],
                                     ':rights_id' => $right['id'],
                                     ':name'      => $right['name']));
                }
            }

            log_console('Added rights "'.str_log(array_keys($rights)).'" to user "'.user_name($target_user).'"', '', 'white');
            break;

        case 'unset':
            // FALLTHROUGH
        case 'take':
            if(!$target_user){
                throw new bException('base/users/roles: No user specified', 'notspecified');
            }

            /*
             * Add specified rights to this user
             */
            unset($argv[0]);
            unset($argv[1]);

            if(in_array('admin', $argv)){
                throw new bException('The right "admin" can only be removed with the "admin" script', 'invalid');
            }

            /*
             * Ensure that specified rights exist, and get more detailed rights data
             */
            foreach($argv as $key => $value){
                if(!$right = rights_get($value, 'id,name')){
                    throw new bException('Unknown right "'.str_log($value).'" specified', 'unknown');
                }

                $rights[$key] = $right;
            }

            /*
             * Add the specified rights
             */
            foreach($rights as $right){
                sql_query('DELETE FROM `users_rights`
                           WHERE       `users_id`  = :users_id
                           AND         `rights_id` = :rights_id',

                           array(':users_id'  => $target_user['id'],
                                 ':rights_id' => $right['id']));
            }

            log_console('Removed rights "'.str_log($argv).'" from user "'.user_name($target_user).'"', '', 'white');
            break;

        case 'create':
            try{
                if(!argument(1)){
                    throw new bException('No role name specified', 'notspecified');
                }

                if(!argument(2)){
                    throw new bException('No role description specified', 'notspecified');
                }

                if(sql_get('SELECT `id` FROM `roles` WHERE `name` = :name', array(':name' => argument(1)))){
                    throw new bException('The role "'.str_log(argument(1)).'" already exists', 'exists');
                }


                sql_query('INSERT INTO `roles` (`addedby`, `name`, `description`)
                           VALUES               (:addedby , :name , :description)',

                           array(':addedby'    => $user['id'],
                                 ':name'       => argument(1),
                                 ':description'=> argument(2, '')));

                log_console('Created new role "'.argument(1).'"', '', 'white');
                break;

            }catch(Exception $e){
                throw new bException('Failed to create new role', $e);
            }

        case 'delete':
            // FALLTHROUGH
        case 'remove':
            // FALLTHROUGH
        case 'erase':
            try{
                if(!argument(1)){
                    throw new bException('No role name specified', 'notspecified');
                }

                if(in_array(argument(1), array('god', 'devil', 'admin'))){
                    throw new bException('The role "'.str_log(argument(1)).'" cannot be deleted', 'invalid');
                }

                if(!$id = sql_get('SELECT `id` FROM `roles` WHERE `name` = :name', 'id', array(':name' => argument(1)))){
                    if(!argument('force')){
                        throw new bException('The role "'.str_log(argument(1)).'" does not exist', 'notexist');
                    }
                }

                sql_query('DELETE FROM `roles`
                           WHERE       `id` = :id',

                           array(':id' => $id));

                log_console('Deleted role "'.argument(1).'"', '', 'white');
                break;

            }catch(Exception $e){
                throw new bException('Failed to delete new role', $e);
            }

        default:
            if(!argument(0)){
                throw new bException('base/users/roles: No option specified. Please specify one of "list, for/has, add/set/give, unset/take, create, delete/remove/erase"', 'notspecified');
            }

            throw new bException('base/users/roles: Invalid option "'.str_log(argument(0)).'" specified', 'unknown');
    }

}catch(Exception $e){
    throw new bException('base/users/roles: Failed', $e);
}



/*
 *
 */
function s_get_user(){
    try{
        if(!$user = argument('user', true)){
            throw new bException('s_get_user(): No user specified', 'notspecified');
        }

        $query   = 'SELECT `id`,
                           `name`,
                           `username`,
                           `email`

                    FROM   `users`

                    WHERE (`id`       = :id
                    OR     `username` = :username
                    OR     `email`    = :email)';

        $execute = array(':id'       => $user,
                         ':username' => $user,
                         ':email'    => $user);

        /*
         * Consider only users with a specific type as real users?
         */
        if($_CONFIG['users']['type_filter'] !== false){
            if($_CONFIG['users']['type_filter'] === null){
                $query           .= ' AND `users`.`type` IS NULL';

            }else{
                $query           .= ' AND `users`.`type` = :type';
                $execute[':type'] = $_CONFIG['users']['type_filter'];
            }
        }

        if(!$user = sql_get($query, $execute)){
            throw new bException('s_get_user(): Specified user "'.str_log(argument(1)).'" does not exist', 'notexists');
        }

        return $user;

    }catch(Exception $e){
        throw new bException('s_get_user(): Failed', $e);
    }
}



/*
 *
 */
function s_get_role(){
    try{
        if(!$target_role = argument('role', true)){
            throw new bException('s_get_role(): No role specified', 'notspecified');
        }

        $role = sql_get('SELECT `id`,
                                `name`,

                         FROM   `roles`

                         WHERE (`id`   = :id
                         OR     `name` = :name',

                         array(':id'   => $target_role,
                               ':name' => $target_role));

        if(!$role = sql_get($query, $execute)){
            throw new bException('s_get_role(): Specified role "'.str_log(argument(1)).'" does not exist', 'notexists');
        }

        return $role;

    }catch(Exception $e){
        throw new bException('s_get_role(): Failed', $e);
    }
}
?>
