#!/usr/bin/php
<?php
/*
 * This script can create new users
 */
$usage = "./scripts/base/users/users list\n".
         "./scripts/base/users/users list with right RIGHT\n".
         "./scripts/base/users/users create username USERNAME name REALNAME email EMAIL password PASSWORD\n".
         "./scripts/base/users/users modify ID|USERNAME [username USERNAME]|[name NAME]|[email EMAIL]\n".
         "./scripts/base/users/users password ID|USERNAME PASSWORD\n".
         "./scripts/base/users/users delete|undelete|erase ID|USERNAME ID|USERNAME ...\n".
         "./scripts/base/users/users whoami\n";

$help  = "This is the users management script";

$quiet = true;
require_once(dirname(__FILE__).'/../../../libs/startup.php');


try{
    cli_rights('admin,users');
    load_libs('user');

    switch($method = argument(0)){
        case 'add':
            // FALLTHROUGH
        case 'create':
            cli_rights('create');

            try{
                cli_rights('admin,users,modify');

            }catch(Exception $e){
                /*
                 * Are there any users at all? If not, then allow for creation of one user.
                 */
                if(sql_get('SELECT COUNT(`id`) AS count FROM `users`', 'count')){
                    throw $e;
                }
            }

            $user = s_validate_user();

            sql_query('INSERT INTO `users` (`createdby`, `name`, `email`, `username`, `password`, `latitude`, `longitude`, `status`, `type`, `validated`)
                       VALUES              (:createdby , :name , :email , :username , :password , :latitude , :longitude , :status , :type , :validated )',

                       array(':createdby' => isset_get($_SESSION['user']['id']),
                             ':name'      => $user['name'],
                             ':email'     => $user['email'],
                             ':username'  => $user['username'],
                             ':password'  => password($user['password']),
                             ':latitude'  => $user['latitude'],
                             ':longitude' => $user['longitude'],
                             ':status'    => $user['status'],
                             ':type'      => $user['type'],
                             ':validated' => $user['validated']));


            log_console(tr('Created user "%user%" with email "%email%"', array('%user%' => str_log(user_name($user)), '%email%' => str_log($user['email']))), null, 'green');
            break;

        case 'modify':
            cli_rights('modify');

            if(!argument(1)){
                $v->setError(tr('No user specified'));
            }

            /*
             * Consider only users with a specific type as real users?
             */
            $where = '';

            if($_CONFIG['users']['type_filter'] !== false){
                if($_CONFIG['users']['type_filter'] === null){
                    $where            = ' AND `users`.`type` IS NULL';

                }else{
                    $where            = ' AND`users`.`type` = :type';
                    $execute[':type'] = $_CONFIG['users']['type_filter'];
                }
            }

            $old_user       = sql_get('SELECT `id`, `username`, `name`, `email`, `status`, `password` FROM `users` WHERE (`id` = :user OR `username` = :user OR `email` = :user)'.$where, array(':user' => argument(1)));
            $where          = ' WHERE `id` = :id';
            $execute[':id'] = $old_user['id'];

            if(!$old_user){
                throw new bException(tr('Specified user "%user%" does not exist', array('%user%' => str_log(argument(1)))), 'notexist');
            }

            /*
             * Modify what exactly?
             */
            if($execute[':value'] = argument('name', true)){
                $execute[':value'] = trim($execute[':value']);

                /*
                 * Modify the users real name
                 */
                if(!$execute[':value']){
                    $v->setError(tr('Specified username "%name%" is not valid, it should be more than 2 characters', array('%name%' => $execute[':value'])));

                }elseif(strlen($execute[':value']) >= 255){
                    $v->setError(tr('Specified username "%name%" is not valid, it should be less than 255 characters', array('%name%' => $execute[':value'])));
                }

                $query = 'UPDATE `users`
                          SET    `name` = :value';

                log_console(tr('Updating user real name to "%name%"', array('%name%' => str_log($execute[':value']))));
                $modified = true;

            }elseif($execute[':value'] = argument('username', true)){
                $execute[':value'] = trim($execute[':value']);

                /*
                 * Modify the users username
                 */
                if(!$execute[':value']){
                    $v->setError(tr('Specified username "%username%" is not valid, it should be more than 2 characters', array('%username%' => $execute[':value'])));

                }elseif(strlen($execute[':value']) >= 64){
                    $v->setError(tr('Specified username "%username%" is not valid, it should be less than 64 characters', array('%username%' => $execute[':value'])));
                }

                if(is_numeric(substr($execute[':value'], 0, 1))){
                    $v->setError(tr('Username should not start with a number', array('%username%' => $execute[':value'])));
                }

                $query = 'UPDATE `users`
                          SET    `username` = :value';

                log_console(tr('Updating user name to "%name%"', array('%name%' => str_log($execute[':value']))));
                $modified = true;

            }elseif($execute[':value'] = argument('email', true)){
                $execute[':value'] = trim($execute[':value']);

                /*
                 * Modify the users email
                 */
                $v->isValidEmail($execute[':value'], tr('Specified email "%email%" is not a valid email address', array('%email%' => $execute[':value'])));

                $query = 'UPDATE `users`
                          SET    `email` = :value';

                log_console(tr('Updating user email to "%email%"', array('%email%' => str_log($execute[':value']))));
                $modified = true;

            }elseif($execute[':value'] = argument('status', true)){
                $execute[':value'] = trim($execute[':value']);

                /*
                 * Modify the users status
                 */
                if(!$execute[':value']){
                    $execute[':value'] = null;

                }elseif(strlen($execute[':value']) > 16){
                    $v->setError(tr('Specified status "%status%" is not valid, it should be less than 16 characters', array('%status%' => $execute[':value'])));
                }

                $query = 'UPDATE `users`
                          SET    `status` = :value';

                log_console(tr('Updating user status to "%status%"', array('%status%' => str_log($execute[':value']))));
                $modified = true;
            }

            $user = s_validate_user($old_user);

            if(!isset_get($modified)){
                log_console(tr('Not modified anything for user "%user%"', array('%user%' => user_name($user))), 'finished', 'yellow');

            }else{
                sql_query($query.$where, $execute);
                log_console(tr('Modified user "%user%"', array('%user%' => user_name($user))), 'finished', 'green');
            }

            break;

        case 'list':
            switch($method = argument(1)){
                case '':
                    $limit   = 200;

                    $query   = 'SELECT    `users`.`id`,
                                          `users`.`name`,
                                          `users`.`username`,
                                          `users`.`email`,
                                          `users`.`status`,
                                          `users`.`type`,
                                          `users`.`role`,
                                          `users_admin`.`name` IS NOT NULL AS `admin`,
                                          `users_god`.`name`   IS NOT NULL AS `god`

                                FROM      `users`

                                LEFT JOIN `users_rights` AS `users_admin`
                                ON        `users_admin`.`name`     = "admin"
                                AND       `users_admin`.`users_id` = `users`.`id`

                                LEFT JOIN `users_rights` AS `users_god`
                                ON        `users_god`.`name`       = "god"
                                AND       `users_god`.`users_id`   = `users`.`id`';

                    $execute = array();

                    /*
                     * Consider only users with a specific type as real users?
                     */
                    if($_CONFIG['users']['type_filter'] !== false){
                        if($_CONFIG['users']['type_filter'] === null){
                            $query           .= ' WHERE `users`.`type` IS NULL';

                        }else{
                            $query           .= ' WHERE `users`.`type` = :type';
                            $execute[':type'] = $_CONFIG['users']['type_filter'];
                        }
                    }

                    $r = sql_query($query.($limit ? ' LIMIT '.$limit : ''));

                    if(!$r->rowCount()){
                        log_console(tr('There are currently no users registered'), '', 'yellow');

                    }else{
                        log_console(tr('#id    Username     Status     Type       Role       Admin God Status     Real name                        Email                            '), '', 'white');

                        while($user = sql_fetch($r)){
                            log_console(str_size($user['id'], 6, ' ', true).' '.str_size($user['username'], 12).' '.str_size(status($user['status']), 10).' '.str_size($user['type'], 10).' '.str_size($user['role'], 10).' '.str_size(($user['admin'] ? 'Yes' : ''), 5).' '.str_size(($user['god'] ? 'Yes' : ''), 3).' '.str_size(status($user['status']), 10).' '.str_size($user['name'], 32).' '.str_size($user['email'], 32), '', '');
                        }
                    }

                    break;

                case 'with':
                    switch($method = argument(2)){
                        case 'role':
throw new bException('"LIST WITH ROLE" IS UNDER CONSTRUCTION');
                            break;

                        case 'right':
throw new bException('"LIST WITH RIGHT" IS UNDER CONSTRUCTION');

                            break;

                        case '':
                            throw new bException(tr('No sub method specified'), 'unknown');

                        default:
                            throw new bException(tr('Unknown sub method "%method%" specified, please specify either nothing or "with"', array('%method%' => $method)), 'unknown');
                    }

                    break;

                case '':
                    throw new bException(tr('No sub method specified'), 'unknown');

                default:
                    throw new bException(tr('Unknown sub method "%method%" specified, please specify either nothing or "with"', array('%method%' => $method)), 'unknown');
            }

            break;

        case 'delete':
            cli_rights('modify');
            array_shift($argv);

            if(!count($argv)){
                throw new bException('No users specified');
            }

            $in = sql_in($argv);
            $r  = sql_query('UPDATE `users` SET `status` = "deleted" WHERE `username` IN ('.implode(',', array_keys($in)).') or `id` IN ('.implode(',', array_keys($in)).')', $in);

            if(!$r->rowCount()){
                throw new bException(tr('Not deleted any users'), 'notfound');
            }

            log_console(tr('Deleted "%count%" users', array('%count%' => $r->rowCount())), '', 'green');
            break;

        case 'undelete':
            cli_rights('modify');
            array_shift($argv);

            if(!count($argv)){
                throw new bException('No users specified');
            }

            $in = sql_in($argv);
            $r  = sql_query('UPDATE `users` SET `status` = NULL WHERE `username` IN ('.implode(',', array_keys($in)).') or `id` IN ('.implode(',', array_keys($in)).')', $in);

            if(!$r->rowCount()){
                throw new bException(tr('Not undeleted any users'), 'notfound');
            }

            log_console(tr('Undeleted "%count%" users', array('%count%' => $r->rowCount())), '', 'green');
            break;

        case 'erase':
            cli_rights('modify');
            array_shift($argv);

            if(!count($argv)){
                throw new bException('No users specified');
            }

            $in = sql_in($argv);
            $r  = sql_query('DELETE FROM `users` WHERE (`username` IN ('.implode(',', array_keys($in)).') or `id` IN ('.implode(',', array_keys($in)).')) AND `status` = "deleted"', $in);

            if(!$r->rowCount()){
                throw new bException(tr('Not erased any users'), 'notfound');
            }

            log_console(tr('Erased "%count%" users', array('%count%' => $r->rowCount())), '', 'green');
            break;

        case 'password':
            cli_rights('modify');

            if(count($argv) < 3){
                switch(count($argv)){
                    case 0:
                        throw new bException('No user and password specified');

                    case 1:
                        throw new bException('No password specified');

                    default:
                        throw new bException('Too many arguments specified, please specify only username (or email) and password');
                }
            }

            $username = argument(1);
            $password = argument(2);

            $r = sql_query('UPDATE `users`

                            SET    `password` = :password

                            WHERE  `username` = :username
                            OR     `email`    = :email',

                           array(':password' => password($password),
                                 ':username' => $username,
                                 ':email'    => $username));

            if(!$r->rowCount()){
                throw new bException(tr('User "%user%" not found, or password was the same, and so not updated', array('%user%' => str_log($username))));
            }

            log_console(tr('Updated password for user "%user%"', array('%user%' => str_log($username))), '', 'green');
            break;

        case 'whoami':
            if(empty($_SESSION['user']['id'])){
                log_console(tr('0 Nobody'), '');

            }else{
                log_console($_SESSION['user']['id'].' '.$_SESSION['user']['email'].' '.$_SESSION['user']['username'].' '.$_SESSION['user']['name'], '');
            }

            break;

        case '':
            throw new bException(tr('No method specified'), 'unknown');

        default:
            throw new bException(tr('Unknown method "%method%" specified', array('%method%' => $method)), 'unknown');
    }

}catch(Exception $e){
    throw new bException('scripts/users/create: Failed', $e);
}



/*
 *
 */
function s_validate_user($user = null){
    global $_CONFIG;

    try{
        if(!$user){
            $user['name']      = argument('name'     , true, '');
            $user['email']     = argument('email'    , true);
            $user['username']  = argument('username' , true);
            $user['password']  = argument('password' , true);
            $user['latitude']  = argument('latitude' , true);
            $user['longitude'] = argument('longitude', true);
            $user['status']    = argument('status'   , true);
            $user['type']      = argument('type'     , true);
            $user['validated'] = true;
        }

        load_libs('validate');

        $v     = new validate_form();
        $v->isNotEmpty ($user['name']     , tr('No name specified'), 'notspecified');
        $v->hasMinChars($user['name'],   2, tr('Please ensure the name has at least 2 characters'));
        $v->hasMaxChars($user['name'], 255, tr('Please ensure the name has less than 255 characters'));

        $v->isNotEmpty ($user['username']    , tr('No username specified'), 'notspecified');
        $v->hasMinChars($user['username'],  2, tr('Please ensure the username has at least 2 characters'));
        $v->hasMaxChars($user['username'], 64, tr('Please ensure the username has less than 255 characters'));

        if(is_numeric(substr($user['username'], 0, 1))){
            $v->setError(tr('Username should not start with a number', array('%username%' => $user['username'])));
        }

        $v->isNotEmpty  ($user['email'], tr('No email specified'), 'notspecified');
        $v->isValidEmail($user['email'], tr('Specified email "%email%" is not a valid email address', array('%email%' => $user['email'])));

        if(strlen($user['status']) > 16){
            $v->setError(tr('Specified status "%status%" is not valid, it should be less than 16 characters', array('%status%' => $user['status'])));
        }

        if(!$user['password']){
            $v->setError(tr('No password specified'), 'not_specified');
        }

        if(empty($user['id'])){
            if($test = sql_get('SELECT `id`, `username`, `name` FROM `users` WHERE (`name` = :name OR `email` = :email)', array(':name' => $user['name'], ':email' => $user['email']))){
                if($user['username'] == $test['username']){
                    throw new bException(tr('The username "%username%" is already in use', array('%username%' => $user['username'])), 'exists');
                }

                throw new bException(tr('The email "%email%" is already in use', array('%email%' => $user['email'])), 'exists');
            }

        }else{
            if($test = sql_get('SELECT `id`, `username`, `name` FROM `users` WHERE (`name` = :name OR `email` = :email) AND `id` != :id', array(':name' => $user['name'], ':email' => $user['email'], ':id' => $user['id']))){
                if($user['username'] == $test['username']){
                    throw new bException(tr('The username "%username%" is already in use', array('%username%' => $user['username'])), 'exists');
                }

                throw new bException(tr('The email "%email%" is already in use', array('%email%' => $user['email'])), 'exists');
            }
        }

        $v->isValid();

        return $user;

    }catch(Exception $e){
        throw new bException(tr('s_validate_user(): Failed'), $e);
    }
}
?>
