#!/usr/bin/php
<?php
/*
 * This script manages is a user is an admin or not
 */
$quiet = true;
require_once(dirname(__FILE__).'/../../../libs/startup.php');

try{
    load_libs('user');

    try{
        $user = right_or_redirect('admin', null, null, false);

    }catch(Exception $e){
        /*
         * Don't fail right away, there may not be any other admin users available!
         * If there are no admin users, he will be allowed to make himself, or anyone else an admin
         */
        if(($e->getCode() != 'noright') or sql_get('SELECT COUNT(*) AS `count` FROM `users_rights` WHERE `name` = "admin"', 'count')){
            /*
             * This is not a rights exception, or there are admins available
             */
            throw $e;
        }

        /*
         * norights exception. The user has no admin rights,
         * but there are no other admins, so we're probably in an first init process.
         * continue..
         */
        log_message('Access denied override for user "'.str_log(user_name($_SESSION['user'])).'" in script "'.str_log($_SERVER['PHP_SELF']).'" for missing right "admin" because there are currently no admins', 'accessoverride', 'green');
        $user     = user_or_redirect();
        $noadmins = true;
    }

    if(!$target_user = argument(1)){
        throw new bException('base/users/admin: No user specified', 'notspecified');
    }

    $query   = 'SELECT `id`,
                       `name`,
                       `username`,
                       `email`

                FROM   `users`

                WHERE (`id`       = :id
                OR     `username` = :username
                OR     `email`    = :email)';

    $execute = array(':id'       => $target_user,
                     ':username' => $target_user,
                     ':email'    => $target_user);

    /*
     * Consider only users with a specific type as real users?
     */
    if($_CONFIG['users']['type_filter'] !== false){
        if($_CONFIG['users']['type_filter'] === null){
            $query           .= ' AND `users`.`type` IS NULL';

        }else{
            $query           .= ' AND `users`.`type` = :type';
            $execute[':type'] = $_CONFIG['users']['type_filter'];
        }
    }

    if(!$target_user = sql_get($query, $execute)){
        throw new bException('base/users/admin: Specified user "'.str_log(argument(1)).'" does not exist', 'notexists');
    }

    $rights_id = sql_get('SELECT `id` FROM `rights` WHERE `name` = "admin"', 'id');

    load_libs('rights');

    switch(argument(0)){
        case 'is':
            $right = (boolean) sql_get('SELECT `id`

                                        FROM   `users_rights`

                                        WHERE  `users_id`  = :users_id
                                        AND    `rights_id` = :rights_id
                                        AND    `type`      IS NULL',

                                       array(':users_id'   => $target_user['id'],
                                             ':rights_id'  => $rights_id));

            if($right){
                log_console('User "'.user_name($target_user).'" is an admin', 'isadmin', 'green');
                die(0);
            }

            log_console('User "'.user_name($target_user).'" is NOT an admin', 'isadmin', 'yellow');
            die(0);

        case 'add':
            // FALLTHROUGH
        case 'set':
            // FALLTHROUGH
        case 'make':
            /*
             * Make this user an admin
             */
            if(!isset_get($noadmins) and ($target_user['id'] == $user['id'])){
                if(sql_get('SELECT COUNT(*) AS count FROM `users` WHERE `admin` = 1', 'count')){
                    /*
                     * There are other admin users available
                     */
                    throw new bException('This action cannot be executed on your self if there are other admin users available', 'denied');
                }
            }

            if(!sql_get('SELECT `id` FROM `users_rights` WHERE `users_id` = :users_id AND `name` = "admin"', array(':users_id' => $target_user['id']), 'id')){
                sql_query('INSERT INTO `users_rights` (`addedby`, `rights_id`, `users_id`, `name`)
                           VALUES                     (:addedby , :rights_id , :users_id , "admin")',

                           array(':addedby'   => $_SESSION['user']['id'],
                                 ':users_id'  => $target_user['id'],
                                 ':rights_id' => $rights_id));
            }

            log_console('User "'.user_name($target_user).'" is now an admin', 'admin', 'white');
            break;

        case 'rm':
            // FALLTHROUGH
        case 'del':
            // FALLTHROUGH
        case 'delete':
            // FALLTHROUGH
        case 'remove':
            // FALLTHROUGH
        case 'reset':
            /*
             * Make this user NO LONGER an admin
             */
            if($target_user['id'] == $user['id']){
                throw new bException('This action cannot be executed on your self', 'denied');
            }

            sql_query('DELETE FROM `users`
                       WHERE       `users_id`  = :users_id
                       AND         `rights_id` = :rights_id',

                      array(':users_id'  => $target_user['id'],
                            ':rights_id' => $rights_id));

            log_console('User "'.user_name($target_user).'" is no longer an admin', '', 'white');
            break;

        default:
            if(!argument(0)){
                throw new bException('base/users/admin: No option specified', 'notspecified');
            }

            throw new bException('base/users/admin: Invalid option "'.str_log(argument(0)).'" specified', 'unknown');
    }

}catch(Exception $e){
    throw new bException('base/users/admin: Failed', $e);
}
?>
