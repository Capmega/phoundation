#!/usr/bin/php
<?php
/*
 * This script can create new users
 */
$usage = './scripts/base/users list
./scripts/base/users list [--right RIGHT] [-r RIGHT]
./scripts/base/users create --username USERNAME --name REALNAME --email EMAIL --password PASSWORD [--latitude LATITUDE] [--longitude LONGITUDE] [--status STATUS] [--type TYPE] [--redirect URL] [--domain DOMAIN]
./scripts/base/users modify ID|USERNAME [--username USERNAME] [--name NAME] [--email EMAIL] [--latitude LATITUDE] [--longitude LONGITUDE] [--status STATUS] [--type TYPE] [--redirect URL] [--domain DOMAIN]
./scripts/base/users password ID|USERNAME PASSWORD
./scripts/base/users delete|undelete|erase ID|USERNAME ID|USERNAME ...
./scripts/base/users whoami
./scripts/base/users set-role USERID|USERNAME ROLEID|ROLENAME
./scripts/base/users set-role --user USERID|USERNAME --role ROLEID|ROLENAME';

$help  = 'This is the users management script

METHODS

list                            - List currently available users. By default the
                                  system will only limit 200 users. It\'s
                                  possible to filter users by id, type, name,
                                  username, nickname, or email (See --filters).
                                  By default, users with status not "null" are
                                  not shown.

    list specific ARGUMENTS

    --show-rights               - Show the list of available rights for each
                                  user

    -f --filter --filters       - [list] General filter for the  displayed user
                                  list, filters on id, name, username, and
                                  nickname

    -t --type                   - [list] Filter the user list by the specified
                                  type

    -s --status                 - [list] Filter the user list by the specified
                                  status

    -d --deleted                - [list] Show only deleted users

    -a --all                    - [list] Show users with all possible status

    -e --email                  - [list] Filter by specified (part of) email

    -n --name                   - [list] Filter by specified (part of) name

    -u --username               - [list] Filter by specified (part of) username

    -r --right                  - [list] Filter by users that have specified
                                  (part of) rights name

    -l --limit                  - [list] Limit the amount of users to the
                                  specified number. Must be a natural number
                                  1-5000, defaults to 100



create                          - Create a new user. It\'s possible to specify
                                  the columns name, username, nickname, email,
                                  password, latitude, longitude, status, type,
                                  redirect, domain

    create specific ARGUMENTS

    --name                      - The real user name (e.g. John Doe)

    --username                  - The user\'s username (e.g. john), cannot
                                  contain spaces, lowercase only

    --nickname                  - The user\'s nickname (e.g. Phoenixz)

    --email                     - The user\'s email (e.g. info@ingiga.com)

    --password                  - The user\'s password

    --longitude                 - The user\'s latitude location (e.g.
                                  19.0437505)

    --latitude                  - The user\'s latitude location (e.g.
                                  -98.1993234)

    --status                    - The user\'s status. Do not specify for "null",
                                  other options are "deleted" or any value
                                  required for your project. NOTE: Status "null"
                                  is normally considered "normal" and users with
                                  this status will be available everywhere, can
                                  login, etc. Users with status not "null" will
                                  not be able to login, will usually not show up
                                  on user lists, etc.

    --redirect                  - URL. If specified, when the user signs in, it
                                  will always be redirected to the specified URL

    --domain                    - FQDN. Should only be used when whitelabel
                                  system is enabled. If specified, the user will
                                  only be able to sign in on this domain



modify                          - Modify the specified user. Users can be
                                  specified by id, username, or email. It\'s
                                  possible to update the username, name,
                                  nickname, email, phones, longitude, latitude,
                                  domain or redirect.

    modify specific ARGUMENTS

    --name                      - The real user name (e.g. John Doe)

    --username                  - The user\'s username (e.g. john), cannot
                                  contain spaces, lowercase only

    --nickname                  - The user\'s nickname (e.g. Phoenixz)

    --email                     - The user\'s email (e.g. info@ingiga.com)

    --password                  - The user\'s password

    --longitude                 - The user\'s latitude location (e.g.
                                  19.0437505)

    --latitude                  - The user\'s latitude location (e.g.
                                  -98.1993234)

    --redirect                  - URL. If specified, when the user signs in, it
                                  will always be redirected to the specified URL

    --domain                    - FQDN. Should only be used when whitelabel
                                  system is enabled. If specified, the user will
                                  only be able to sign in on this domain



password                        - Update the password for the specified user.
                                  Users can be specified by id, username, or
                                  email

delete                          - Delete specified users. Users can be specified
                                  by id, username, or email. NOTE: Deleting a
                                  user will set the user\'s status to "deleted",
                                  nothing more. With this status though, users
                                  will no longer be able to sign in, nor will
                                  they show up on most lists or be used in
                                  automated systems like mailing lists

undelete                        - Undelete specified users. Users can be
                                  specified by id, username, or email. NOTE:
                                  Undeleting a user will set the user\'s status
                                  to "null", nothing more. With this status
                                  though, userswill be able to sign in again,
                                  show up on most lists or be used in
                                  automated systems like mailing lists

erase                           - Erase specified users. Users can be specified
                                  by id, username, or email. NOTE: Erasing a
                                  user will really physically remove a user from
                                  the database. NOTE: Since the database will
                                  usually have many table columns pointing
                                  towards their entry with foreign keys applied,
                                  it is usually near impossible to erase a user.
                                  This is why, usually, it is enough to just
                                  delete the user

whoami                          -

set-role                        - Set the specified rol for the specified user.
                                  Users can be specified by id, username, or
                                  email. Rights can be specified by id or name.





GENERAL ARGUMENTS

None';

require_once(dirname(__FILE__).'/../../libs/startup.php');

load_libs('user');

switch(cli_method()){
    case 'create':
        $user = cli_arguments('--name,--email,--username,--nickname,--password,--latitude,--longitude,--status,--type,--role,--type,--redirect,--domain');
        $user = users_validate($user, array('validation_password' => false));

        cli_no_arguments_left();

        sql_query('INSERT INTO `users` (`createdby`, `name`, `roles_id`, `role`, `email`, `username`, , `nickname`, `password`, `latitude`, `longitude`, `status`, `type`, `validated`, `redirect`, `domain`)
                   VALUES              (:createdby , :name , :roles_id , :role , :email , :username , , :nickname , :password , :latitude , :longitude , :status , :type , :validated , :redirect , :domain )',

                   array(':createdby' => isset_get($_SESSION['user']['id']),
                         ':roles_id'  => $user['roles_id'],
                         ':role'      => $user['role'],
                         ':name'      => $user['name'],
                         ':nickname'  => $user['nickname'],
                         ':email'     => $user['email'],
                         ':username'  => $user['username'],
                         ':password'  => get_hash($user['password'], $_CONFIG['security']['passwords']['hash']),
                         ':latitude'  => $user['latitude'],
                         ':longitude' => $user['longitude'],
                         ':status'    => $user['status'],
                         ':type'      => $user['type'],
                         ':redirect'  => $user['redirect'],
                         ':domain'    => $user['domain'],
                         ':validated' => isset_get($user['validated'])));

        user_update_rights(array('id'       => sql_insert_id(),
                                 'roles_id' => $user['roles_id']));

        cli_log(tr('Created user ":user" with email ":email"', array(':user' => user_name($user), ':email' => $user['email'])), 'green');
        break;

    case 'modify':
        $users_id = cli_argument(1);

        if(!$users_id){
            $v->setError(tr('No user specified'));
        }

        $user = cli_arguments('--name,--email,--username,--latitude,--longitude,--redirect,--domain,--nickname');
        cli_no_arguments_left();

        /*
         * Consider only users with a specific type as real users?
         */
        $where = '';

        if($_CONFIG['users']['type_filter'] !== false){
            if($_CONFIG['users']['type_filter'] === null){
                $where = ' AND `users`.`type` IS NULL';

            }else{
                $where            = ' AND`users`.`type` = :type';
                $execute[':type'] = $_CONFIG['users']['type_filter'];
            }
        }

        $db_user = sql_get('SELECT `id`,
                                   `username`,
                                   `nickname`,
                                   `name`,
                                   `email`,
                                   `status`,
                                   `redirect`,
                                   `domain`

                            FROM   `users`

                            WHERE (`id`       = :id
                            OR     `username` = :username
                            OR     `email`    = :email)'.$where,

                            array(':id'       => $users_id,
                                  ':username' => $users_id,
                                  ':email'    => $users_id));

        if(!$db_user){
            throw new bException(tr('Specified user ":user" does not exist', array(':user' => $users_id)), 'not-exist');
        }

        $user = sql_merge($db_user, $user);
        $user = users_validate($user, array('password'            => false,
                                            'validation_password' => false,
                                            'role'                => false));

        /*
         * Modify what exactly?
         */
        $r = sql_query('UPDATE `users`

                        SET    `name`      = :name,
                               `email`     = :email,
                               `username`  = :username,
                               `nickname`  = :nickname,
                               `latitude`  = :latitude,
                               `longitude` = :longitude,
                               `redirect`  = :redirect,
                               `domain`    = :domain

                        WHERE  `id`        = :id',

                        array(':name'      => $user['name'],
                              ':email'     => $user['email'],
                              ':username'  => $user['username'],
                              ':nickname'  => $user['nickname'],
                              ':latitude'  => $user['latitude'],
                              ':longitude' => $user['longitude'],
                              ':redirect'  => $user['redirect'],
                              ':domain'    => $user['domain'],
                              ':id'        => $db_user['id']));

        if(!$r->rowCount()){
            cli_log(tr('Not modified anything for user ":user"', array(':user' => user_name($user))), 'yellow');

        }else{
            cli_log(tr('Modified user ":user"', array(':user' => user_name($user))), 'green');
        }

        break;

    case 'give-role':
        // FALLTHROUGH
    case 'set-role':
        load_libs('roles');

        /*
         * Get arguments by keyword
         */
        $specified_role = cli_argument('--role', true);
        $specified_user = cli_argument('--user', true);

        if(!$specified_role and !$specified_user){
            /*
             * Get arguments by order
             */
            $specified_user = cli_argument(1);
            $specified_role = cli_argument(2);
        }

        cli_no_arguments_left();

        if(!$specified_user){
            throw new bException(tr('No user specified'), 'not-specified');
        }

        $user = user_get($specified_user);

        if(!$user){
            throw new bException(tr('Specified user ":user" does not exist', array(':user' => $specified_user)), 'not-exist');
        }

        if(!$specified_role){
            throw new bException(tr('No role specified for user ":user"', array(':user' => $user)), 'not-specified');
        }

        $role = roles_get($specified_role, 'id,name');

        if(!$role){
            throw new bException(tr('Specified role ":role" does not exist', array(':role' => $specified_role)), 'not-exist');
        }

        $user['roles_id'] = $role['id'];

        sql_query('UPDATE `users`

                   SET    `roles_id` = :roles_id

                   WHERE  `id`       = :users_id',

                   array(':users_id' => $user['id'],
                         ':roles_id' => $role['id']));

        user_update_rights($user);
        cli_log(tr('Gave role ":role" to user ":user"', array(':role' => $role['name'], ':user' => user_name($user))), 'green');
        break;

    case 'list':
        $show_rights = cli_argument('--show-rights');
        $deleted     = cli_argument('-d') or cli_argument('--deleted');
        $all         = cli_argument('-a') or cli_argument('--all');

        $type        = not_empty(cli_argument('-t', true), cli_argument('--type'    , true));
        $status      = not_empty(cli_argument('-s', true), cli_argument('--status'  , true), null);
        $limit       = not_empty(cli_argument('-l', true), cli_argument('--limit'   , true), 100);
        $email       = not_empty(cli_argument('-e', true), cli_argument('--email'   , true));
        $name        = not_empty(cli_argument('-n', true), cli_argument('--name'    , true));
        $username    = not_empty(cli_argument('-u', true), cli_argument('--username', true));
        $right       = cli_argument('-r') or cli_argument('--show-rights');

        $filters     = not_empty(cli_argument('-f', true), cli_argument('--filter', true), cli_argument('--filters', true));
        $filters     = array_merge(array_force($filters), $argv);

        $execute     = array();

        if(!is_natural($limit) or (!$limit > 5000)){
            throw new bException(tr('--limit must be followed by a natural number lower than 5000'), 'invalid');
        }

        if($status and $deleted and $all){
            throw new bException(tr('--deleted, --status, and --all cannot be used together. Use only one of the three'), 'invalid');
        }

        if($status and $deleted){
            throw new bException(tr('--status, --deleted cannot be used together. Use only one of the two'), 'invalid');
        }

        if($status and $all){
            throw new bException(tr('--status, --all cannot be used together. Use only one of the two'), 'invalid');
        }

        if($deleted and $all){
            throw new bException(tr('--deleted, --all cannot be used together. Use only one of the two'), 'invalid');
        }

        if($deleted){
            $where[] = ' `users`.`status` = "deleted" ';

        }elseif($status){
            $where[] = ' `users`.`status` = :status ';
            $execute[':status'] = $status;

        }elseif(!$all){
            $where[] = ' `users`.`status` IS NULL ';
        }

        if($type){
            $where[] = ' `users`.`type` = :type ';
            $execute[':type'] = $type;

        }else{
            /*
             * Consider only users with a specific type as real users?
             */
            if($_CONFIG['users']['type_filter'] !== false){
                if($_CONFIG['users']['type_filter'] === null){
                    $where[]         .= ' `users`.`type` IS NULL';

                }else{
                    $where[]         .= ' `users`.`type` = :type';
                    $execute[':type'] = $_CONFIG['users']['type_filter'];
                }
            }
        }

        if($name){
            $where[] = ' (`users`.`name` LIKE :name OR `users`.`nickname` LIKE :nickname) ';

            $execute[':name']     = '%'.$name.'%';
            $execute[':nickname'] = '%'.$name.'%';
        }

        if($username){
            $where[] = ' `users`.`username` LIKE :username ';

            $execute[':username'] = '%'.$username.'%';
        }

        if($email){
            $where[] = ' `users`.`email` LIKE :email ';

            $execute[':email'] = '%'.$email.'%';
        }

        if($filters){
            $count = 0;

            foreach($filters as $filter){
                $list[] = ' `users`.`name`     LIKE :name'.$count.' ';
                $list[] = ' `users`.`email`    LIKE :email'.$count.' ';
                $list[] = ' `users`.`username` LIKE :username'.$count.' ';
                $list[] = ' `users`.`nickname` LIKE :nickname'.$count.' ';

                $execute[':name'.$count]     = '%'.$filter.'%';
                $execute[':email'.$count]    = '%'.$filter.'%';
                $execute[':username'.$count] = '%'.$filter.'%';
                $execute[':nickname'.$count] = '%'.$filter.'%';

                $count++;
            }

            if(!empty($list)){
                $where[] = ' ('.implode(' OR ', $list).') ';
            }
        }

        if($show_rights){
            cli_log(tr('Showing rights for users'));

            $query   = 'SELECT    `users`.`id`,
                                  `users`.`username`,
                                  `users`.`nickname`,
                                  `users`.`email`,
                                  `users`.`status`,
                                  `users`.`roles_id`,
                                  `users`.`role`

                        FROM      `users`';

            if(!empty($where)){
                $where = ' WHERE '.implode(' AND ', $where);
            }

            $r = sql_query($query.$where.($limit ? ' LIMIT '.$limit : ''), $execute);

            if(!$r->rowCount()){
                cli_log(tr('There are currently no users registered'), 'yellow');

            }else{
                cli_log(tr('#id    Username     Nickname     Status     Role       Rights'), 'cyan');

                while($user = sql_fetch($r)){
                    $rights = sql_list('SELECT `rights`.`name`

                                        FROM   `roles_rights`

                                        JOIN   `rights`
                                        ON     `rights`.`id` = `roles_rights`.`rights_id`

                                        AND    `roles_id`    = :roles_id',

                                        array(':roles_id'    => $user['roles_id']));

                    cli_log(str_size($user['id'], 6, ' ', true).' '.str_size($user['username'], 12).' '.str_size($user['nickname'], 12).' '.str_size(status($user['status']), 10).' '.str_size(not_empty($user['role'], '-'), 10).' '.not_empty(str_force($rights, ', '), '-'));
                }
            }

        }else{
            $query   = 'SELECT    `users`.`id`,
                                  `users`.`name`,
                                  `users`.`username`,
                                  `users`.`nickname`,
                                  `users`.`email`,
                                  `users`.`status`,
                                  `users`.`type`,
                                  `users`.`role`,
                                  `users_admin`.`name` IS NOT NULL AS `admin`,
                                  `users_god`.`name`   IS NOT NULL AS `god`

                        FROM      `users`

                        LEFT JOIN `users_rights` AS `users_admin`
                        ON        `users_admin`.`name`     = "admin"
                        AND       `users_admin`.`users_id` = `users`.`id`

                        LEFT JOIN `users_rights` AS `users_god`
                        ON        `users_god`.`name`       = "god"
                        AND       `users_god`.`users_id`   = `users`.`id`';

            if(!empty($where)){
                $where = ' WHERE '.implode(' AND ', $where);
            }

            $r = sql_query($query.$where.($limit ? ' LIMIT '.$limit : ''), $execute);

            if(!$r->rowCount()){
                cli_log(tr('There are currently no users registered'), 'yellow');

            }else{
                cli_log(tr('#id    Username     Nickname     Status     Type       Role       Admin God Status     Real name                        Email                            '), 'cyan');

                while($user = sql_fetch($r)){
                    cli_log(str_size($user['id'], 6, ' ', true).' '.str_size($user['username'], 12).' '.str_size($user['nickname'], 12).' '.str_size(status($user['status']), 10).' '.str_size($user['type'], 10).' '.str_size($user['role'], 10).' '.str_size(($user['admin'] ? 'Yes' : ''), 5).' '.str_size(($user['god'] ? 'Yes' : ''), 3).' '.str_size(status($user['status']), 10).' '.str_size($user['name'], 32).' '.str_size($user['email'], 32));
                }
            }
        }

        break;

    case 'delete':
        $users = cli_arguments();

        if(empty($users)){
            throw new bException(tr('No users specified'), 'not-specified');
        }

        $in_name = sql_in($users, 'name');
        $in_id   = sql_in($users, 'id');

        if(FORCE){
            $status = '';

        }else{
            $status = ' AND `status` IS NULL ';
        }

        $r  = sql_query('UPDATE `users`

                         SET    `status` = "deleted"

                         WHERE  `name` IN ('.implode(',', array_keys($in_name)).')
                         OR     `id`   IN ('.implode(',', array_keys($in_id)).')'.$status,

                         array_merge($in_name, $in_id));

        switch(!$r->rowCount()){
            case 0:
                cli_log(tr('Not deleted any users'), 'error');
                break;

            case count($argv):
                cli_log(tr('Deleted only ":deleted" users from the specified ":specified" users', array(':count' => $r->rowCount(), ':specified' => count($argv))), 'yellow');
                break;

            default:
                cli_log(tr('Deleted ":count" users', array(':count' => $r->rowCount())), 'green');
        }

        break;

    case 'undelete':
        $users = cli_arguments();

        if(empty($users)){
            throw new bException(tr('No users specified'), 'not-specified');
        }

        $in_name = sql_in($users, 'name');
        $in_id   = sql_in($users, 'id');

        if(FORCE){
            $status = '';

        }else{
            $status = ' AND `status` = "deleted" ';
        }

        $r  = sql_query('UPDATE `users`

                         SET    `status` = NULL

                         WHERE  `name` IN ('.implode(',', array_keys($in_name)).')
                         OR     `id`   IN ('.implode(',', array_keys($in_id)).')'.$status,

                         array_merge($in_name, $in_id));

        switch(!$r->rowCount()){
            case 0:
                cli_log(tr('Not undeleted any users'), 'error');
                break;

            case count($argv):
                cli_log(tr('Undeleted only ":deleted" users from the specified ":specified" users', array(':count' => $r->rowCount(), ':specified' => count($argv))), 'yellow');
                break;

            default:
                cli_log(tr('Undeleted ":count" users', array(':count' => $r->rowCount())), 'green');
        }

        break;

    case 'erase':
        $users = cli_arguments();

        if(empty($users)){
            throw new bException(tr('No users specified'), 'not-specified');
        }

        $in_name = sql_in($users, 'name');
        $in_id   = sql_in($users, 'id');

        if(FORCE){
            $status = '';

        }else{
            $status = ' AND `status` = "deleted" ';
        }

        $r  = sql_query('DELETE FROM `users`

                         WHERE       `name` IN ('.implode(',', array_keys($in_name)).')
                         OR          `id`   IN ('.implode(',', array_keys($in_id)).')'.$status,

                         array_merge($in_name, $in_id));

        switch(!$r->rowCount()){
            case 0:
                cli_log(tr('Not erased any users'), 'error');
                break;

            case count($argv):
                cli_log(tr('Erased only ":deleted" users from the specified ":specified" users', array(':count' => $r->rowCount(), ':specified' => count($argv))), 'yellow');
                break;

            default:
                cli_log(tr('Erased ":count" users', array(':count' => $r->rowCount())), 'green');
        }

        break;

    case 'password':
        /*
         * Get arguments by keyword
         */
        $user = cli_argument('--user', true);
        $pass = not_empty(cli_argument('--pass', true), cli_argument('--password', true));

        if(!$user and !$pass){
            /*
             * Get arguments by order
             */
            $user = cli_argument(1);
            $pass = cli_argument(2);
        }

        cli_no_arguments_left();

        $pass = user_test_password($pass);
        $pass = get_hash($pass, $_CONFIG['security']['passwords']['hash']);

        $r    = sql_query('UPDATE `users`

                           SET    `password` = :password

                           WHERE  `username` = :username
                           OR     `email`    = :email',

                           array(':password' => $pass,
                                 ':username' => $user,
                                 ':email'    => $user));

        if($r->rowCount()){
            cli_log(tr('Updated password for user ":user"', array(':user' => $user)), 'green');

        }else{
            $userdata = sql_get('SELECT `id`,
                                        `name`,
                                        `email`,
                                        `username`

                                 FROM    `users`

                                 WHERE  `username` = :username
                                 OR     `email`    = :email',

                                 array(':username' => $user,
                                       ':email'    => $user));

            if(!$userdata){
                throw new bException(tr('User ":user" does not exist', array(':user' => $user)), 'not-exist');
            }

            cli_log(tr('User ":user" has the same password, so it is not updated', array(':user' => $user)), 'yellow');
        }

        break;

    case 'whoami':
        cli_no_arguments_left();

        if(empty($_SESSION['user']['id'])){
            cli_log(tr('0 Nobody'));

        }else{
            cli_log($_SESSION['user']['id'].' '.$_SESSION['user']['email'].' '.$_SESSION['user']['username'].' '.$_SESSION['user']['name']);
        }

        break;

    case '':
        throw new bException(tr('No method specified'), 'unknown');

    default:
        throw new bException(tr('Unknown method ":method" specified', array(':method' => cli_method())), 'unknown');
}
?>
