#!/usr/bin/php
<?php
/*
 * This script can create new users
 */
$usage = './scripts/base/users list
./scripts/base/users list [--right RIGHT] [-r RIGHT]
./scripts/base/users create --username USERNAME --name REALNAME --email EMAIL --role ROLE [--latitude LATITUDE] [--longitude LONGITUDE] [--status STATUS] [--type TYPE] [--redirect URL] [--domain DOMAIN]
./scripts/base/users modify ID|USERNAME [--username USERNAME] [--name NAME] [--email EMAIL] [--latitude LATITUDE] [--longitude LONGITUDE] [--status STATUS] [--type TYPE] [--redirect URL] [--domain DOMAIN]
./scripts/base/users password ID|USERNAME
./scripts/base/users delete|undelete|erase ID|USERNAME ID|USERNAME ...
./scripts/base/users whoami
./scripts/base/users set-role USERID|USERNAME ROLEID|ROLENAME';

$help  = 'This is the users management script



METHODS



list                            - List currently available users. By default the
                                  system will only limit 200 users. It\'s
                                  possible to filter users by id, type, name,
                                  username, nickname, or email (See --filters).
                                  By default, users with status not "null" are
                                  not shown.


    -f --filter --filters FILTER- General filter for the  displayed user
                                  list, filters on id, name, username, and
                                  nickname

    -t --type TYPE              - Filter the user list by the specified
                                  type

    -s --status STATUS          - Filter the user list by the specified
                                  status (does not work with -d or -a)

    -d --deleted                - Show only deleted users (does not work with
                                  -a or -s)

    -a --all                    - Show users with all possible status (does not
                                  work with -d or -s)

    -e --email EMAIL            - Filter by specified (part of) email

    -n --name NAME              - Filter by specified (part of) name

    -u --username USERNAME      - Filter by specified (part of) username

    -r --right RIGHT            - Filter by users that have specified (part of)
                                  rights name

    -l --limit LIMIT            - Limit the amount of users to the
                                  specified number. Must be a natural number
                                  1-99999, defaults to 100



rights                          - List the rights for the users. By default the
                                  system will only limit 200 users. It\'s
                                  possible to filter users by id, type, name,
                                  username, nickname, or email (See --filters).
                                  By default, users with status not "null" are
                                  not shown.


    -f --filter --filters FILTER- General filter for the  displayed user list,
                                  filters on id, name, username, and nickname

    -t --type TYPE              - Filter the user list by the specified type

    -s --status STATUS          - Filter the user list by the specified status
                                  (does not work with -d or -a)

    -d --deleted                - Show only deleted users (does not work with
                                  -s or -a)

    -a --all                    - Show users with all possible status (does not
                                  work with -s or -d)

    -e --email EMAIL            - Filter by specified (part of) email

    -n --name NAME              - Filter by specified (part of) name

    -u --username USERNAME      - Filter by specified (part of) username

    -r --right RIGHT            - Filter by users that have specified (part
                                  of) rights name

    -l --limit LIMIT            - Limit the amount of users to the
                                  specified number. Must be a natural number
                                  1-99999, defaults to 100



create                          - Create a new user. It\'s possible to specify
                                  the columns name, username, nickname, email,
                                  latitude, longitude, status, type,redirect,
                                  domain. Will interactively ask for a password

    --name NAME                 - The real user name (e.g. John Doe)

    --username USERNAME         - The user\'s username (e.g. john), cannot
                                  contain spaces, lowercase only

    --nickname NICKNAME         - The user\'s nickname (e.g. Phoenixz)

    --email EMAIL               - The user\'s email (e.g. info@capmega.com)

    --longitude LONGITUDE      - The user\'s latitude location (e.g.
                                  19.0437505)

    --latitude LATITUDE         - The user\'s latitude location (e.g.
                                  -98.1993234)

    --status STATUS             - The user\'s status. Do not specify for
                                  "null", other options are "deleted" or any
                                  value required for your project. NOTE: Status
                                  "null" is normally considered "normal" and
                                  users with this status will be available
                                  everywhere, can login, etc. Users with status
                                  not "null" will not be able to login, will
                                  usually not show up on user lists, etc.

    --redirect REDIRECT         - URL. If specified, when the user signs in, it
                                  will always be redirected to the specified
                                  URL

    --domain DOMAIN             - FQDN. Should only be used when whitelabel
                                  system is enabled. If specified, the user
                                  will only be able to sign in on this domain



modify USER                     - Modify the specified user. USER can be
                                  specified by id, username, or email. It\'s
                                  possible to update the username, name,
                                  nickname, email, phones, longitude, latitude,
                                  domain or redirect. The following items can
                                  be updated:

    --name NAME                 - The real user name (e.g. John Doe)

    --username USERNAME         - The user\'s username (e.g. john), cannot
                                  contain spaces, lowercase only

    --nickname NICKNAME         - The user\'s nickname (e.g. Phoenixz)

    --email EMAIL               - The user\'s email (e.g. info@capmega.com)

    --longitude LONGITUDE       - The user\'s latitude location (e.g.
                                  19.0437505)

    --latitude LATITUDE         - The user\'s latitude location (e.g.
                                  -98.1993234)

    --redirect REDIRECT         - URL. If specified, when the user signs in, it
                                  will always be redirected to the specified
                                  URL

    --domain DOMAIN             - FQDN. Should only be used when whitelabel
                                  system is enabled. If specified, the user
                                  will only be able to sign in on this domain



show USERS[_ID]                 - Show all details for the specified USER



password USER                   - Update the password for the specified user.
                                  USER can be specified by id, username, or
                                  email.



unlock USERS[_ID]               - Unlock the specified users. USERS is a space
                                  separated list, and can be specified by id,
                                  username, or email.



set-role USER[S_ID] ROLE[S_ID]  - Set the specified rol for the specified user.
                                  USER can be specified by id, username, or
                                  email. ROLE can be specified by id or name.



delete USERS[_ID]               - Delete specified users. USERS is a space
                                  separated list, and can be specified by id,
                                  username, or email. NOTE: Deleting a user
                                  will set the user\'s status to "deleted",
                                  nothing more. With this status though, users
                                  will no longer be able to sign in, nor will
                                  they show up on most lists or be used in
                                  automated systems like mailing lists.



undelete USERS [_ID]            - Undelete specified users. USERS is a space
                                  separated list, and can be specified by id,
                                  username, or email. NOTE: Undeleting a user
                                  will set the user\'s status to "null",
                                  nothing more. With this status though, users
                                  will be able to sign in again, show up on
                                  most lists or be used in automated systems
                                  like mailing lists.



erase USERS[_ID]                - Erase specified users. USERS is a space
                                  separated list, and can be specified by id,
                                  username, or email. NOTE: Erasing a user will
                                  really physically remove a user from the
                                  database. NOTE: Since the database will
                                  usually have many table columns pointing
                                  towards their entry with foreign keys applied,
                                  it is usually near impossible to erase a user.
                                  This is why, usually, it is enough to just
                                  delete the user.



whoami                          - Displays what user the current shell user is
                                  registered as';

require_once(__DIR__.'/../../libs/startup.php');

load_libs('user');

switch(cli_method()){
    case 'create':
        $user              = cli_arguments('--name,--email,--username,--nickname,--latitude,--longitude,--status,--type,--role,--type,--redirect,--domain');
        $user['password']  = cli_readline(tr('Please enter the users password'), true);
        $user['password2'] = cli_readline(tr('Please validate the password'), true);
        $user              = users_validate($user);

        cli_no_arguments_left();

        sql_query('INSERT INTO `users` (`createdby`, `name`, `roles_id`, `role`, `email`, `username`, `nickname`, `password`, `latitude`, `longitude`, `status`, `type`, `verifiedon`, `redirect`, `domain`)
                   VALUES              (:createdby , :name , :roles_id , :role , :email , :username , :nickname , :password , :latitude , :longitude , :status , :type , :verifiedon , :redirect , :domain )',

                   array(':createdby'  => isset_get($_SESSION['user']['id']),
                         ':roles_id'   => $user['roles_id'],
                         ':role'       => $user['role'],
                         ':name'       => $user['name'],
                         ':nickname'   => $user['nickname'],
                         ':email'      => $user['email'],
                         ':username'   => $user['username'],
                         ':password'   => get_hash($user['password'], $_CONFIG['security']['passwords']['hash']),
                         ':latitude'   => $user['latitude'],
                         ':longitude'  => $user['longitude'],
                         ':status'     => $user['status'],
                         ':type'       => $user['type'],
                         ':redirect'   => $user['redirect'],
                         ':domain'     => $user['domain'],
                         ':verifiedon' => isset_get($user['verifiedon'])));

        user_update_rights(array('id'       => sql_insert_id(),
                                 'roles_id' => $user['roles_id']));

        log_console(tr('Created user ":user" with email ":email"', array(':user' => name($user), ':email' => $user['email'])), 'green');
        break;

    case 'modify':
        $users_id = cli_argument(1);
        $user     = cli_arguments('--name,--email,--username,--latitude,--longitude,--redirect,--domain,--nickname');

        if(!$users_id){
            $v->setError(tr('No user specified'));
        }

        cli_no_arguments_left();

        /*
         * Consider only users with a specific type as real users?
         */
        $where = '';

        if($_CONFIG['users']['type_filter'] !== false){
            if($_CONFIG['users']['type_filter'] === null){
                $where = ' AND `users`.`type` IS NULL';

            }else{
                $where            = ' AND`users`.`type` = :type';
                $execute[':type'] = $_CONFIG['users']['type_filter'];
            }
        }

        $db_user = sql_get('SELECT `id`,
                                   `username`,
                                   `nickname`,
                                   `name`,
                                   `email`,
                                   `status`,
                                   `redirect`,
                                   `longitude`,
                                   `latitude`,
                                   `domain`

                            FROM   `users`

                            WHERE (`id`       = :id
                            OR     `username` = :username
                            OR     `email`    = :email)'.$where,

                            array(':id'       => $users_id,
                                  ':username' => $users_id,
                                  ':email'    => $users_id));

        if(!$db_user){
            throw new bException(tr('Specified user ":user" does not exist', array(':user' => $users_id)), 'warning/not-exist');
        }

        $user = sql_merge($db_user, $user);
        $user = users_validate($user, array('password'            => false,
                                            'validation_password' => false,
                                            'role'                => false));

        /*
         * Modify what exactly?
         */
        $r = sql_query('UPDATE `users`

                        SET    `name`      = :name,
                               `email`     = :email,
                               `username`  = :username,
                               `nickname`  = :nickname,
                               `latitude`  = :latitude,
                               `longitude` = :longitude,
                               `redirect`  = :redirect,
                               `domain`    = :domain

                        WHERE  `id`        = :id',

                        array(':name'      => $user['name'],
                              ':email'     => $user['email'],
                              ':username'  => $user['username'],
                              ':nickname'  => $user['nickname'],
                              ':latitude'  => $user['latitude'],
                              ':longitude' => $user['longitude'],
                              ':redirect'  => $user['redirect'],
                              ':domain'    => $user['domain'],
                              ':id'        => $db_user['id']));

        if(!$r->rowCount()){
            log_console(tr('Not modified anything for user ":user"', array(':user' => name($user))), 'yellow');

        }else{
            log_console(tr('Modified user ":user"', array(':user' => name($user))), 'green');
        }

        break;

    case 'give-role':
        // FALLTHROUGH
    case 'set-role':
        load_libs('roles');

        /*
         * Get arguments by keyword
         */
        $specified_role = cli_argument('--role', true);
        $specified_user = cli_argument('--user', true);

        if(!$specified_role and !$specified_user){
            /*
             * Get arguments by order
             */
            $specified_user = cli_argument(1);
            $specified_role = cli_argument(2);
        }

        cli_no_arguments_left();

        if(!$specified_user){
            throw new bException(tr('No user specified'), 'warning/not-specified');
        }

        $user = user_get($specified_user);

        if(!$user){
            throw new bException(tr('Specified user ":user" does not exist', array(':user' => $specified_user)), 'warning/not-exist');
        }

        if(!$specified_role){
            throw new bException(tr('No role specified for user ":user"', array(':user' => $user)), 'warning/not-specified');
        }

        $role = roles_get($specified_role, 'id,name');

        if(!$role){
            throw new bException(tr('Specified role ":role" does not exist', array(':role' => $specified_role)), 'warning/not-exist');
        }

        $user['roles_id'] = $role['id'];

        sql_query('UPDATE `users`

                   SET    `roles_id` = :roles_id,
                          `role`     = :role

                   WHERE  `id`       = :users_id',

                   array(':users_id' => $user['id'],
                         ':roles_id' => $role['id'],
                         ':role'     => $role['name']));

        user_update_rights($user);
        log_console(tr('Gave role ":role" to user ":user"', array(':role' => $role['name'], ':user' => name($user))), 'green');
        break;

    case 'rights':
        $deleted     = cli_argument('-d') or cli_argument('--deleted');
        $all         = cli_argument('-a') or cli_argument('--all');

        $type        = not_empty(cli_argument('-t', true), cli_argument('--type'    , true));
        $status      = not_empty(cli_argument('-s', true), cli_argument('--status'  , true), null);
        $limit       = not_empty(cli_argument('-l', true), cli_argument('--limit'   , true), 100);
        $email       = not_empty(cli_argument('-e', true), cli_argument('--email'   , true));
        $name        = not_empty(cli_argument('-n', true), cli_argument('--name'    , true));
        $username    = not_empty(cli_argument('-u', true), cli_argument('--username', true));
        $right       = cli_argument('-r') or cli_argument('--show-rights');

        $filters     = not_empty(cli_argument('-f', true), cli_argument('--filter', true), cli_argument('--filters', true));
        $filters     = array_merge(array_force($filters), $argv);

        cli_no_arguments_left();

        $execute     = array();

        if(!is_natural($limit) or (!$limit > 99999)){
            throw new bException(tr('--limit must be followed by a natural number lower than 99999'), 'warning/invalid');
        }

        if($status and $deleted and $all){
            throw new bException(tr('--deleted, --status, and --all cannot be used together. Use only one of the three'), 'warning/invalid');
        }

        if($status and $deleted){
            throw new bException(tr('--status, --deleted cannot be used together. Use only one of the two'), 'warning/invalid');
        }

        if($status and $all){
            throw new bException(tr('--status, --all cannot be used together. Use only one of the two'), 'warning/invalid');
        }

        if($deleted and $all){
            throw new bException(tr('--deleted, --all cannot be used together. Use only one of the two'), 'warning/invalid');
        }

        if($deleted){
            $where[] = ' `users`.`status` = "deleted" ';

        }elseif($status){
            $where[] = ' `users`.`status` = :status ';
            $execute[':status'] = $status;

        }elseif(!$all){
            $where[] = ' `users`.`status` IS NULL ';
        }

        if($type){
            $where[] = ' `users`.`type` = :type ';
            $execute[':type'] = $type;

        }else{
            /*
             * Consider only users with a specific type as real users?
             */
            if($_CONFIG['users']['type_filter'] !== false){
                if($_CONFIG['users']['type_filter'] === null){
                    $where[] .= ' `users`.`type` IS NULL';

                }else{
                    $where[] .= ' `users`.`type` = :type';

                    $execute[':type'] = $_CONFIG['users']['type_filter'];
                }
            }
        }

        if($name){
            $where[] = ' (`users`.`name` LIKE :name OR `users`.`nickname` LIKE :nickname) ';

            $execute[':name']     = '%'.$name.'%';
            $execute[':nickname'] = '%'.$name.'%';
        }

        if($username){
            $where[] = ' `users`.`username` LIKE :username ';

            $execute[':username'] = '%'.$username.'%';
        }

        if($email){
            $where[] = ' `users`.`email` LIKE :email ';

            $execute[':email'] = '%'.$email.'%';
        }

        if($filters){
            $count = 0;

            foreach($filters as $filter){
                $list[] = ' `users`.`name`     LIKE :name'.$count.' ';
                $list[] = ' `users`.`email`    LIKE :email'.$count.' ';
                $list[] = ' `users`.`username` LIKE :username'.$count.' ';
                $list[] = ' `users`.`nickname` LIKE :nickname'.$count.' ';

                $execute[':name'.$count]     = '%'.$filter.'%';
                $execute[':email'.$count]    = '%'.$filter.'%';
                $execute[':username'.$count] = '%'.$filter.'%';
                $execute[':nickname'.$count] = '%'.$filter.'%';

                $count++;
            }

            if(!empty($list)){
                $where[] = ' ('.implode(' OR ', $list).') ';
            }
        }

        log_console(tr('Showing rights for users'), 'QUIET/white');

        $query   = 'SELECT    `users`.`id`,
                              `users`.`username`,
                              `users`.`nickname`,
                              `users`.`email`,
                              `users`.`status`,
                              `users`.`roles_id`,
                              `users`.`locked_until`,
                              `users`.`auth_fails`,
                              `users`.`signin_count`,
                              `users`.`role`

                    FROM      `users`';

        if(!empty($where)){
            $where = ' WHERE '.implode(' AND ', $where);
        }

        $r = sql_query($query.$where.($limit ? ' LIMIT '.$limit : ''), $execute);

        if(!$r->rowCount()){
            log_console(tr('There are currently no users registered'), 'QUIET/yellow');

        }else{
            log_console(str_size(tr('#id'), 7).str_size(tr('Username'), 13).str_size(tr('Nickname'), 13).str_size(tr('Status'), 11).str_size(tr('Role'), 11).tr('Rights'), 'QUIET/cyan');

            while($user = sql_fetch($r)){
                $rights = sql_list('SELECT `rights`.`name`

                                    FROM   `roles_rights`

                                    JOIN   `rights`
                                    ON     `rights`.`id` = `roles_rights`.`rights_id`

                                    AND    `roles_id`    = :roles_id',

                                    array(':roles_id'    => $user['roles_id']));

                log_console(str_size($user['id'], 6, ' ', true).' '.str_size($user['username'], 12).' '.str_size($user['nickname'], 12).' '.str_size(cli_status_color($user['status']), 10).' '.str_size(not_empty($user['role'], '-'), 10).' '.not_empty(str_force($rights, ', '), '-'));
            }
        }

        break;

    case 'list':
        $deleted     = cli_argument('-d') or cli_argument('--deleted');
        $all         = cli_argument('-a') or cli_argument('--all');

        $type        = not_empty(cli_argument('-t', true), cli_argument('--type'    , true));
        $status      = not_empty(cli_argument('-s', true), cli_argument('--status'  , true), null);
        $limit       = not_empty(cli_argument('-l', true), cli_argument('--limit'   , true), 100);
        $email       = not_empty(cli_argument('-e', true), cli_argument('--email'   , true));
        $name        = not_empty(cli_argument('-n', true), cli_argument('--name'    , true));
        $username    = not_empty(cli_argument('-u', true), cli_argument('--username', true));
        $right       = cli_argument('-r') or cli_argument('--show-rights');

        $filters     = not_empty(cli_argument('-f', true), cli_argument('--filter', true), cli_argument('--filters', true));
        $filters     = array_merge(array_force($filters), $argv);
        $execute     = array();

        cli_no_arguments_left();

        if(!is_natural($limit, 0) or (!$limit > 99999)){
            throw new bException(tr('--limit must be followed by a natural number lower than 99999'), 'warning/invalid');
        }

        if($status and $deleted and $all){
            throw new bException(tr('--deleted, --status, and --all cannot be used together. Use only one of the three'), 'warning/invalid');
        }

        if($status and $deleted){
            throw new bException(tr('--status, --deleted cannot be used together. Use only one of the two'), 'warning/invalid');
        }

        if($status and $all){
            throw new bException(tr('--status, --all cannot be used together. Use only one of the two'), 'warning/invalid');
        }

        if($deleted and $all){
            throw new bException(tr('--deleted, --all cannot be used together. Use only one of the two'), 'warning/invalid');
        }

        if($deleted){
            $where[] = ' `users`.`status` = "deleted" ';

        }elseif($status){
            $where[] = ' `users`.`status` = :status ';
            $execute[':status'] = $status;

        }elseif(!$all){
            $where[] = ' `users`.`status` IS NULL ';
        }

        if($type){
            $where[] = ' `users`.`type` = :type ';
            $execute[':type'] = $type;

        }else{
            /*
             * Consider only users with a specific type as real users?
             */
            if($_CONFIG['users']['type_filter'] !== false){
                if($_CONFIG['users']['type_filter'] === null){
                    $where[] .= ' `users`.`type` IS NULL';

                }else{
                    $where[] .= ' `users`.`type` = :type';

                    $execute[':type'] = $_CONFIG['users']['type_filter'];
                }
            }
        }

        if($name){
            $where[] = ' (`users`.`name` LIKE :name OR `users`.`nickname` LIKE :nickname) ';

            $execute[':name']     = '%'.$name.'%';
            $execute[':nickname'] = '%'.$name.'%';
        }

        if($username){
            $where[] = ' `users`.`username` LIKE :username ';

            $execute[':username'] = '%'.$username.'%';
        }

        if($email){
            $where[] = ' `users`.`email` LIKE :email ';

            $execute[':email'] = '%'.$email.'%';
        }

        if($filters){
            $count = 0;

            foreach($filters as $filter){
                $list[] = ' `users`.`name`     LIKE :name'.$count.' ';
                $list[] = ' `users`.`email`    LIKE :email'.$count.' ';
                $list[] = ' `users`.`username` LIKE :username'.$count.' ';
                $list[] = ' `users`.`nickname` LIKE :nickname'.$count.' ';

                $execute[':name'.$count]     = '%'.$filter.'%';
                $execute[':email'.$count]    = '%'.$filter.'%';
                $execute[':username'.$count] = '%'.$filter.'%';
                $execute[':nickname'.$count] = '%'.$filter.'%';

                $count++;
            }

            if(!empty($list)){
                $where[] = ' ('.implode(' OR ', $list).') ';
            }
        }

        $query   = 'SELECT    `users`.`id`,
                              `users`.`name`,
                              `users`.`username`,
                              `users`.`nickname`,
                              `users`.`email`,
                              `users`.`status`,
                              `users`.`type`,
                              `users`.`role`,
                              `users`.`locked_until`,
                              `users`.`auth_fails`,
                              `users`.`signin_count`,
                              `users_admin`.`name` IS NOT NULL AS `admin`,
                              `users_god`.`name`   IS NOT NULL AS `god`

                    FROM      `users`

                    LEFT JOIN `users_rights` AS `users_admin`
                    ON        `users_admin`.`name`     = "admin"
                    AND       `users_admin`.`users_id` = `users`.`id`

                    LEFT JOIN `users_rights` AS `users_god`
                    ON        `users_god`.`name`       = "god"
                    AND       `users_god`.`users_id`   = `users`.`id`';

        if(!empty($where)){
            $where = ' WHERE '.implode(' AND ', $where);
        }

        $r = sql_query($query.$where.(ORDERBY ? ORDERBY : '').($limit ? ' LIMIT '.$limit : ''), $execute);

        if(!$r->rowCount()){
                log_console(tr('There are currently no users registered'), 'QUIET/yellow');

        }else{
            log_console(str_size(tr('#id'), 7).str_size(tr('Status'), 11).str_size(tr('Username'), 13).str_size(tr('Nickname'), 13).str_size(tr('Type'), 11).str_size(tr('Role'), 11).str_size(tr('Admin'), 6).str_size(tr('God'), 4).str_size(tr('Signin count'), 13).str_size(tr('Locked until'), 21).str_size(tr('Auth failures'), 14).str_size(tr('Real name'), 33).str_size(tr('Email'), 33), 'QUIET/cyan');

            while($user = sql_fetch($r)){
                log_console(str_size($user['id'], 6, ' ', true).' '.str_size(cli_status_color($user['status']), 10).' '.str_size($user['username'], 12).' '.str_size($user['nickname'], 12).' '.str_size($user['type'], 10).' '.str_size($user['role'], 10).' '.str_size(($user['admin'] ? 'Yes' : ''), 5).' '.str_size(($user['god'] ? 'Yes' : ''), 3).' '.str_size($user['signin_count'], 12, ' ', true).' '.str_size($user['locked_until'] ? $user['locked_until'] : '-', 20).' '.str_size($user['auth_fails'] ? $user['auth_fails'] : '-', 13, ' ', true).' '.str_size($user['name'], 32).' '.str_size($user['email'], 32));
            }
        }

        break;

    case 'show':
        $requested = cli_argument();

        if(!$requested){
            throw new bException(tr('Specified user is invalid'), 'warning/not-specified');
        }

        if(is_numeric($requested)){
            $where = ' WHERE `id` = :id ';

            $execute = array(':id' => $requested);

        }elseif(is_string($requested)){
            $where = ' WHERE `username` = :username OR `email` = :email ';

            $execute = array(':username' => $requested,
                             ':email'    => $requested);

        }else{
            throw new bException(tr('Specified user is invalid'), 'warning/invalid');
        }

        $user = sql_get('SELECT * FROM `users` '.$where, $execute);

        if(!$user){
            throw new bException(tr('Specified user ":user" does not exist', array(':user' => $requested)), 'warning/not-exist');
        }

        ksort($user);

        foreach($user as $key => $value){
            if($key == 'password') continue;
            log_console(cli_color(str_capitalize($key).':', 'white').' '.$value);
        }

        break;

    case 'unlock':
        $users = cli_arguments();

        if(empty($users)){
            throw new bException(tr('No users specified'), 'warning/not-specified');
        }

        /*
         * Build a list of ids and names / emails
         */
        $execute = array();
        $name    = array();
        $id      = array();
        $where   = array();

        foreach($users as $user){
            if(is_numeric($user)){
                $id[] = $user;

            }else{
                $name[] = $user;
            }
        }

        if($name){
            $email = sql_in($name, ':name');
            $name  = sql_in($name, ':email');

            $execute = array_merge($execute, $email);
            $execute = array_merge($execute, $name);

            $in[] = ' `name`  IN ('.implode(',', array_keys($name)).') ';
            $in[] = ' `email` IN ('.implode(',', array_keys($email)).') ';
        }

        if($id){
            $id      = sql_in($id, ':id');
            $execute = array_merge($execute, $id);

            $in[] = ' `id`  IN ('.implode(',', array_keys($id)).') ';
        }

        $where[] = implode(' OR ', $in);

        $r  = sql_query('UPDATE `users`

                         SET    `locked_until` = NULL,
                                `auth_fails`   = 0

                         WHERE  '.implode(' AND ', $where),

                         $execute);

        switch($r->rowCount()){
            case 0:
                throw new bException (tr('Not unlocked any users'), 'warning/no-change');

            case count($users):
                log_console(tr('Unlocked ":count" users', array(':count' => $r->rowCount())), 'green');
                break;

            default:
                throw new bException(tr('Unlocked only ":count" users from the specified ":specified" users', array(':count' => $r->rowCount(), ':specified' => count($users))), 'warning/partial-change');
        }

        break;

    case 'delete':
        // FALLTRGOUGH
    case 'undelete':
        $users = cli_arguments();

        if(empty($users)){
            throw new bException(tr('No users specified'), 'warning/not-specified');
        }

        /*
         * Build a list of ids and names / emails
         */
        $execute = array();
        $name    = array();
        $id      = array();
        $where   = array(' `role` != "god" ');

        foreach($users as $user){
            if(is_numeric($user)){
                $id[] = $user;

            }else{
                $name[] = $user;
            }
        }

        if($name){
            $email = sql_in($name, ':name');
            $name  = sql_in($name, ':email');

            $execute = array_merge($execute, $email);
            $execute = array_merge($execute, $name);

            $in[] = ' `name`  IN ('.implode(',', array_keys($name)).') ';
            $in[] = ' `email` IN ('.implode(',', array_keys($email)).') ';
        }

        if($id){
            $id      = sql_in($id, ':id');
            $execute = array_merge($execute, $id);

            $in[] = ' `id`  IN ('.implode(',', array_keys($id)).') ';
        }

        $where[] = implode(' OR ', $in);

        switch(cli_method()){
            case 'erase':
                $query = 'DELETE FROM UPDATE users` WHERE  '.implode(' AND ', $where);

            case 'undelete':
                $query = 'UPDATE `users`

                          SET    `status` = null

                          WHERE  '.implode(' AND ', $where);
                break;

            case 'delete':
                $query = ' UPDATE `users`

                          SET    `status` = "deleted"

                          WHERE  '.implode(' AND ', $where);
                break;
        }

        $r = sql_query($query, $execute);

        switch(cli_method()){
            case 'erase':
                switch($r->rowCount()){
                    case 0:
                        log_console(tr('Not erased any users'), 'yellow');
                        break;

                    case count($users):
                        log_console(tr('Erased ":count" users', array(':count' => $r->rowCount())), 'green');
                        break;

                    default:
                        throw new bException(tr('Erased only ":deleted" users from the specified ":specified" users', array(':count' => $r->rowCount(), ':specified' => count($users))), 'warning/partial-change');
                }

                break;

            case 'undelete':
                switch($r->rowCount()){
                    case 0:
                        log_console(tr('Not undeleted any users'), 'yellow');
                        break;

                    case count($users):
                        log_console(tr('Undeleted ":count" users', array(':count' => $r->rowCount())), 'green');
                        break;

                    default:
                        throw new bException(tr('Undeleted only ":deleted" users from the specified ":specified" users', array(':count' => $r->rowCount(), ':specified' => count($users))), 'warning/partial-change');
                }

                break;

            case 'delete':
                switch($r->rowCount()){
                    case 0:
                        log_console(tr('Not deleted any users'), 'yellow');
                        break;

                    case count($users):
                        log_console(tr('Deleted ":count" users', array(':count' => $r->rowCount())), 'green');
                        break;

                    default:
                        throw new bException(tr('Deleted only ":deleted" users from the specified ":specified" users', array(':count' => $r->rowCount(), ':specified' => count($users))), 'warning/partial-change');
                }

                break;
        }

        break;

    case 'password':
        /*
         * Get arguments by keyword
         */
        $requested = cli_argument();
        cli_no_arguments_left();

        if(!$requested){
            throw new bException(tr('No user specified'), 'warning/not-specified');
        }

        if(is_numeric($requested)){
            $user = sql_get('SELECT `id`, `name`, `nickname`, `email`, `username` FROM `users` WHERE `id` = :id', array(':id' => $requested));

        }elseif(is_string($requested)){
            $user = sql_get('SELECT `id`, `name`, `nickname`, `email`, `username`  FROM `users` WHERE `username` = :username OR `email` = :email', array(':username' => $requested, ':email' => $requested));

        }else{
            throw new bException(tr('Specified user is invalid'), 'warning/invalid');
        }

        if(!$user){
            throw new bException(tr('Specified user ":user" does not exist'), 'warning/not-exist');
        }

        $password = cli_readline(tr('Password: ')       , true);

        if((strlen($password) < 8) and !FORCE){
            /*
             * This will fail later anyway
             */
            throw new bException(tr('Specified password is too short'), 'warning/validation');
        }

        $verify   = cli_readline(tr('Verify password: '), true);

        if($password != $verify){
            throw new bException(tr('Specified password does not match the verification'), 'warning/verification');
        }

        try{
            user_password_strength($password);

        }catch(Exception $e){
            switch($e->getCode()){
                case 'used-before':
                    if(!FORCE){
                        throw $e->setCode('warning/used-before');
                    }

                    log_console(tr('Warning: Password update gave error ":e" which is ignored due to FORCE mode', array(':e' => trim(str_from($e->getMessage(), '():')))), 'yellow');
                    break;

                case 'banned':
                    if(!FORCE){
                        throw $e->setCode('warning/banned');
                    }

                    log_console(tr('Warning: Password update gave error ":e" which is ignored due to FORCE mode', array(':e' => trim(str_from($e->getMessage(), '():')))), 'yellow');
                    break;

                case 'validation':
                    if(!FORCE){
                        throw $e->setCode('warning/validation');
                    }

                    log_console(tr('Warning: Password update gave error ":e" which is ignored due to FORCE mode', array(':e' => trim(str_from($e->getMessage(), '():')))), 'yellow');
                    break;

                case 'not-specified':
                    if(!FORCE){
                       throw $e->setCode('warning/not-specified');
                    }

                    log_console(tr('Warning: Password update gave error ":e" which is ignored due to FORCE mode', array(':e' => trim(str_from($e->getMessage(), '():')))), 'yellow');
                    break;

                default:
                    /*
                     * Erw, something went really wrong!
                     */
                    throw $e;
             }
        }

        $updated = user_update_password(array('id'        => $user['id'],
                                              'validated' => true,
                                              'password'  => $password,
                                              'password2' => $password), false);


        if(!$updated){
            throw new bException(tr('Password is the same, not updated', array(':user' => $user)), 'warning/not-updated');
        }

        log_console(tr('Updated password for user ":user"', array(':user' => name($user))), 'green');
        break;

    case 'whoami':
        cli_no_arguments_left();

        if(empty($_SESSION['user']['id'])){
            log_console(tr('0 Nobody'));

        }else{
            log_console($_SESSION['user']['id'].' '.$_SESSION['user']['email'].' '.$_SESSION['user']['username'].' '.$_SESSION['user']['name']);
        }

        break;

    case '':
        throw new bException(tr('No method specified'), 'no-method');

    default:
        throw new bException(tr('Unknown method ":method" specified', array(':method' => cli_method())), 'unknown-method');
}
?>
