#!/usr/bin/php
<?php
/*
 * This script can create new users
 */
$usage = "./scripts/base/users list\n".
         "./scripts/base/users list [--with-right RIGHT] [-r RIGHT] \n".
         "./scripts/base/users create --username USERNAME --name REALNAME --email EMAIL --password PASSWORD [--latitude LATITUDE] [--longitude LONGITUDE] [--status STATUS] [--type TYPE] [--redirect URL] [--domain DOMAIN]\n".
         "./scripts/base/users modify ID|USERNAME [--username USERNAME] [--name NAME] [--email EMAIL] [--latitude LATITUDE] [--longitude LONGITUDE] [--status STATUS] [--type TYPE] [--redirect URL] [--domain DOMAIN] \n".
         "./scripts/base/users password ID|USERNAME PASSWORD\n".
         "./scripts/base/users delete|undelete|erase ID|USERNAME ID|USERNAME ...\n".
         "./scripts/base/users whoami\n".
         "./scripts/base/users setrole USERID|USERNAME ROLEID|ROLENAME\n".
         "./scripts/base/users setrole --user USERID|USERNAME --role ROLEID|ROLENAME\n";

$help  = "This is the users management script";

require_once(dirname(__FILE__).'/../../libs/startup.php');

load_libs('user');

switch(cli_method()){
    case 'create':
        $user = cli_arguments('--name,--email,--username,--password,--latitude,--longitude,--status,--type,--role,--type,--redirect,--domain');
        $user = users_validate($user, array('validation_password' => false));

        cli_no_arguments_left();

        sql_query('INSERT INTO `users` (`createdby`, `name`, `email`, `username`, `password`, `latitude`, `longitude`, `status`, `type`, `validated`, `redirect`, `domain`)
                   VALUES              (:createdby , :name , :email , :username , :password , :latitude , :longitude , :status , :type , :validated , :redirect , :domain)',

                   array(':createdby' => isset_get($_SESSION['user']['id']),
                         ':name'      => $user['name'],
                         ':email'     => $user['email'],
                         ':username'  => $user['username'],
                         ':password'  => get_hash($user['password'], $_CONFIG['security']['passwords']['hash']),
                         ':latitude'  => $user['latitude'],
                         ':longitude' => $user['longitude'],
                         ':status'    => $user['status'],
                         ':type'      => $user['type'],
                         ':redirect'  => $user['redirect'],
                         ':domain'    => $user['domain'],
                         ':validated' => isset_get($user['validated'])));


        cli_log(tr('Created user ":user" with email ":email"', array(':user' => user_name($user), ':email' => $user['email'])), 'green');
        break;

    case 'modify':
        $users_id = cli_argument(1);

        if(!$users_id){
            $v->setError(tr('No user specified'));
        }

        $user = cli_arguments('--name,--email,--username,--latitude,--longitude,--redirect,--domain');
        cli_no_arguments_left();

        /*
         * Consider only users with a specific type as real users?
         */
        $where = '';

        if($_CONFIG['users']['type_filter'] !== false){
            if($_CONFIG['users']['type_filter'] === null){
                $where = ' AND `users`.`type` IS NULL';

            }else{
                $where            = ' AND`users`.`type` = :type';
                $execute[':type'] = $_CONFIG['users']['type_filter'];
            }
        }

        $db_user = sql_get('SELECT `id`,
                                   `username`,
                                   `name`,
                                   `email`,
                                   `status`,
                                   `redirect`,
                                   `domain`

                            FROM   `users`

                            WHERE (`id`       = :user
                            OR     `username` = :user
                            OR     `email`    = :user)'.$where,

                            array(':user' => $users_id));

        if(!$db_user){
            throw new bException(tr('Specified user ":user" does not exist', array(':user' => $users_id)), 'not-exist');
        }

        $user = sql_merge($db_user, $user);
        $user = users_validate($user, array('password'            => false,
                                            'validation_password' => false,
                                            'role'                => false));

        /*
         * Modify what exactly?
         */
        $r = sql_query('UPDATE `users`

                        SET    `name`      = :name,
                               `email`     = :email,
                               `username`  = :username,
                               `latitude`  = :latitude,
                               `longitude` = :longitude,
                               `redirect`  = :redirect,
                               `domain`    = :domain

                        WHERE  `id`        = :id',

                        array(':name'      => $user['name'],
                              ':email'     => $user['email'],
                              ':username'  => $user['username'],
                              ':latitude'  => $user['latitude'],
                              ':longitude' => $user['longitude'],
                              ':redirect'  => $user['redirect'],
                              ':domain'    => $user['domain'],
                              ':id'        => $db_user['id']));

        if(!$r->rowCount()){
            cli_log(tr('Not modified anything for user ":user"', array(':user' => user_name($user))), 'yellow');

        }else{
            cli_log(tr('Modified user ":user"', array(':user' => user_name($user))), 'green');
        }

        break;

    case 'giverole':
        // FALLTHROUGH
    case 'setrole':
        load_libs('roles');

        /*
         * Get arguments by keyword
         */
        $role = cli_argument('--role', true);
        $user = cli_argument('--user', true);

        if(!$role and !$user){
            /*
             * Get arguments by order
             */
            $role = cli_argument(1);
            $user = cli_argument(2);
        }

        cli_no_arguments_left();

        if(!$user){
            throw new bException(tr('No user specified'), 'not-specified');
        }

        $user = user_get($user);

        if(!$role){
            throw new bException(tr('No role specified for user ":user"', array(':user' => $user)), 'not-specified');
        }

        $role             = roles_get($role, 'id,name');
        $user['roles_id'] = $role['id'];

        sql_query('UPDATE `users`

                   SET    `roles_id` = :roles_id

                   WHERE  `id`       = :users_id',

                   array(':users_id' => $user['id'],
                         ':roles_id' => $role['id']));

        user_update_rights($user);
        cli_log(tr('Gave role ":role" to user ":user"', array(':role' => $role['name'], ':user' => user_name($user))), 'green');
        break;

    case 'list':
        $show_rights = cli_argument('-r') or cli_argument('--show-rights');

        cli_no_arguments_left();

        if($show_rights){
            cli_log(tr('Showing rights for users'));

            $limit   = 200;

            $query   = 'SELECT    `users`.`id`,
                                  `users`.`username`,
                                  `users`.`email`,
                                  `users`.`status`,
                                  `users`.`roles_id`

                        FROM      `users`';

            $execute = array();

            /*
             * Consider only users with a specific type as real users?
             */
            if($_CONFIG['users']['type_filter'] !== false){
                if($_CONFIG['users']['type_filter'] === null){
                    $query           .= ' WHERE `users`.`type` IS NULL';

                }else{
                    $query           .= ' WHERE `users`.`type` = :type';
                    $execute[':type'] = $_CONFIG['users']['type_filter'];
                }
            }

            $r = sql_query($query.($limit ? ' LIMIT '.$limit : ''));

            if(!$r->rowCount()){
                cli_log(tr('There are currently no users registered'), 'yellow');

            }else{
                cli_log(tr('#id    Username     Status     Rights'), 'cyan');

                while($user = sql_fetch($r)){
                    $rights = sql_list('SELECT    `rights`.`name`

                                        FROM      `roles_rights`

                                        JOIN      `rights`
                                        ON        `rights`.`id` = `roles_rights`.`rights_id`

                                        AND       `roles_id` = :roles_id',

                                        array(':roles_id' => $user['roles_id']));

                    cli_log(str_size($user['id'], 6, ' ', true).' '.str_size($user['username'], 12).' '.str_size(status($user['status']), 10).' '.str_force($rights, ', '));
                }
            }

        }else{
            $limit   = 200;

            $query   = 'SELECT    `users`.`id`,
                                  `users`.`name`,
                                  `users`.`username`,
                                  `users`.`email`,
                                  `users`.`status`,
                                  `users`.`type`,
                                  `users`.`role`,
                                  `users_admin`.`name` IS NOT NULL AS `admin`,
                                  `users_god`.`name`   IS NOT NULL AS `god`

                        FROM      `users`

                        LEFT JOIN `users_rights` AS `users_admin`
                        ON        `users_admin`.`name`     = "admin"
                        AND       `users_admin`.`users_id` = `users`.`id`

                        LEFT JOIN `users_rights` AS `users_god`
                        ON        `users_god`.`name`       = "god"
                        AND       `users_god`.`users_id`   = `users`.`id`';

            $execute = array();

            /*
             * Consider only users with a specific type as real users?
             */
            if($_CONFIG['users']['type_filter'] !== false){
                if($_CONFIG['users']['type_filter'] === null){
                    $query           .= ' WHERE `users`.`type` IS NULL';

                }else{
                    $query           .= ' WHERE `users`.`type` = :type';
                    $execute[':type'] = $_CONFIG['users']['type_filter'];
                }
            }

            $r = sql_query($query.($limit ? ' LIMIT '.$limit : ''));

            if(!$r->rowCount()){
                cli_log(tr('There are currently no users registered'), 'yellow');

            }else{
                cli_log(tr('#id    Username     Status     Type       Role       Admin God Status     Real name                        Email                            '), 'cyan');

                while($user = sql_fetch($r)){
                    cli_log(str_size($user['id'], 6, ' ', true).' '.str_size($user['username'], 12).' '.str_size(status($user['status']), 10).' '.str_size($user['type'], 10).' '.str_size($user['role'], 10).' '.str_size(($user['admin'] ? 'Yes' : ''), 5).' '.str_size(($user['god'] ? 'Yes' : ''), 3).' '.str_size(status($user['status']), 10).' '.str_size($user['name'], 32).' '.str_size($user['email'], 32));
                }
            }
        }

        break;

    case 'delete':
        $users = cli_arguments();

        if(empty($users)){
            throw new bException(tr('No users specified'), 'not-specified');
        }

        $in_name = sql_in($users, 'name');
        $in_id   = sql_in($users, 'id');

        if(FORCE){
            $status = '';

        }else{
            $status = ' AND `status` IS NULL ';
        }

        $r  = sql_query('UPDATE `users`

                         SET    `status` = "deleted"

                         WHERE  `name` IN ('.implode(',', array_keys($in_name)).')
                         OR     `id`   IN ('.implode(',', array_keys($in_id)).')'.$status,

                         array_merge($in_name, $in_id));

        switch(!$r->rowCount()){
            case 0:
                cli_log(tr('Not deleted any users'), 'error');
                break;

            case count($argv):
                cli_log(tr('Deleted only ":deleted" users from the specified ":specified" users', array(':count' => $r->rowCount(), ':specified' => count($argv))), 'yellow');
                break;

            default:
                cli_log(tr('Deleted ":count" users', array(':count' => $r->rowCount())), 'green');
        }

        break;

    case 'undelete':
        $users = cli_arguments();

        if(empty($users)){
            throw new bException(tr('No users specified'), 'not-specified');
        }

        $in_name = sql_in($users, 'name');
        $in_id   = sql_in($users, 'id');

        if(FORCE){
            $status = '';

        }else{
            $status = ' AND `status` = "deleted" ';
        }

        $r  = sql_query('UPDATE `users`

                         SET    `status` = NULL

                         WHERE  `name` IN ('.implode(',', array_keys($in_name)).')
                         OR     `id`   IN ('.implode(',', array_keys($in_id)).')'.$status,

                         array_merge($in_name, $in_id));

        switch(!$r->rowCount()){
            case 0:
                cli_log(tr('Not undeleted any users'), 'error');
                break;

            case count($argv):
                cli_log(tr('Undeleted only ":deleted" users from the specified ":specified" users', array(':count' => $r->rowCount(), ':specified' => count($argv))), 'yellow');
                break;

            default:
                cli_log(tr('Undeleted ":count" users', array(':count' => $r->rowCount())), 'green');
        }

        break;

    case 'erase':
        $users = cli_arguments();

        if(empty($users)){
            throw new bException(tr('No users specified'), 'not-specified');
        }

        $in_name = sql_in($users, 'name');
        $in_id   = sql_in($users, 'id');

        if(FORCE){
            $status = '';

        }else{
            $status = ' AND `status` = "deleted" ';
        }

        $r  = sql_query('DELETE FROM `users`

                         WHERE       `name` IN ('.implode(',', array_keys($in_name)).')
                         OR          `id`   IN ('.implode(',', array_keys($in_id)).')'.$status,

                         array_merge($in_name, $in_id));

        switch(!$r->rowCount()){
            case 0:
                cli_log(tr('Not erased any users'), 'error');
                break;

            case count($argv):
                cli_log(tr('Erased only ":deleted" users from the specified ":specified" users', array(':count' => $r->rowCount(), ':specified' => count($argv))), 'yellow');
                break;

            default:
                cli_log(tr('Erased ":count" users', array(':count' => $r->rowCount())), 'green');
        }

        break;

    case 'password':
        /*
         * Get arguments by keyword
         */
        $user = cli_argument('--user', true);
        $pass = not_empty(cli_argument('--pass', true), cli_argument('--password', true));

        if(!$user and !$pass){
            /*
             * Get arguments by order
             */
            $user = cli_argument(1);
            $pass = cli_argument(2);
        }

        cli_no_arguments_left();

        $pass = user_test_password($pass);
        $pass = get_hash($pass, $_CONFIG['security']['passwords']['hash']);

        $r    = sql_query('UPDATE `users`

                           SET    `password` = :password

                           WHERE  `username` = :username
                           OR     `email`    = :email',

                           array(':password' => $pass,
                                 ':username' => $user,
                                 ':email'    => $user));

        if($r->rowCount()){
            cli_log(tr('Updated password for user ":user"', array(':user' => $user)), 'green');

        }else{
            $userdata = sql_get('SELECT `id`,
                                        `name`,
                                        `email`,
                                        `username`

                                 FROM    `users`

                                 WHERE  `username` = :username
                                 OR     `email`    = :email',

                                 array(':username' => $user,
                                       ':email'    => $user));

            if(!$userdata){
                throw new bException(tr('User ":user" does not exist', array(':user' => $user)), 'not-exist');
            }

            cli_log(tr('User ":user" has the same password, so it is not updated', array(':user' => $user)), 'yellow');
        }

        break;

    case 'whoami':
        cli_no_arguments_left();

        if(empty($_SESSION['user']['id'])){
            cli_log(tr('0 Nobody'));

        }else{
            cli_log($_SESSION['user']['id'].' '.$_SESSION['user']['email'].' '.$_SESSION['user']['username'].' '.$_SESSION['user']['name']);
        }

        break;

    case '':
        throw new bException(tr('No method specified'), 'unknown');

    default:
        throw new bException(tr('Unknown method ":method" specified', array(':method' => cli_method())), 'unknown');
}
?>
