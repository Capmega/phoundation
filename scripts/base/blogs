#!/usr/bin/php
<?php
/*
 * Blog management script
 */
$usage = './scripts/base/blogs
./scripts/base/blogs rebuild-post-urls [option]
./scripts/base/blogs reprocess-images [option]';

$help  = "This script can manage blog post information

METHODS

rebuild-post-urls              - Will update the URL's of all blog posts using
                                 the URL format for each blog, and the current
                                 configured domain name. This may be useful when
                                 blog posts were transferred to another domain
                                 name, for example.

reprocess-images               - Will take all blog post images, and recompress
                                 them and ensure they all have the configured
                                 sizes



ARGUMENTS

";

require_once(__DIR__.'/../../libs/startup.php');
load_config('blogs');

switch(cli_method()){
    case 'rebuild-post-urls':
        cli_no_arguments_left();
        log_console(tr('Updating all blog post URLs'), 'white');

        load_libs('blogs');
        blogs_update_urls(isset_get($argv));

        log_console(tr('Updated all blog posts with the URL configuration ":url"', array(':url' => $_CONFIG['blogs']['url'])), 'green');
        break;

    case 'reprocess-images':
        /*
         * Reprocess all blog images
         */
        $blogs = cli_argument('--blogs', true);

        cli_no_arguments_left();
        load_libs('file,image');

        $formats      = $_CONFIG['blogs']['images'];

        $source_types = array('original',
                              'large@2x',
                              'large');

        $query   = 'SELECT `id`,
                           `name`,
                           `seoname`,
                           `thumb_x`,
                           `thumb_y`,
                           `wide_x`,
                           `wide_y`,
                           `large_x`,
                           `large_y`,
                           `medium_x`,
                           `medium_y`,
                           `small_x`,
                           `small_y`

                    FROM   `blogs`

                    WHERE  `status` IS NULL ';

        if($blogs){
            $blogs   = array_force($blogs, ',');
            $blogs   = array_clean($blogs);
            $in      = sql_in($blogs);
            $query  .= 'AND `seoname` IN ('.implode(',', array_keys($in)).')';

            $execute = $in;

        }else{
            $execute = array();
        }



        /*
         * Process all blogs
         */
        $blogs = sql_query($query, $execute);

        while($blog = sql_fetch($blogs)){
            log_console(tr('Processing photos for blog ":blog"', array(':blog' => $blog['name'])), 'white');

            $path   = ROOT.'data/content/photos/';

            $photos = sql_query('SELECT  `id`,
                                         `blogs_posts_id`,
                                         `blogs_id`,
                                         `file`

                                 FROM    `blogs_media`

                                 WHERE   `blogs_id` = :blogs_id
                                 AND     `type`     = "photo"',

                                 array(':blogs_id' => $blog['id']));



            /*
             * Process all photos for the current blog
             */
            while($photo = sql_fetch($photos)){
                if(VERBOSE){
                    log_console(tr('Processing photo file group ":file"', array(':file' => $photo['file'])));

                }else{
                    cli_dot(1);
                }



                /*
                 * Find source file for the image to be recompressed
                 */
                $base_file = $path.$photo['file'];

                foreach($source_types as $type){
                    $source_file = $base_file.'-'.$type.'.jpg';

                    if(file_exists($source_file)){
                        break;
                    }

                    unset($source_file);
                }

                if(empty($source_file)){
                    /*
                     * No source file available for this image. Remove the image
                     * Ensure all other file formats are cleaned up as well.
                     */
                    $photo_path = dirname($base_file);
                    file_delete_tree($photo_path);
                    file_clear_path($photo_path);
                    sql_query('DELETE FROM `blogs_images` WHERE `id` = :id', array(':id' => $photo['id']));
                    log_console(tr('Failed to find source file (-origin or -large) for photo ":photo", removed all files and database references to cleanup', array(':photo' => $photo['file'])), 'yellow');
                    continue;
                }

                $source_type = str_rfrom($source_file, '-');
                $source_type = str_until($source_type, '.');



                /*
                 * Regenerate all formats according to the configured sizes for the current blog
                 */
                foreach($formats as $format => $format_data){
                    $file   = $base_file.'-'.$format.'.jpg';
                    $filex2 = $base_file.'-'.$format.'@2x.jpg';

                    if($file === $source_file){
                        /*
                         * Don't process the source file
                         */
                        continue;
                    }

                    if($format != $source_type){
                        $format_data['x'] = get_null($blog[$format.'_x']);
                        $format_data['y'] = get_null($blog[$format.'_y']);

                        file_delete($file);
                        image_convert($source_file, $file, $format_data);
                    }


                    if($format.'@2x' != $source_type){
                        $format_data['x'] = get_null($blog[$format.'_x']) * 2;
                        $format_data['y'] = get_null($blog[$format.'_y']) * 2;

                        file_delete($filex2);
                        image_convert($source_file, $filex2, $format_data);
                    }


                    usleep(5000);
                }
            }

            cli_dot(false);
        }

        sql_query('TRUNCATE `html_img_cache`');
        log_console(tr('Cleared html_img cache'), 'green');
        log_console(tr('Done!'), 'green');

        break;

    case '':
        throw new bException(tr('No method specified'), 'no-method');

    default:
        throw new bException(tr('Unknown method ":method" specified', array(':method' => cli_method())), 'unknown-method');
}
?>
