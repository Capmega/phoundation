#!/usr/bin/php
<?php
/*
 * This script can check and optionally repair database tables
 */
include_once(__DIR__.'/../../../libs/startup.php');

try{
    $repair = cli_argument('repair');
    $show   = cli_argument('show');

    if (!$user = cli_argument('username', true)) {
        throw new CoreException('No database username specified', 'not-specified');
    }

    if (!$password = cli_argument('password', true)) {
        throw new CoreException('No database password specified', 'not-specified');
    }

    log_console('Executing mysqlcheck on all database tables, this may take a minute');

    $results = safe_exec(array('commands' => array('mysqlcheck', array('-A', '-p'.$password))));

    log_console('MySQL check finished, parsing results');

    foreach($results as $line => $value) {
        if (strpos($value, 'dump/reload') !== false) {
            $fails[] = $results[$line - 1];
        }
    }

    if (empty($fails)) {
        log_console('Table check finished, all tables from all databases on the MySQL server have passed ok', 'info', 'green');
        die(0);
    }

    if (!$repair) {
        log_console('Table check finished, "'.count($fails).'" tables failed the check but no repair has been done (use the "repair" option)', 'warning', 'yellow');

        if ($show) {
            log_console('Failed tables (database.table):', '', 'yellow');

            foreach($fails as $name) {
                log_console($name, '', 'yellow');
            }
        }

        die(1);
    }

    /*
     * Start table repair
     */
    foreach($fails as $name) {
        try{
            $database = Strings::until($name, '.');
            $table    = str_from ($name, '.');

            script_exec(array('commands' => array('base/database/dropload', array('username' => $username,
                                                                                  'password' => $password,
                                                                                  'database' => $database,
                                                                                  'table'    => $table))));

        }catch(Exception $e) {
            log_console($e);
            log_console('Failed to fix db.table "'.$name.'"');
        }
    }

}catch(Exception $e) {
    throw new CoreException('scripts/database/check: Failed', $e);
}
?>
