#!/usr/bin/php
<?php
/*
 *
 */
$usage = './scripts/base/ssh
./scripts/base/ssh register HOSTNAME [SSH-PORT]
./scripts/base/ssh unregister HOSTNAME [SSH-PORT]
./scripts/base/ssh rebuild [--force]
./scripts/base/ssh HOSTNAME [ARGUMENTS] [COMMANDS]';

$help  = 'This script allows to manage SSH connections to registered servers



HOSTNAME                        - The hostname (or id) of the server to connect
                                  to. The host must be registered in the servers
                                  system, and have an SSH account linked.

COMMANDS                        - (optional) the commands to execute on the
                                  specified hostname. If no commands have been
                                  specified, then "bash" will be executed,
                                  providing a bash shell for the user



ARGUMENTS

-i,--identity-file FILE         - The identity file (private key file) that
                                  should be used for this connection

-f,--function                   - What PHP function to use to execute this
                                  command. Defaults to passthru, forces passthru
                                  if no command has been specified

-b,--background                 - Execute in background. This will execute the
                                  entire command in the background and return
                                  the command prompt. NOTE: This option will not
                                  generate any output on the command line


METHODS

register HOSTNAME [SSH-PORT]    - Register the fingerprint for the specified
                                  hostname and port in the ssh_fingerprints
                                  table and ROOT/data/ssh/known_hosts file

unregister HOSTNAME [SSH-PORT]  - Register the fingerprint for the specified
                                  hostname and port in the ssh_fingerprints
                                  table and ROOT/data/ssh/known_hosts file

rebuild                         - Rebuild the known_host file from the
                                  `ssh_fingerprints` table by adding all entries
                                  from the table. It will NOT delete entries
                                  that are already in the file. If FORCE is
                                  specified, the file will first be deleted and
                                  then rebuild with only entries from the table';

require_once(__DIR__.'/../../libs/startup.php');
cli_only();
load_libs('servers');

switch(cli_method()){
    case 'register':
        $hostname = cli_argument(1);
        $port     = cli_argument(2);
        cli_no_arguments_left();

        $count = ssh_add_known_host($hostname, $port);

        if($count){
            log_console(tr('Added ":count" hostnames', array(':count' => $count)), 'green');

        }else{
            log_console(tr('Added no hostnames, hostname was probably already registered'), 'yellow');
        }

        break;

    case 'unregister':
        $hostname = cli_argument(1);
        $port     = cli_argument(2);
        cli_no_arguments_left();

        $count = ssh_remove_known_host($hostname, $port);

        if($count){
            log_console(tr('Removed ":count" hostnames', array(':count' => $count)), 'green');

        }else{
            log_console(tr('Removed no hostnames, hostname was probably not registered'), 'yellow');
        }

        break;

    case 'rebuild':
        cli_no_arguments_left();

        $count = ssh_rebuild_known_hosts(FORCE);

        if($count){
            log_console(tr('Added ":count" hostnames', array(':count' => $count)), 'green');

        }else{
            log_console(tr('Added no hostnames, known_hosts file probably contains all hostnames from the `ssh_fingerprints` table'), 'yellow');
        }

        break;

    case '':
        throw new bException(tr('No method specified'), 'no-method');

    default:
        $background    = cli_argument('-b,--background');
        $function      = not_empty(cli_argument('-f,--function'), 'passthru');
        $identity_file = cli_argument('-i,--identity-file');
        $hostname      = cli_method();
        $port          = cli_method(1);
        $commands      = cli_argument(1);

        if(empty($hostname)){
            throw new bException(tr('No hostname specified'), 'warning/not-specified');
        }

        if(!empty($port)){
            if(!is_natural($port) or ($port > 65535)){
                throw new bException(tr('Invalid port ":port" specified', array(':port' => $port)), 'warning/invalid');
            }
        }

        if(empty($commands)){
            /*
             * Just run bash shell
             */
            $commands         = 'bash';
            $force_terminal   = true;
            $disable_terminal = false;
            $function         = 'passthru';
        }

        try{
            $server = array('hostname'         => '*'.$hostname,
                            'force_terminal'   => isset_get($force_terminal),
                            'disable_terminal' => isset_get($disable_terminal),
                            'commands'         => $commands,
                            'identity_file'    => $identity_file);

            $result = servers_exec($server, $commands, $background, $function);

        }catch(Exception $e){
            switch($e->getCode()){
                case 'multiple':
                    throw new bException(tr('Specified hostname ":hostname" matched multiple registered servers, please be more specific', array(':hostname' => $hostname)), 'warning/multiple');

                case 'not-exist':
                    throw new bException(tr('Specified hostname ":hostname" matched no registered servers', array(':hostname' => $hostname)), 'warning/not-exist');

                default:
                    throw $e;
            }
        }
}
?>