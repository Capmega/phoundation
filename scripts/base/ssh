#!/usr/bin/php
<?php
/*
 *
 */
$usage = './scripts/base/ssh
./scripts/base/ssh register HOSTNAME [SSH-PORT]
./scripts/base/ssh unregister HOSTNAME [SSH-PORT]
./scripts/base/ssh rebuild [--force]
./scripts/base/ssh HOSTNAME [ARGUMENTS] [COMMANDS]';

$help  = 'This script allows to manage SSH connections to registered servers



HOSTNAME                        - The domain (or id) of the server to connect
                                  to. The host must be registered in the servers
                                  system, and have an SSH account linked.

COMMANDS                        - (optional) the commands to execute on the
                                  specified domain. If no commands have been
                                  specified, then "bash" will be executed,
                                  providing a bash shell for the user





ARGUMENTS

-i,--identity-file FILE         - The identity file (private key file) that
                                  should be used for this connection

-f,--function                   - What PHP function to use to execute this
                                  command. Defaults to passthru, forces passthru
                                  if no command has been specified

-b,--background                 - Execute in background. This will execute the
                                  entire command in the background and return
                                  the command prompt. NOTE: This option will not
                                  generate any output on the command line


METHODS

list [%ACCOUNTNAME%]            - List all registerd server SSH accounts, or by
                                  part of specified accounts name

show [ACCOUNTNAME]              - Show all details of the specified registerd
                                  SSH account

register HOSTNAME [SSH-PORT]    - Register the fingerprint for the specified
                                  domain and port in the ssh_fingerprints
                                  table and ROOT/data/ssh/known_hosts file

unregister HOSTNAME [SSH-PORT]  - Register the fingerprint for the specified
                                  domain and port in the ssh_fingerprints
                                  table and ROOT/data/ssh/known_hosts file

rebuild                         - Rebuild the known_host file from the
                                  `ssh_fingerprints` table by adding all entries
                                  from the table. It will NOT delete entries
                                  that are already in the file. If FORCE is
                                  specified, the file will first be deleted and
                                  then rebuild with only entries from the table';

require_once(__DIR__.'/../../libs/startup.php');
cli_only();
load_libs('servers');

try {
    switch (cli_method()) {
        case 'list':
            cli_no_arguments_left();

            $execute  = array();
            $where    = array();
            $query    = 'SELECT    `ssh_accounts`.`id`,
                                   `ssh_accounts`.`createdon`,
                                   `ssh_accounts`.`createdby`,
                                   `ssh_accounts`.`status`,
                                   `ssh_accounts`.`name`,
                                   `ssh_accounts`.`seoname`,
                                   `ssh_accounts`.`username`,

                                   `users`.`name`     AS `user_name`,
                                   `users`.`email`    AS `user_email`,
                                   `users`.`username` AS `user_username`,
                                   `users`.`nickname` AS `user_nickname`

                         FROM      `ssh_accounts`

                         LEFT JOIN `users`
                         ON        `users`.`id` = `ssh_accounts`.`createdby`';

            if (DELETED) {
                $where[] = ' `ssh_accounts`.`status` = "deleted" ';

            } elseif (!ALL) {
                $where[] = ' `ssh_accounts`.`status` IS NULL ';
            }

            if (STATUS) {
                $execute = array_merge($execute, sql_in(ALL));
                $where[] = ' `ssh_accounts`.`status` IN ('.implode(', ', array_keys(ALL)).') ';
            }

            if (empty($where)) {
                $where = '';

            } else {
                $where = ' WHERE '.implode(' AND ', $where);
            }

            $order    = ' ORDER BY `ssh_accounts`.`status` IS NOT NULL DESC ';
            $accounts = sql_query($query.$where.$order.sql_limit(), $execute);

            if (!$accounts->rowCount()) {
                    log_console(tr('There are currently no accounts registered'), 'QUIET/yellow');

            } else {
                log_console(str_size(tr('#id'), 7).str_size(tr('Name'), 33).str_size(tr('User name'), 33).str_size(tr('Status'), 13).str_size(tr('Created by'), 32), 'QUIET/cyan');

                while ($account = sql_fetch($accounts)) {
                    log_console(str_size($account['id'], 6, ' ', true).' '.str_size($account['name'], 32).' '.str_size($account['username'], 32).' '.str_size($account['status'], 12).' '.name($account, 'user'));
                }
            }

            die();

        case 'show':
            $account      = cli_argument();
            $account_data = ssh_get_account($account);

            if (!$account_data) {
                throw new CoreException(tr('The specified SSH account ":account" does not exist', array(':account' => $account)), 'not-exists');
            }

            $account_data = array_hide($account_data);

            ksort($account_data);

            foreach ($account_data as $key => $value) {
                if ($key == 'password') continue;
                log_console(cli_color($key.':', 'white').' '.json_encode_custom($value));
            }

            die();

        case 'register':
            $domain = cli_argument(1);
            $port     = cli_argument(2);
            cli_no_arguments_left();

            $count = ssh_add_known_host($domain, $port);

            if ($count) {
                log_console(tr('Added ":count" domains', array(':count' => $count)), 'green');

            } else {
                log_console(tr('Added no domains, domain was probably already registered'), 'yellow');
            }

            die();

        case 'unregister':
            $domain = cli_argument(1);
            $port     = cli_argument(2);
            cli_no_arguments_left();

            $count = ssh_remove_known_host($domain, $port);

            if ($count) {
                log_console(tr('Removed ":count" domains', array(':count' => $count)), 'green');

            } else {
                log_console(tr('Removed no domains, domain was probably not registered'), 'yellow');
            }

            die();

        case 'rebuild':
            cli_no_arguments_left();

            $count = ssh_rebuild_known_hosts(FORCE);

            if ($count) {
                log_console(tr('Added ":count" domains', array(':count' => $count)), 'green');

            } else {
                log_console(tr('Added no domains, known_hosts file probably contains all domains from the `ssh_fingerprints` table'), 'yellow');
            }

            die();

        case '':
            throw new CoreException(tr('No method or domain specified'), 'no-method');
    }

}catch(Exception $e) {
    switch ($e->getCode()) {
        case 'not-found':
            throw new CoreException(tr('ssh-keyscan found no public keys for domain ":domain" on port ":port", are domain and port correct?', array(':domain' => $domain, ':port' => ssh_get_port($port))), 'warning/not-found');
    }
}

/*
 * No method was specified, assume a servername was specified
 */
$background    = cli_argument('-b,--background');
$function      = not_empty(cli_argument('-f,--function'), 'passthru');
$identity_file = cli_argument('-i,--identity-file');
$domain        = cli_method();
$port          = cli_method(1);
$commands      = cli_argument(1);

if (empty($domain)) {
    throw new CoreException(tr('No domain specified'), 'warning/not-specified');
}

if (!empty($port)) {
    if (!is_natural($port) or ($port > 65535)) {
        throw new CoreException(tr('Invalid port ":port" specified', array(':port' => $port)), 'warning/invalid');
    }
}

if (empty($commands)) {
    /*
     * Just run bash shell
     */
    $force_terminal   = true;
    $disable_terminal = false;

    $commands = array('function' => 'passthru',
                      'commands' => array('bash'));
}

try {
    $server                     = servers_like($domain);
    $server                     = servers_get($server);
    $server['force_terminal']   = isset_get($force_terminal);
    $server['disable_terminal'] = isset_get($disable_terminal);
    $server['identity_file']    = $identity_file;

    $result = servers_exec($server, $commands);

}catch(Exception $e) {
    switch ($e->getCode()) {
        case 'multiple':
            throw new CoreException(tr('Specified domain ":domain" matched multiple registered servers, please be more specific', array(':domain' => $domain)), 'warning/multiple');

        case 'not-exists':
            throw new CoreException(tr('Specified domain ":domain" matched no registered servers', array(':domain' => $domain)), 'warning/not-exist');

        case 'host-verification-failed':
            throw new CoreException(tr('Specified domain ":domain" failed host key verification. Register the server first', array(':domain' => $domain)), 'warning/host-verification-failed');

        default:
            throw $e;
    }
}
?>