#!/usr/bin/php
<?php
/*
 * This is the scanner manager script
 */
$usage = './scripts/base/scanner
./scripts/base/scanner list
./scripts/base/scanner kill ID
./scripts/base/scanner scan [option]';

$help  = 'This is the scanner manager script

This script can manage connected scanners (USB or network)



METHODS



list                            - List availabe scanners (USB or network)



kill ID [ -h / --hard]          - Kill the scanimage process for the specified
                                  scanner. By default the process will be killed
                                  by signal 15 (KILL, ask the process friendly
                                  to terminate), but if -h / --hard is
                                  specified, the process will be killed with
                                  signal 9 (SIGKILL, kill the process no
                                  questions asked)



runs ID                         - Returns "1" if the specified scanner is being
                                  used by scanimage



scan FILE                       - Scan to the specified FILE. If the path for
                                  the specified file does not exist, it will be
                                  created if possible. If no device was
                                  specified, the first device available will be
                                  used

    --device DEVICE             - Scan using the specified device. Specify the
                                  device using the URL from the "list" method

    --server SERVER             - Scan using the device on the specified server

    --resolution RESOLUTION     - Scan using the specified resolution. Should
                                  be one of 75, 150, 300, 600, 1200, 2400, 4800
                                  or 9600. Defaults to
                                  \$_CONFIG[scanimage][resolution]

    --contrast CONTRAST         - Scan using the specified contrast in the
                                  range 0 - 100. Defaults to
                                  \$_CONFIG[scanimage][contrast]

    --brightness BRIGHTNESS     - Scan using the specified brightness in the
                                  range 0 - 100. Defaults to
                                  \$_CONFIG[scanimage][brightness]

    --gamma GAMMA               - Scan using the specified gamma in the range
                                  0 - 100. Defaults to
                                  \$_CONFIG[scanimage][gamma]

    --jpeg_quality QUALITY      - When scanning to JPEG, use the specified
                                  quality in the range 0 - 100. Defaults to
                                  \$_CONFIG[scanimage][jpeg_quality]

    --transfer_format FORMAT    - Transfer the scanned file in the specified
                                  format. Supported formats are "jpeg", or
                                  "tiff". Defaults to
                                  \$_CONFIG[scanimage][transfer_format]

    --mode MODE                 - Scan using the specified mode. Supported
                                  modes are "lineart", "grey", or "color"

    --format FORMAT             - Save the scanned file in the specified
                                  format. Supported formats are "jpeg", or
                                  "tiff". Defaults to
                                  \$_CONFIG[scanimage][format]

    --clear-exif                - Clear the EXIF information from the resulting
                                  file';

require_once(__DIR__.'/../../libs/startup.php');

cli_only();
load_libs('scanimage,sane');

switch(cli_method()){
    case 'list':
        cli_no_arguments_left();
        log_console(tr('Showing found SANE scanners'), 'white');

        $devices = scanimage_list();

        if(!$devices->rowCount()){
            log_console(tr('There are currently no devices available'), 'QUIET/yellow');

        }else{
            log_console(tr('Showing currently available devices'), 'QUIET/white');
            log_console(str_size(tr('#id'), 6).' '.str_size(tr('Type'), 20).' '.str_size(tr('Domain'), 20).' '.str_size(tr('Status'), 16).' '.str_size(tr('Vendor'), 16).' '.str_size(tr('Manufacturer'), 16).' '.str_size(tr('Model'), 16).' '.str_size(tr('Bus'), 3).' '.str_size(tr('Device'), 3).' '.tr('Description'), 'QUIET/cyan');

            while($device = sql_fetch($devices)){
                log_console(str_size($device['id'], 6).' '.str_size($device['type'], 20).' '.str_size(isset_get($device['domain'], '-'), 20).' '.str_size(cli_status_color($device['status']), 16).' '.str_size($device['vendor_string'], 16).' '.str_size($device['manufacturer'], 16).' '.str_size($device['model'], 16).' '.str_size($device['bus'], 3).' '.str_size($device['device'], 3).' '.$device['description']);
            }
        }

        break;

    case 'kill':
        $id   = cli_argument(1);
        $hard = cli_argument('-h,--hard');

        try{
            cli_no_arguments_left();
            scanimage_kill($id, null, $hard);

        }catch(Exception $e){
            if($e->getRealCode() == 'not-specified'){
                $e->makeWarning(true);
            }

            throw $e;
        }

        break;

    case 'runs':
        $id = cli_argument(1);
        cli_no_arguments_left();

        try{
            $runs = scanimage_runs($id);
            echo $runs;

        }catch(Exception $e){
            if($e->getRealCode() == 'not-specified'){
                $e->makeWarning(true);
            }

            throw $e;
        }

        break;

    case 'scan':
        $device = cli_argument('--device', true);
        $domain = cli_argument('--server', true);
        $device = scanimage_get($device, $domain);

        $scanimage['domain']  = $device['domain'];
        $scanimage['device']  = $device['seostring'];
        $scanimage['options'] = array();

        log_console(tr('About to scan from scanner ":scanner" on server ":server"', array(':scanner' => $device['string'], ':server' => $device['domain'])), 'cyan');

        /*
         * Parse parameters for this specific device
         */
        foreach($device['options'] as $key => $valid_values){
            $value = cli_argument('--'.$key, true);

            if($value){
                /*
                 * Validate values
                 */
                if(is_array($valid_values)){
                    if(!in_array($value, $valid_values)){
                        throw new BException(tr('Value ":value" for the specified option ":key" is invalid', array(':key' => $key, ':value' => $value)));
                    }

                }else{
                    /*
                     * Ensure range
                     */
// :TODO: Implement
                }

                $scanimage['options'][$key] = $value;
            }
        }

        /*
         * Get system options
         */
        $system_options = array('batch',
                                'batch-start',
                                'batch-count',
                                'batch-increment',
                                'batch--double');

        foreach($system_options as $option){
            if($value = cli_argument('--'.$option, true)){
                if($option == 'batch'){
                    $scanimage['batch'] = true;
                }

                $scanimage['options'][$option] = $value;
            }
        }

        $scanimage['file'] = cli_argument();
        array_default($scanimage, 'format', 'jpeg');

         //$scanimage['resolution']     = not_empty(cli_argument('--resolution'     , true), isset_get($device['options']['resolution']));
        //$scanimage['contrast']       = not_empty(cli_argument('--contrast'       , true), isset_get($_CONFIG['scanimage']['contrast']));
        //$scanimage['brightness']     = not_empty(cli_argument('--brightness'     , true), isset_get($_CONFIG['scanimage']['brightness']));
        //$scanimage['gamma']          = not_empty(cli_argument('--gamma, true'    , true), isset_get($_CONFIG['scanimage']['gamma']));
        //$scanimage['jpeg_quality']   = not_empty(cli_argument('--jpeg-quality'   , true), isset_get($_CONFIG['scanimage']['jpeg_quality']));
        //$scanimage['trasfer_format'] = not_empty(cli_argument('--transfer-format', true), isset_get($_CONFIG['scanimage']['transfer_format']));
        //$scanimage['mode']           = not_empty(cli_argument('--mode'           , true), isset_get($_CONFIG['scanimage']['mode']));
        //$scanimage['format']         = not_empty(cli_argument('--format'         , true), isset_get($_CONFIG['scanimage']['format']));
        //$scanimage['clear_exif']     = not_empty(cli_argument('--clear-exif'     , true), isset_get($_CONFIG['scanimage']['clear_exif']));
        //$scanimage['file']           = cli_argument();
        cli_no_arguments_left();

        if(!$scanimage['file']){
            if(empty($scanimage['options']['batch'])){
                throw new BException(tr('No target file specified'), 'not-specified');
            }

        }else{
            $scanimage['file'] = file_absolute($scanimage['file']);
        }

        log_console(tr('Scanning to file ":file"', array(':file' => $scanimage['file'])), 'cyan');

        $scanimage['path'] = dirname($scanimage['file']);

        file_ensure_path($scanimage['path']);

        try{
            scanimage($scanimage);

            if(!file_exists($scanimage['file'])){
                if(!$scanimage['batch']){
                    throw new BException(tr('Sane reported scan was saved to target file ":file", but the file was not found', array(':file' => $scanimage['file'])), 'not-found');
                }
            }

            log_console(tr('Scanned image to file ":file"', array(':file' => $scanimage['file'])));

        }catch(Exception $e){
            switch($e->getRealCode()){
                case 'busy':
                    // FALLTHGOUH
                case 'stuck':
                    $e->makeWarning(true);
            }

            throw $e;
        }

        break;

    case '':
        throw new BException(tr('No method specified'), 'no-method');

    default:
        throw new BException(tr('Unknown method ":method" specified', array(':method' => cli_method())), 'unknown-method');
}
?>
