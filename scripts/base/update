#!/usr/bin/php
<?php
/*
 * This is the update script that will update your Phoundation installation with the latest software
 */
$usage = './scripts/base/update [--local] [--ignore-changes] [--no-init]
./scripts/base/update --upgrade
./scripts/base/update --re-update
./scripts/base/update --branch BRANCH_NAME
./scripts/base/update --version-line VERSION_LINE
./scripts/base/update --branch BRANCH';

$help  = 'The deploy script can pull all the latest PHOUNDATION updates from either a local PHOUNDATION repository, or the central main PHOUNDATION repository

Possible arguments:

-l, --local                   - Update from a local version of the PHOUNDATION
                                project update script will search in
                                /var/www/html/phoundation

-n, --no-init                 - Do not do execute a system init after the update
                                process has finished

-r, --re-update               - Do not do execute a system init after the update
                                process has finished

--no-update                   - Do not update anything at all

-c, --no-commit               - Do not automatically git commit after the update
                                process has finished

-i, --ignore-changes          - Update even though this project has git changes

    -s, --no-stash            - Used in conjunction with the --ignore-changes
                                option, will not git stash if specified

-b --branch BRANCH            - Get the PHOUNDATION updates from branch BRANCH
                                instead of the standard production branch';

require_once(__DIR__.'/../../libs/startup.php');
cli_only(true);

try{
    /*
     * Get parameters
     */
    $noinit   = cli_argument('-n,--no-init');
    $nocommit = cli_argument('-c,--no-commit');
    $ignore   = cli_argument('-i,--ignore-changes');
    $no_stash = cli_argument('-s,--no-stash');
    $local    = cli_argument('-l,--local');
    $no_times = cli_argument('-n,--no-times');
    $reupdate = cli_argument('-r,--re-update');
    $noupdate = cli_argument('--no-update');
    $upgrade  = cli_argument('-u,--upgrade', true);
    $branch   = cli_argument('-b,--branch' , true);

    if($no_stash and !$ignore){
        throw new BException(tr('-s or --no-stash specified without -i or --ignore-changes option'), 'invalid');
    }

    cli_no_arguments_left();
    load_libs('git,code');
    load_config('update');

    if(TEST){
        log_console(tr('Running update script in test mode, NOT REALLY UPDATING!'), 'yellow');
    }



    /*
     * Validate parameters
     */
    if($upgrade){
        if($reupdate){
            throw new BException(tr('Both --upgrade and --re-update were specified and these options are mutually exclusive. Please specify one or the other'), 'validation');
        }

        if($branch){
            throw new BException(tr('Both --upgrade and --branch were specified and these options are mutually exclusive. Please specify one or the other'), 'validation');
        }

        log_console(tr('Attempting upgrade update to code line ":line"', array(':line' => $upgrade)), 'cyan');

        if(!str_is_version($upgrade.'.0')){
            throw new BException(tr('Specified upgrade version line ":version" is invalid. Please specify a version in the MAJOR.MINOR format', array(':version' => $upgrade)), 'validation');
        }

    }elseif($reupdate){
        if($branch){
            throw new BException(tr('Both --re-update and --branch were specified and these options are mutually exclusive. Please specify one or the other'), 'validation');
        }

        log_console(tr('Attempting re-update'), 'cyan');

    }elseif($branch){
        log_console(tr('Attempting upgrade update to branch ":branch"', array(':branch' => $branch)), 'cyan');

    }else{
        log_console(tr('Attempting normal update'), 'cyan');
    }



    /*
     *
     */
    if($local){
        /*
         * Get the data from the local phoundation repository instead of the centralized one
         */
        $phoundation = $_CONFIG['update']['local'];
        log_console(tr('Running in "local" mode, getting all phoundation data from ":path" for faster update', array(':path' => $phoundation['path'])), 'yellow');

    }else{
        $phoundation = $_CONFIG['update']['local'];
    }



    /*
     * Check if we are not on main phoundation repository
     */
    if(trim(shell_exec('grep "/git/phoundation.git" '.ROOT.'.git/config'))) {
        throw new bException(tr('Cannot be run on main phoundation repository'), 'warning/validation');
    }



    /*
     * Check if we dont have any commits
     */
    if(git_status()){
        if(!$ignore){
            throw new BException(tr('Git commit(s) pending'), 'warning/validation');
        }

        if($no_stash){
            log_console(tr('WARNING: Git changes detected, but not stashing due to -s or --no-stash option'), 'warning');

        }else{
            log_console(tr('Stashing git changes because of --ignore-changes option specified'), 'cyan');
            git_stash();
            $stashed = true;
        }
    }



    /*
     * Verify data
     */
    if(!$phoundation['host']){
        throw new BException(tr('No update host configured, see $_CONFIG[update][host]'), 'warning/configuration');
    }

    if(!$phoundation['port']){
        throw new BException(tr('No update host port configured, see  $_CONFIG[update][port]'), 'warning/configuration');
    }

    if(!is_natural($phoundation['port']) or ($phoundation['port'] > 65535)){
        throw new BException(tr('Invalid host port configured, see  $_CONFIG[update][port]'), 'warning/configuration');
    }



    /*
     * Ensure phoundation can do updates, and get the latest tags and branches
     */
    if(code_phoundation_status() AND !FORCE) {
        throw new BException(tr('Git commit pending on your local phoundation project'), 'warning/validation');
    }

    log_console(tr('Fetching latest phoundation branches and tags'), 'VERBOSE/cyan');
    $results = code_phoundation_fetch(array('all' => true));

    /*
     * Get our current framework version line, then get available version lines from
     * the local phoundation project
     */
    $current_branch       = code_phoundation_branch();
    $current_version_line = code_get_version_line(FRAMEWORKCODEVERSION);

    if($upgrade){
        /*
         * Upgrade to specified code line
         */
        if($upgrade === $current_version_line){
            /*
             * We're upgrading to the current version line, just do a normal
             * update
             */
            $upgrade = null;
        }

        $available_version_lines = code_get_phoundation_lines();

        if(!in_array($upgrade, $available_version_lines)){
            throw new BException(tr('The requested upgrade version line ":line" is not available in your phoundation project', array(':line' => $upgrade)), 'warning/not-exists');
        }

        $current_version_line = $upgrade;
        $frameworkcodeversion = $upgrade.'.0';
        $find_highest         = true;

    }elseif($branch){
        /*
         * Upgrade to latest commit of specified branch
         */
        $available_branch_lines = code_get_phoundation_branch_lines();
        $frameworkcodeversion   = FRAMEWORKCODEVERSION;
        $find_highest           = false;

        if(!in_array($branch, $available_branch_lines)){
            throw new BException(tr('The specified version line branch ":line" is not available in your phoundation project', array(':line' => $branch)), 'warning/not-exists');
        }

    }else{
        /*
         * Update to latest version within our current code line
         */
        $available_version_lines = code_get_phoundation_lines();
        $frameworkcodeversion    = FRAMEWORKCODEVERSION;
        $find_highest            = true;

        if(!in_array($current_version_line, $available_version_lines)){
            throw new BException(tr('Your current version line ":line" is not available in your phoundation project', array(':line' => $current_version_line)), 'warning/not-exists');
        }
    }



    /*
     * Filter out the highest version
     */
    if($find_highest){
        $available_versions = code_get_phoundation_versions($current_version_line);
        $highest            = '0.0.0';

        foreach($available_versions as $id => $version){
            switch(version_compare($version, $frameworkcodeversion)){
                case 0:
                    $phoundation_frameworkcodeversion = $frameworkcodeversion;
                    break;

                case 1:
                    if(version_compare($version, $highest) >= 0){
                        $highest = $version;
                    }

                    break;
            }
        }

        switch($highest){
            case '0.0.0':
                if(!$reupdate){
                    throw new BException(tr('There are currently no newer versions available on the ":line" version line in phoundation than the current framework version ":version"', array(':line' => $current_version_line, ':version' => $frameworkcodeversion)), 'warning/not-exists');
                }

                if(!isset($phoundation_frameworkcodeversion)){
                    throw new BException(tr('Reupdate failed because current framework code version ":version" does not exist in the found Phoundation project', array(':version' => $frameworkcodeversion)), 'warning/not-exists');
                }

                /*
                 * Update to the same current version
                 */
                $highest = $phoundation_frameworkcodeversion;
                log_console(tr('Reupdating to Phoundation version ":version"', array(':version' => $highest)), 'green');
                break;

            default:
                log_console(tr('Found newer Phoundation version ":version"', array(':version' => $highest)), 'green');
        }

        $checkout = 'v'.$highest;

    }else{
        $checkout = $branch;
    }



    /*
     * Checkout the highest version branch for our version line
     * Tags should be complete, but if we went for a branch, then pull to ensure
     * we have the latest of the latest
     */
    code_phoundation_checkout($checkout);

    if(!code_phoundation_branch_is_tag()){
        code_phoundation_pull();
    }



    /*
     * Should we use sudo? if so, what sudo command?
     */
    include(ROOT.'config/deploy.php');

    if($no_times or !empty($_CONFIG['deploy'][ENVIRONMENT]['no_times'])){
        $no_times = ' --no-times ';
    }



    /*
     * Copy from phoundation
     */
    log_console(tr('Updating from Phoundation branch or tag ":version"', array(':version' => $checkout)), 'white');



    /*
     * Libraries
     */
    if($noupdate){
        log_console(tr('Not updating anything due to "--no-update" option'), 'yellow');

    }else{
        log_console(tr('Copying libraries'), 'cyan');
        $exitcodes = array();

        if(empty(TEST)){
            passthru('rsync -e "ssh -p '.$phoundation['port'].'" -aczvAXHS '.$no_times.' --no-perms '.$phoundation['host'].':'.$phoundation['path'].'/www/en/libs '.ROOT.'www/en/', $exitcodes['www/en/libs']);
            passthru('rsync -e "ssh -p '.$phoundation['port'].'" -aczvAXHS '.$no_times.' --no-perms '.$phoundation['host'].':'.$phoundation['path'].'/www/en/tests '.ROOT.'www/en/', $exitcodes['www/en']);
        }

        // Phoundation AJAX files
        log_console(tr('Copying ajax files'), 'cyan');

        if(empty(TEST)){
            passthru('rsync -e "ssh -p '.$phoundation['port'].'" -aczvAXHS '.$no_times.' --no-perms '.$phoundation['host'].':'.$phoundation['path'].'/www/en/ajax/base '.ROOT.'www/en/ajax/', $exitcodes['www/en/ajax']);

            // Phoundation AJAX files for admin section
            if(file_exists(ROOT.'www/en/admin/ajax/')){
                passthru('rsync -e "ssh -p '.$phoundation['port'].'" -aczvAXHS '.$no_times.' --no-perms '.$phoundation['host'].':'.$phoundation['path'].'/www/en/ajax/base '.ROOT.'www/en/admin/ajax/', $exitcodes['www/en/admin/ajax']);
            }
        }

        // Phoundation scripts
        log_console(tr('Copying phoundation scripts'), 'cyan');

        if(empty(TEST)){
            passthru('rsync -e "ssh -p '.$phoundation['port'].'" -aczvAXHS '.$no_times.' --no-perms --delete '.$phoundation['host'].':'.$phoundation['path'].'/scripts/base/* '.ROOT.'scripts/base/', $exitcodes['scripts/base']);
            passthru('rsync -e "ssh -p '.$phoundation['port'].'" -aczvAXHS '.$no_times.' --no-perms --delete '.$phoundation['host'].':'.$phoundation['path'].'/scripts/tests/* '.ROOT.'scripts/tests/', $exitcodes['libs']);
        }

        // Framework init files
        log_console(tr('Copying framework init files'), 'cyan');

        if(empty(TEST)){
            passthru('rsync -e "ssh -p '.$phoundation['port'].'" -aczvAXHS '.$no_times.' --no-perms --delete '.$phoundation['host'].':'.$phoundation['path'].'/init/framework/* '.ROOT.'init/framework/', $exitcodes['init/framework']);
        }

        // phoundation configuration
        log_console(tr('Copying phoundation configuration'), 'cyan');

        if(empty(TEST)){
            passthru('rsync -e "ssh -p '.$phoundation['port'].'" -aczvAXHS '.$no_times.' --no-perms --delete '.$phoundation['host'].':'.$phoundation['path'].'/config/base/* '.ROOT.'config/base/', $exitcodes['config/base']);
        }

        // Javascript
        log_console(tr('Copying javascript files'), 'cyan');

        if(empty(TEST)){
            passthru('rsync -e "ssh -p '.$phoundation['port'].'" -aczvAXHS '.$no_times.' --no-perms --delete '.$phoundation['host'].':'.$phoundation['path'].'/www/en/pub/js/base/* '.ROOT.'www/en/pub/js/base/', $exitcodes['www/en/pub/js/base']);

            if(file_exists(ROOT.'www/en/admin/pub/js/')){
                passthru('rsync -e "ssh -p '.$phoundation['port'].'" -aczvAXHS '.$no_times.' --no-perms --delete '.$phoundation['host'].':'.$phoundation['path'].'/www/en/pub/js/base/* '.ROOT.'www/en/admin/pub/js/base/', $exitcodes['www/en/admin/pub/js/base']);
            }
        }

        // Documentation
        log_console(tr('Copying documentation'), 'cyan');

        if(empty(TEST)){
            passthru('rsync -e "ssh -p '.$phoundation['port'].'" -aczvAXHS '.$no_times.' --no-perms '.$phoundation['host'].':'.$phoundation['path'].'/data/doc/* '.ROOT.'data/doc/', $exitcodes['data/doc']);
        }

        // Audio files
        log_console(tr('Copying audio files'), 'cyan');

        if(empty(TEST)){
            passthru('rsync -e "ssh -p '.$phoundation['port'].'" -aczvAXHS '.$no_times.' --no-perms '.$phoundation['host'].':'.$phoundation['path'].'/data/audio/* '.ROOT.'data/audio/', $exitcodes['data/audio']);
        }

        foreach($exitcodes as $path => $exitcode){
            if($exitcode){
                log_console(tr('Rsync of ":path" failed with exit code ":code"', array(':path' => $path, ':code' => $exitcode)));
                $e = true;
            }
        }

        if(isset($e) and !FORCE){
            throw new bException(tr('One or more rsync commands failed, see above log output. NOTE: If working on files that have a different user:group than your own user, rsync mtime updates may fail if sudo is not configured to be used in config/deploy [local] target!'), 'warning/rsync');
        }

        unset($exitcode);
    }



    /*
     * Return the phoundation project to its original branch
     */
    log_console(tr('Returning phoundation to its original branch ":branch"', array(':branch' => $current_branch)), 'VERBOSE/cyan');
    code_phoundation_checkout($current_branch);



    /*
     * Auto commit all updated phoundation files
     */
    if($nocommit or $noupdate or TEST){
        log_console(tr('Skipping git commit due to "--no-commit" or "--no-update" or "--test" option'), 'yellow');

    }else{
        if(git_status()){
            log_console(tr('Update changed files, committing updates in git'), 'white');
            git_add();
            git_commit('Update from phoundation');
        }
    }



    /*
     * Execute init script
     */
    if($noinit){
        log_console(tr('Skipping system init due to "--no-init" option'), 'yellow');

    }else{
        log_console(tr('Excuting system init'), 'white');
        script_exec(array('function' => 'passthru',
                          'commands' => array('base/init')));
    }



    /*
     * Did we stash anything? get it back now..
     */
    if(!empty($stashed)){
        log_console(tr('Found stashed git changes, popping them back'), 'cyan');
        git_stash_pop();
        git_reset();
    }

}catch(Exception $e){
    log_console(tr('Encountered exception, cleaning up'), 'yellow');

    /*
     * Did we stash anything? get it back now..
     */
    if(!empty($stashed)){
        log_console(tr('Found stashed git changes, popping them back'), 'cyan');
        git_stash_pop();
        git_reset();
    }

    switch($e->getRealCode()){
        case 'busy':
            $e->makeWarning(true);
            // FALLTHROUGH

        default:
            throw $e;
    }
}