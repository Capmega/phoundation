#!/usr/bin/php
<?php
/*
 * This is the update script that will update your BASE installation with the latest software
 */
$usage = "./scripts/base/update [-l]\n".
         "./scripts/base/update --branch BRANCH_NAME\n";
         "./scripts/base/update\n";

$help  = "The deploy script can pull all the latest BASE updates from either a local BASE repository, or the central main BASE repository

Possible arguments:

--local                       - Update from a local version of the BASE project
                                update script will search in /var/www/html/base

--no-init                     - Do not do execute a system init after the update
                                process has finished

--no-commit                   - Do not automatically git commit after the update
                                process has finished

--branch BRANCH               - Get the BASE updates from branch BRANCH instead
                                of the standard production branch";

require_once(__DIR__.'/../../libs/startup.php');

$branch   = cli_argument('-b,--branch', true, 'production');
$noinit   = cli_argument('--no-init');
$nocommit = cli_argument('--no-commit');
$ignore   = cli_argument('-i,--ignore-changes');
$local    = cli_argument('-l,--local');
$no_times = cli_argument('-n,--no-times');

if($ignore and FORCE){
    throw new bException(tr('Both --ignore-changes and --force (or -i and -F) have been used. These options are mutually exclusive'), 'warning/invalid');
}

cli_only(true);
cli_no_arguments_left();

load_config('update');

if($local){
    /*
     * Get the data from the local base repository instead of the centralized one
     */
    $base = $_CONFIG['update']['local'];
    log_console(tr('Running in "local" mode, getting all base data from ":path" for faster update', array(':path' => $base['path'])), 'yellow');

}else{
    $base = $_CONFIG['update']['local'];
}

if(!$branch){
    throw new bException(tr('No branch specified'), 'warning/validation');
}

if(TEST){
    log_console(tr('scripts/update: Running update script in test mode, NOT REALLY UPDATING!'), 'yellow');
}

if(FORCE){
    log_console(tr('scripts/update: Running update script in forced mode, WILL UPDATE EVEN IF GIT CHANGES AND / OR MINOR PROBLEMS ARE FOUND!'), 'yellow');
}



/*
 * Ensure we are at the root of the project within this context, or git will fail!
 */
chdir(ROOT);



/*
 * Check if we are not on main base repository
 */
if(trim(shell_exec('grep "/git/base.git" '.ROOT.'.git/config'))) {
    throw new bException(tr('Cannot be run on main base repository'), 'warning/validation');
}

/*
 * Check if we dont have any commits
 */
if(!trim(shell_exec('git status | grep "nothing to commit" | wc -l'))){
    if(!FORCE and !$ignore){
        throw new bException(tr('Git commit pending'), 'warning/validation');
    }

    if(FORCE){
        shell_exec('git add .; git stash');
        log_console(tr('scripts/update: Stashed git changes because of -F or --force option specified'), 'yellow');
        $stashed = true;
    }
}



/*
 * Verify data
 */
if(!$base['host']){
    throw new bException(tr('No update host configured'), 'warning/not-specified');
}

if(!$base['port']){
    throw new bException(tr('No update host port configured'), 'warning/not-specified');
}



/*
 * Update libraries from base
 */
if($local){
    if(!trim(shell_exec('cd '.$base['path'].'; git status | grep "nothing to commit" | wc -l')) AND !FORCE) {
        throw new bException(tr('Git commit pending on your local base project'), 'warning/validation');
    }

    log_console(tr('Updating base project, branch ":branch"', array(':branch' => $branch)), 'white');
    passthru('cd '.$base['path'].'; git checkout '.$branch.'; git pull origin '.$branch.'');

}else{
    log_console(tr('Updating base project, branch ":branch"', array(':branch' => $branch)), 'white');
    passthru('ssh -t '.$base['host'].' -p '.$base['port'].' "cd '.$base['path'].'; git reset --hard; git checkout '.$branch.'; git pull origin '.$branch.'"');
}



/*
 * Should we use sudo? if so, what sudo command?
 */
include(ROOT.'config/deploy.php');

if($no_times or !empty($_CONFIG['deploy'][ENVIRONMENT]['no_times'])){
    $no_times = ' --no-times ';
}



/*
 * Copy from base
 */
log_console(tr('Copying from base'), 'white');

if(empty($test)){
    /*
     * Libraries
     */
    log_console(tr('Copying libraries'), 'purple');
    passthru('rsync -e "ssh -p '.$base['port'].'" -aczvAXHS '.$no_times.' --no-perms '.$base['host'].':'.$base['path'].'/www/en/libs '.ROOT.'www/en/', $exitcodes['www/en/libs']);
    passthru('rsync -e "ssh -p '.$base['port'].'" -aczvAXHS '.$no_times.' --no-perms '.$base['host'].':'.$base['path'].'/www/en/tests '.ROOT.'www/en/', $exitcodes['www/en']);

    // Base AJAX files
    log_console(tr('Copying ajax files'), 'purple');
    passthru('rsync -e "ssh -p '.$base['port'].'" -aczvAXHS '.$no_times.' --no-perms '.$base['host'].':'.$base['path'].'/www/en/ajax/base '.ROOT.'www/en/ajax/', $exitcodes['www/en/ajax']);

    // BAse AJAX files for admin section
    if(file_exists(ROOT.'www/en/admin/ajax/')){
        passthru('rsync -e "ssh -p '.$base['port'].'" -aczvAXHS '.$no_times.' --no-perms '.$base['host'].':'.$base['path'].'/www/en/ajax/base '.ROOT.'www/en/admin/ajax/', $exitcodes['www/en/admin/ajax']);
    }

    // Scripts
    log_console(tr('Copying base scripts'), 'purple');
    passthru('rsync -e "ssh -p '.$base['port'].'" -aczvAXHS '.$no_times.' --no-perms --delete '.$base['host'].':'.$base['path'].'/scripts/base/* '.ROOT.'scripts/base/', $exitcodes['scripts/base']);
    passthru('rsync -e "ssh -p '.$base['port'].'" -aczvAXHS '.$no_times.' --no-perms --delete '.$base['host'].':'.$base['path'].'/scripts/tests/* '.ROOT.'scripts/tests/', $exitcodes['libs']);

    // Framework init files
    log_console(tr('Copying framework init files'), 'purple');
    passthru('rsync -e "ssh -p '.$base['port'].'" -aczvAXHS '.$no_times.' --no-perms --delete '.$base['host'].':'.$base['path'].'/init/framework/* '.ROOT.'init/framework/', $exitcodes['init/framework']);

    // Base configuration
    log_console(tr('Config base configuration'), 'purple');
    passthru('rsync -e "ssh -p '.$base['port'].'" -aczvAXHS '.$no_times.' --no-perms --delete '.$base['host'].':'.$base['path'].'/config/base/* '.ROOT.'config/base/', $exitcodes['config/base']);

    // Javascript
    log_console(tr('Copying javascript files'), 'purple');
    passthru('rsync -e "ssh -p '.$base['port'].'" -aczvAXHS '.$no_times.' --no-perms --delete '.$base['host'].':'.$base['path'].'/www/en/pub/js/base/* '.ROOT.'www/en/pub/js/base/', $exitcodes['www/en/pub/js/base']);

    if(file_exists(ROOT.'www/en/admin/pub/js/')){
        passthru('rsync -e "ssh -p '.$base['port'].'" -aczvAXHS '.$no_times.' --no-perms --delete '.$base['host'].':'.$base['path'].'/www/en/pub/js/base/* '.ROOT.'www/en/admin/pub/js/base/', $exitcodes['www/en/admin/pub/js/base']);
    }

    // Documentation
    log_console(tr('Copying documentation'), 'purple');
    passthru('rsync -e "ssh -p '.$base['port'].'" -aczvAXHS '.$no_times.' --no-perms '.$base['host'].':'.$base['path'].'/data/doc/* '.ROOT.'data/doc/', $exitcodes['data/doc']);

    // Audio files
    log_console(tr('Copying audio files'), 'purple');
    passthru('rsync -e "ssh -p '.$base['port'].'" -aczvAXHS '.$no_times.' --no-perms '.$base['host'].':'.$base['path'].'/data/audio/* '.ROOT.'data/audio/', $exitcodes['data/audio']);
}

foreach($exitcodes as $path => $exitcode){
    if($exitcode){
        log_console(tr('Rsync of ":path" failed with exit code ":code"', array(':path' => $path, ':code' => $exitcode)));
        $e = true;
    }
}

if(isset($e) and !FORCE){
    throw new bException(tr('One or more rsync commands failed, see above log output. NOTE: If working on files that have a different user:group than your own user, rsync mtime updates may fail if sudo is not configured to be used in config/deploy [local] target!'), 'warning/rsync');
}

unset($exitcode);



/*
 * Auto commit all updated base files
 */
if($nocommit){
    log_console(tr('Skipping git commit due to "--no-commit" option'), 'yellow');

}else{
    if(!trim(shell_exec('git status | grep "nothing to commit" | wc -l'))){
        log_console(tr('Git commit updates'), 'white');
        passthru('cd '.ROOT.';git add .;git commit -am "Update from base"', $exitcode);

        if($exitcode){
            throw new bException(tr('Git commit of updates failed with exit code ":code"', array(':code' => $exitcode)), 'warning/git');
        }
    }
}



/*
 * Execute init script
 */
if($noinit){
    log_console(tr('Skipping system init due to "--no-init" option'), 'yellow');

}else{
    log_console(tr('Excuting system init'), 'white');
    passthru('cd '.ROOT.'scripts/base/;export '.PROJECT.'_ENVIRONMENT='.ENVIRONMENT.'; php init', $exitcode);

    if($exitcode){
        throw new bException(tr('System init failed with exit code ":code"', array(':code' => $exitcode)), 'warning/init');
    }
}



/*
 * Did we stash anything? get it back now..
 */
if(!empty($stashed)){
    passthru('git stash pop; git reset HEAD', $exitcode);

    if($exitcode){
        throw new bException(tr('Git commit of updates failed with exit code ":code"', array(':code' => $exitcode)), 'warning/git');
    }

    log_console(tr('scripts/update: Found stashed git changes, popping them back'), 'yellow');
}

cli_run_once_local(true);
?>
