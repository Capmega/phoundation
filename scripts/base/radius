#!/usr/bin/php
<?php
/*
 * This is the servers management script.
 *
 * @auhthor Sven Olaf Oostenbrink <so.oostenbrink@gmail.com>
 * @copyright Copyright (c) 2022 Sven Olaf Oostenbrink
 * @license http://opensource.org/licenses/GPL-2.0 GNU Public License, Version 2
 * @category Function reference
 * @package base-scripts
 */
$usage = './scripts/servers
./scripts/base/radius create   --mac_address MAC_ADDRESS --brand BRAND --model MODEL --users_id ID --type TYPE
./scripts/base/radius delete   --mac_address
./scripts/base/radius undelete --mac_address
./scripts/base/radius list     --filter FILTERS
./scripts/base/radius sync
./scripts/base/radius test     --mac_address';

$help  = 'This is the radius server management script

This script can manage the devices in radius server. Radius server must be registered in toolkit before
they can be managed.



METHODS



list                            - List all registered devices

        --filter                - This search by mac addres, users_id and type

create                          - Insert a new device

        --mac_address           - Set the mac address for new Device
        --type                  - set the type for the new device
        --users_id              - set the assigned user for the new device
        --brand                 - set the brand for the new device
        --model                 - set the model for the new device
        --description           - set the description for the new device

delete                          - Detele a Device

undelete                        - Undelete a device';

require_once(__DIR__.'/../../libs/startup.php');

try{
    cli_only();
    load_libs('radius');

    switch(cli_method()) {
        case 'list':
            $filter  = cli_argument('--filter', true);
            $execute = array();
            $where   = array();

            cli_no_arguments_left();

            if(!empty($filter)) {
                $where[]                 = ' (`radius_devices`.`mac_address` LIKE :mac_address OR `radius_devices`.`description` LIKE :description OR `radius_devices`.`type` LIKE :type) ';
                $execute[':mac_address'] = '%'.$filter.'%';
                $execute[':description'] = '%'.$filter.'%';
                $execute[':type']        = '%'.$filter.'%';
            }

            $query   = 'SELECT    `radius_devices`.`id`,
                                  `radius_devices`.`status`,
                                  `radius_devices`.`createdon`,
                                  `radius_devices`.`description`,
                                  `radius_devices`.`mac_address`,
                                  `radius_devices`.`users_id`,
                                  `radius_devices`.`brand`,
                                  `radius_devices`.`type`,

                                  `users_id`.`name`     AS `user_name`,
                                  `users_id`.`email`    AS `user_email`,
                                  `users_id`.`username` AS `user_username`,

                                  `users_id`.`name`     AS `assigned_user`

                        FROM      `radius_devices`

                        LEFT JOIN `users`
                        ON        `users`.`id` = `radius_devices`.`createdby`

                        LEFT JOIN `users` AS `users_id`
                        ON        `users_id`.`id` = `radius_devices`.`users_id`';

            if(empty($where)) {
                $where = '';

            } else {
                $where = ' WHERE '.implode(' AND ', $where);
            }

            $order   = ' ORDER BY `radius_devices`.`status` IS NOT NULL DESC ';
            $devices = sql_query($query.$where.$order.(LIMIT ? ' LIMIT '.LIMIT : ''), $execute);

            if(!$devices->rowCount()) {
                    log_console(tr('There are currently no devices registered'), 'QUIET/yellow');

            } else {

                log_console(str_size(tr('#id'), 7).
                            str_size(tr('Assigned to'), 21).
                            str_size(tr('Type'), 13).
                            str_size(tr('Mac address'), 21).
                            str_size(tr('Status'), 11).
                            str_size(tr('Created on'), 13).
                            str_size(tr('Created by'), 32), 'QUIET/cyan');

                while($device = sql_fetch($devices)) {
                    log_console(str_size($device['id'], 6, ' ', true).' '.
                                str_size($device['assigned_user'], 20).' '.
                                str_size($device['type'], 12).' '.
                                str_size($device['mac_address'], 20).' '.
                                str_size($device['status'], 10).' '.
                                cli_status_color(str_size($device['createdon'], 12)).' '.
                                name($device, 'user_'));
                }
            }

            break;

        case 'create':
            $device = cli_arguments('--type,--users_id,--brand,--model,--mac_address,--description');
            $device['description'] = isset_get($device['description']);
            radius_validate_device($device);
            cli_no_arguments_left();

            radius_insert_device($device);
            log_console(tr('Device was added'), 'QUIET/cyan');
        break;

        case 'delete':
            $device = cli_argument();
            cli_no_arguments_left();

            if(!$device) {
                throw new CoreException(tr('No mac address or ID specified'), 'warning/not-specified');
            }

            $device = radius_get_device($device);
            sql_query('UPDATE `radius_devices` SET `status` = "deleted" WHERE `id` = :id', array(':id' => $device['id']));

            radius_delete_device_server($device);

            log_console(tr('Device was deleted'), 'QUIET/cyan');
        break;

        case 'undelete':
            $device = cli_argument();
            cli_no_arguments_left();

            if(!$device) {
                throw new CoreException(tr('No mac address or ID specified'), 'warning/not-specified');
            }

            $device = radius_get_device($device);

            if($device['status'] === null) {
                throw new CoreException(tr('This device is already enabled'), 'warning/not-specified');
            } else {
                radius_insert_device_server($device);
            }
            sql_query('UPDATE `radius_devices` SET `status` = null WHERE `id` = :id', array(':id' => $device['id']));

            log_console(tr('Device was undeleted'), 'QUIET/cyan');
        break;

        case 'sync':
            radius_sync_server();
            log_console(tr('Remote radius server was synced'), 'QUIET/cyan');
        break;

        case 'test':
            $device = cli_argument();
            cli_no_arguments_left();

            if(!$device) {
                throw new CoreException(tr('No mac address or ID specified'), 'warning/not-specified');
            }

            $valid = radius_test_device(array('mac_address' => $device));
            log_console(tr('Device ":device" is :valid', array(':device' => $device, ':valid' => ($valid?'Valid':'Invalid'))), 'QUIET/cyan');
        break;

        case '':
            throw new CoreException(tr('No method specified'), 'no-method');

        default:
            throw new CoreException(tr('Unknown method ":method" specified', array(':method' => cli_method())), 'unknown-method');
    }

}catch(Exception $e) {
    switch($e->getRealCode()) {
        case 'not-exist':
            // FALLTHROUGH
        case 'multiple':
            // FALLTHROUGH
        case 'sudo':
            throw $e->makeWarning(true);
    }

    throw $e;
}
?>
