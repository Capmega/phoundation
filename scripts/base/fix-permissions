#!/usr/bin/php
<?php
/*
 * This is the project permission fix script.
 *
 * All permissions will fall under these rules:
 *
 * All directories will be 0770, but have sticky bit set
 * All files will be 0660 permission
 * All script files (executables) will have 0770 permission
 *
 * All tree user and group will be set to $_CONFIG[deploy][user] $_CONFIG[deploy][group]
 *
 * @copyright Sven Oostenbrink <support@ingiga.com>
 */
$usage = "./scripts/base/fix-permissions\n";

$help  = "The fix-permissions script will ensure that all files and directories have the configured file permissions, ensuring a safe site installation";

require_once(dirname(__FILE__).'/../../libs/startup.php');

/*
 * Load deployment configuration
 */
include(ROOT.'config/deploy.php');

$target = cli_argument('target', true, ENVIRONMENT);

cli_no_arguments_left();

load_libs('file');
cli_log(tr('Updating project file permissions'), 'white');

if(empty($_CONFIG['deploy'][$target])){
    throw new bException(tr('Selected environment ":env" does not exist', array(':env' => $target)), 'not-exist');
}

$deploy_config = $_CONFIG['deploy'][$target];
$target_dir    = cli_argument('--target-dir', true, isset_get($deploy_config['target_dir'], ROOT));

try{
    if(empty($_CONFIG['deploy'][$target])){
        throw new bException(tr('Specified target environment ":target" has no deploy configuration $_CONFIG[deploy][:target] in ":ROOTconfig/deploy.php"', array(':target' => $target, ':ROOT' => ROOT)), 'missing-configuration');
    }

    if(!empty($deploy_config['target_server'])){
        if(empty($deploy_config['user'])){
            throw new bException(tr('No $_CONFIG[deploy][:target][user] specified', array(':target' => $target)), 'missing-configuration');
        }

        if(empty($deploy_config['group'])){
            throw new bException(tr('No $_CONFIG[deploy][:target][group] specified', array(':target' => $target)), 'missing-configuration');
        }

        if(empty($deploy_config['modes'])){
            throw new bException(tr('No $_CONFIG[deploy][:target][modes] specified', array(':target' => $target)), 'missing-configuration');
        }
    }

}catch(Exception $e){
    throw new bException(tr('Check configuration in ":ROOTconfig/deploy.php"', array(':ROOT' => ROOT)), $e);
}



/*
 *
 */
passthru((!empty($deploy_config['sudo']) ? ' sudo' : '').' chown '.$deploy_config['user'].':'.$deploy_config['group'].' '.ROOT.' -R;', $exitcode);

if($exitcode){
    throw new bException('Failed to update target directory tree user/group ownership', 'update-ownership');
}

cli_log(tr('Updated owner:\group permissions to ":owner::group" for entire project', array(':owner' => $deploy_config['user'], ':group' => $deploy_config['group'])), 'green');



/*
 * Merge requested modes with default modes
 */
$default_modes = array('dirs'  => array('/'                => 'a-rwx,ug+rx,g+s',
                                        '/data'            => 'ug+w',           // Should not be writable at all
                                        '/data/doc'        => 'ug-w',           // Should not be writable at all
                                        '/data/audio'      => 'ug-w',           // Should not be writable at all
                                        '/data/plugins'    => 'ug-w',           // Should not be writable at all
                                        '/www/en/pub/js/'  => 'ug+w',           // Required writable for bundler
                                        '/www/en/pub/css/' => 'ug+w'),          // Required writable for bundler

                       'files' => array('/'             => 'a-rwx,ug+r',
                                        '/data'         => 'ug+w',
                                        '/data/doc'     => 'ug-w',
                                        '/data/audio'   => 'ug-w',
                                        '/data/plugins' => 'ug-w',
                                        '/www/en/pub/'  => 'ug+w',
                                        '/scripts'      => 'a-rw,ug+x'));

foreach($deploy_config['modes'] as $type => $modes){
    $deploy_config['modes'][$type] = array_merge($deploy_config['modes'][$type], $default_modes[$type]);
}



/*
 * Apply all required file and directory modes
 */
foreach($deploy_config['modes'] as $type => $modes){
    switch($type){
        case 'dirs':
            foreach($modes as $path => $mode){
                /*
                 * Update modes for all directories in the specified path tree
                 *
                 * NOTE: The specified directory MAY not exist (eg. data/content)
                 * If this is the case, it is not a problem, just skip. This
                 * script should only care about that which exists
                 */
                if(file_exists(unslash(ROOT).$path)){
                    passthru((!empty($deploy_config['sudo']) ? ' sudo' : '').' find '.unslash(ROOT).$path.' -type d -exec chmod '.$mode.' {} \;', $exitcode);

                    if($exitcode){
                        throw new bException(tr('Failed to update mode for directories in path ":path"', array(':path' => $path)), 'failed');
                    }
                }
            }

            cli_log(tr('Updated directories mode'), 'green');
            break;

        case 'files':
            foreach($modes as $path => $mode){
                /*
                 * Update modes for all files in the specified path tree
                 *
                 * NOTE: The specified directory MAY not exist (eg. data/content)
                 * If this is the case, it is not a problem, just skip. This
                 * script should only care about that which exists
                 */
                if(file_exists(unslash(ROOT).$path)){
                    passthru((!empty($deploy_config['sudo']) ? ' sudo' : '').' find '.unslash(ROOT).$path.' -type f -exec chmod '.$mode.' {} \;', $exitcode);

                    if($exitcode){
                        throw new bException(tr('Failed to update mode for files in path ":path"', array(':path' => $path)), 'failed');
                    }
                }
            }

            cli_log(tr('Updated files mode'), 'green');
            break;

        default:
            throw new bException(tr('Unknown mode type ":type" specified', array(':type' => $type)), 'unknown');
    }
}

cli_log(tr('Finished updating www directories permissions'), 'green');
?>
