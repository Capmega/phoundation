#!/usr/bin/php
<?php
/*
 * This is the tasks manager script
 */
$usage = './scripts/base/tasks
./scripts/base/tasks add TASK JSON_DATA
./scripts/base/tasks list [options]
./scripts/base/tasks execute';

$help  = 'This is the tasks manager script

This script can be used to manage programmed tasks



METHODS



add TASK JSON_DATA              - Add a new task. TASK is the name of the
                                  script that should execute, and JSON_DATA
                                  should be a valid JSON string

    --after                     - Do not execute this task until after the
                                  specified date

    --method METHOD             - Execute this task using the specified METHOD.
                                  Must be one of \"normal\" (default),
                                  \"internal\", or \"background\"

    --time_limit LIMIT          - Max amount of time that can be spent on
                                  executing this task (does not count for
                                  background tasks). Must be between 1 and 600,
                                  defaults to 30



execute                         - Try to execute all tasks that have status
                                  \"new\"



delete ID                       - Delete the task with the specified ID



clear                           - Clear a group of tasks from the tasks table.
                                  By default all tasks with status \"completed\"
                                  and \"failed\" will be cleared

    --all                       - Clear ALL tasks. Required FORCE mode

    --only-data                 - Clear only the \"data\" and \"results\" fields

    --status STATUS, ...        - Clear tasks with the specified statusses.
                                  Requires FORCE mode



list                            - List all tasks. By default, only open tasks
                                  (tasks with status \"new\" and \"executing\")
                                  are shown

    --closed                    - List only closed tasks

    --all                       - List all tasks

    -L / --limit LIMIT          - Limit list to LIMIT entries (defaults to 100)

    -P / --page PAGE            - Start list on PAGE * LIMIT entries (defaults
                                  to 0)



show ID                         - Show detailed information about the specified
                                  task id. The extra data shown will be the
                                  \"data\" and \"results\" JSON fields decoded';

require_once(__DIR__.'/../../libs/startup.php');

cli_only();
load_libs('tasks');

switch(cli_method()){
    case 'add':
under_construction('add');

        $after = cli_argument('--after');
        cli_no_arguments_left();
        break;

    case 'delete':
        /*
         * Delete the specified task
         */
        $id = cli_argument();
        cli_no_arguments_left();

        if(empty($id)){
            throw new BException(tr('No task specified'), 'warning/not-specified');
        }

        if(!is_natural($id)){
            throw new BException(tr('The specified task ":id" is invalid', array(':id' => $id)), 'warning/invalid');
        }

        $task = sql_get('SELECT `id`, `status` FROM `tasks` WHERE `id` = :id', array(':id' => $id));

        if(!$task){
            throw new BException(tr('The specified task ":id" does not exist', array(':id' => $id)), 'warning/not-exist');
        }

        if($task['status'] === 'processing'){
            /*
             * This task is running!
             */
            if(!FORCE){
                throw new BException(tr('Task ":id" is currently in process! Use FORCE to delete it', array(':id' => $id)), 'warning/not-authorized');
            }
        }

        $r = sql_query('DELETE FROM `tasks` WHERE `id` = :id', array(':id' => $id));

        if(!$r->rowCount()){
            log_console(tr('No tasks were deleted'), 'yellow');

        }else{
            log_console(tr('Deleted task ":id"', array(':id' => $id)), 'green');
        }

        break;

    case 'clear':
        /*
         * Clear all tasks
         */
        $only_data = cli_argument('--only-data');
        $status    = STATUS;

        cli_no_arguments_left();

        if(ALL){
            if($status){
                throw new BException(tr('--status cannot be used with --all'), 'warning/invalid');
            }

            if(!FORCE){
                throw new BException(tr('In order to clear non "completed" tasks, use the FORCE option'), 'warning/not-authorized');
            }

            if($only_data){
                /*
                 * Only clear data and results fields
                 */
                log_console(tr('Clearing all tasks data'), 'cyan');
                $r = sql_query('UPDATE `tasks` SET `data` = null, `results` = null');

            }else{
                log_console(tr('Clearing all tasks'), 'cyan');
                $r = sql_query('DELETE FROM `tasks`');
            }

        }else{
            if(!$status){
                $status = 'completed,failed';

            }else{
                if(!FORCE){
                    throw new BException(tr('In order to clear non "completed" tasks, use the FORCE option'), 'warning/not-authorized');
                }
            }

            if($only_data){
                /*
                 * Only clear data and results fields
                 */
                log_console(tr('Clearing tasks data with status ":status"', array(':status' => $status)), 'cyan');
                $r = sql_query('UPDATE `tasks` WHERE `data` = null, `results` = null `status` IN ('.implode(', ', array_keys($status)).')', $status);

            }else{
                log_console(tr('Clearing tasks with status ":status"', array(':status' => $status)), 'cyan');
                $r = sql_query('DELETE FROM `tasks` WHERE `status` IN ('.implode(', ', array_keys($status)).')', $status);
            }
        }

        if(!$r->rowCount()){
            log_console(tr('No tasks were cleared'), 'yellow');

        }else{
            log_console(tr('Cleared ":count" entries', array(':count' => $r->rowCount())), 'green');
        }

        break;

    case 'list':
        $status = STATUS;

        cli_no_arguments_left();

        if(ALL){
            if($status){
                throw new BException(tr('--status cannot be used with --all'), 'warning/invalid');
            }

            if(!QUIET){
                log_console(tr('Showing all tasks (parent task id with * means this task executes in parrallel)'), 'white');
            }

        }else{
            if(!$status){
                $status = 'new,processing';
            }

            if(!QUIET){
                log_console(tr('Showing tasks with status ":status" (parent task id with * means this task executes in parrallel)', array(':status' => $status)), 'white');
            }
        }

        if(!QUIET){
            log_console(str_size('#id', 6).str_size('Meta id', 7).' '.str_size('User', 32).str_size('Parent task id', 14).' '.str_size('Command', 32).str_size('Status', 16).' '.str_size('Description', 32).str_size('Execution method', 20).str_size('Time limit', 4).' '.str_size('Time spent', 10), 'cyan');
        }

        $tasks = tasks_list($status);

        while($task = sql_fetch($tasks)){
            switch($task['status']){
                case 'processing':
                    $task['status'] = cli_color($task['status'], 'light_blue');
                    break;

                case 'completed':
                    $task['status'] = cli_color($task['status'], 'green');
                    break;

                case 'failed':
                    $task['status'] = cli_color($task['status'], 'red');
                    break;
            }

            log_console(str_size($task['id'], 6).str_size($task['meta_id'], 7, ' ', true).' '.str_size(name($task), 32).str_size(not_empty(($task['parents_id'] ? '* ' : '').$task['parents_id'], '-'), 14, ' ', true).' '.str_size($task['command'], 32).str_size($task['status'], 16).' '.str_size($task['description'], 32).str_size($task['method'], 20).str_size(($task['time_limit'] ? $task['time_limit'] : '-'), 4, ' ', true).' '.str_size($task['time_spent'] ? $task['time_spent'] : '-', 10, ' ', true));
        }

        break;

    case 'show':
        $id = cli_argument();
        cli_no_arguments_left();

        if(!is_natural($id)){
            throw new BException(tr('The specified task ":id" is not valid', array(':id' => $id)), 'warning/invalid');
        }

        $task = tasks_get($id);

        if(!$task){
            throw new BException(tr('The specified task ":id" does not exist', array(':id' => $id)), 'warning/not-exist');
        }

        try{
            $data = json_decode_custom($task['data']);

        }catch(Exception $e){
            $data = $e;
        }

        try{
            $results = json_decode_custom($task['results']);

        }catch(Exception $e){
            $results = $e;
        }

        $description = $task['description'];

        unset($task['data']);
        unset($task['results']);
        unset($task['description']);

        foreach($task as $key => $value){
            switch($key){
                case 'status':
                    log_console(cli_color(str_capitalize($key).':', 'white').' '.cli_status_color($value));
                    break;

                default:
                    log_console(cli_color(str_capitalize($key).':', 'white').' '.$value);
            }
        }

        log_console(cli_color('Description:', 'white').' '.$description);
        log_console(cli_color('Data:', 'white'));

        if(empty($data)){
            log_console(tr('This task has no data'), 'yellow');

        }else{
            print_r($data)."\n";
        }

        switch($task['status']){
            case 'completed':
                // FALLTHROUGH
            case 'failed':
                /*
                 * Task has finished or failed, show results
                 */
                log_console();
                log_console(cli_color('Results:', 'white'));

                if(empty($results)){
                    log_console(tr('This task has no results'), 'yellow');

                }else{
                    print_r(stripslashes(print_r($results, true)))."\n";
                }
        }

        break;

    case 'reset':
        $id = cli_argument();
        cli_no_arguments_left();

        if(!is_natural($id)){
            throw new BException(tr('The specified task ":id" is not valid', array(':id' => $id)), 'warning/invalid');
        }

        $task = tasks_get($id);

        if(!$task){
            throw new BException(tr('The specified task ":id" does not exist', array(':id' => $id)), 'warning/not-exist');
        }

        if(($task['status'] !== 'failed') and !FORCE){
            throw new BException(tr('Cannot reset task ":id", it has status ":status" instead of "failed". Use FORCE to reset the task anyway', array(':id' => $task['id'], ':status' => $task['status'])), 'warning/invalid');
        }

        meta_action($task['meta_id'], 'reset');
        tasks_reset($task['id']);
        log_console(tr('Reset task ":id"', array(':id' => $task['id'])), 'green');
        break;

    case 'execute':
        $restarts = cli_argument('--restart', true);
        cli_no_arguments_left();
        load_libs('date,time');

        if(!$restarts and ($restarts !== "0")){
            $restarts = $_CONFIG['tasks']['restart']['amount'];
        }

        $count    = 0;
        $previous = null;

        log_console(tr('Started task execution...'), 'white');
        log_file(tr('Started task execution'), 'tasks');

        while(true){
            if($count > 50){
                if(--$restarts <= 0){
                    log_console(tr('Passed the maximum amount of restart cycles, quitting'));
                    die();
                }

                log_console(tr('Passed the maximum amount of task cycles, restarting'));
                run_background('base/tasks execute --env '.ENVIRONMENT.' --restart '.$restarts, true, false);
                die();
            }

            $task = tasks_get('new,waiting_parent', 'processing', $previous);

            if(!$task){
                log_console(tr('No new tasks found, quitting'), 'yellow');
                break;
            }

            if($task['id'] == $previous){
                /*
                 * This task passed just now, meaning there are no new tasks
                 */
                log_console(tr('No new tasks found, quitting'), 'yellow');
                break;
            }

            $previous = $task['id'];
            $count++;

            try{
                /*
                 * Task depends on parent?
                 */
                if($task['parents_id']){
                    /*
                     * Check if its parent task has already been executed
                     */
                    $parent = sql_get('SELECT `id`, `status` FROM `tasks` WHERE `id` = :id', array(':id' => $task['parents_id']));

                    if(!$parent){
                        throw new BException(tr('Task ":task" has parents_id ":parent" but this parent does not exist', array(':task' => $task['id'], ':parent' => $task['parents_id'])), 'warning/not-exists');
                    }

                    if($task['parrallel']){
                        if(($parent['status'] != 'completed') and ($parent['status'] != 'processing')){
                            /*
                             * Cannot execute this task, the parent task hasn't started yet!
                             */
                            meta_action($task['meta_id'], 'set-wait');
                            sql_query('UPDATE `tasks` SET `status` = "waiting_parent" WHERE `id` = :id', array(':id' => $task['id']));
                            continue;
                        }

                    }else{
                        if($parent['status'] != 'completed'){
                            /*
                             * Cannot execute this task, the parent task hasn't been completed yet!
                             */
                            meta_action($task['meta_id'], 'set-wait');
                            sql_query('UPDATE `tasks` SET `status` = "waiting_parent" WHERE `id` = :id', array(':id' => $task['id']));
                            continue;
                        }
                    }
                }

                /*
                 * Task executes after DATE?
                 */
                if($task['after']){
                    $interval = date_convert($task['after'], 'object')->diff(new DateTime());
                }

                log_console(tr('Executing task ":task" with description ":description"', array(':task' => $task['id'], ':description' => $task['description'])));
                log_file(tr('Executing task ":task" with description ":description"'   , array(':task' => $task['id'], ':description' => $task['description'])), 'tasks');

                $task['results'] = json_decode_custom($task['results']);
                $task['data']    = json_decode_custom($task['data']);
                $task['data'][]  = '--no-color';

                if($task['time_limit']){
                    set_time_limit($task['time_limit']);
                }

                $start   = microtime(true);
                $command = $task['command'];
                $options = '';

                if(!empty($task['data']['method'])){
                    $options .= ' '.$task['data']['method'];
                    unset($task['data']['method']);
                }

                foreach($task['data'] as $key => $value){
                    if(empty($value)) continue;

                    if(is_integer($key)){
                        $options .= ' "'.$value.'"';

                    }else{
                        $options .= ' '.$key.' "'.$value.'"';
                    }
                }

                $task['executed'] = $command.' '.$options;

                switch($task['method']){
                    case 'background':
                        /*
                         * Execute this task in the background
                         */
                        $task['pid'] = run_background($command.' '.$options, 'task-logs/'.$task['id'].'-'.str_until($command, ' '));
                        break;

                    case 'internal':
                        /*
                         * Execute this task as an internal script
                         */
                        $task['results'] = script_exec($command, $task['data']);
                        break;

                    case 'normal':
                        /*
                         * Execute this task as a normal task
                         */
                        $task['results'] = safe_exec(ROOT.'scripts/'.$command.' '.$options);
                        break;

                    case 'function':
                        /*
                         * Execute this task as an internal function
                         */
                        if(isset($task['load_libs'])){
                            load_libs($task['load_libs']);
                            unset($task['load_libs']);
                        }

                        $task['results'] = $task['command']($task['data']);
                        break;

                    default:
                        throw new BException(tr('Unknown task execution method ":method" specified for task ":id" in ":time"', array(':method' => $task['method'], ':id' => $task['id'], ':time' => time_difference($start, $end, 'auto', 5))), 'warning/unknown');
                }

                /*
                 * Ensure that the mysql connection is still available. If not,
                 * the next function will cut that connection so that it can
                 * auto reconnect with the next query.
                 *
                 * This is done here because some tasks may restart the mysql
                 * server
                 */
                $end = microtime(true);
                task_test_mysql();

                $task['status']     = 'completed';
                $task['time_spent'] = $end - $start;

                tasks_update($task, true);
                set_time_limit(0);

                log_console(tr('Task ":task" executed successfully in ":time"', array(':task' => $task['id'], ':time' => time_difference($start, $end, 'auto', 5))), 'green');
                log_file(tr('Task ":task" executed successfully in ":time"'   , array(':task' => $task['id'], ':time' => time_difference($start, $end, 'auto', 5))), 'tasks');

            }catch(Exception $e){
                $end = microtime(true);
                task_test_mysql();

                try{
                    log_console(tr('Task ":task" failed with ":e" in ":time"', array(':task' => $task['id'], ':e' => $e, ':time' => time_difference($start, $end, 'auto', 5))), 'red');
                    log_file(tr('Task ":task" failed with ":e" in ":time"'   , array(':task' => $task['id'], ':e' => $e, ':time' => time_difference($start, $end, 'auto', 5))), 'tasks');

                    $task['status']     = 'failed';
                    $task['results']    = array_merge($e->getMessages(), array(' '), $e->getData());
                    $task['time_spent'] = microtime(true) - $start;

                    array_unshift($task['results'], tr('Task executed command ":command"'   , array(':command' => $command.' '.$options))."\n");
                    array_unshift($task['results'], tr('Task ":id" encountered an exception', array(':id' => $task['id']))."\n");
                    tasks_update($task);
                    tasks_failed($task['id']);

                }catch(Exception $e){
                    notify($e);
                    log_console(tr('Exception handling for task ":task" failed with ":e"', array(':task' => $task['id'], ':e' => $e)), 'red');
                    log_file(tr('Exception handling for task ":task" failed with ":e"'   , array(':task' => $task['id'], ':e' => $e)), 'tasks');
                }
            }
        }

        if($count){
            log_console(tr('Executed ":count" tasks', array(':count' => $count)), 'green');
            log_file(tr('Executed ":count" tasks', array(':count' => $count)), 'tasks');
        }

        break;

    case '':
        throw new BException(tr('No method specified'), 'no-method');

    default:
        throw new BException(tr('Unknown method ":method" specified', array(':method' => cli_method())), 'unknown-method');
}
?>
