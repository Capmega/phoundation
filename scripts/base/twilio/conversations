#!/usr/bin/php
<?php
/*
 * This is an empty test script template
 */
$usage = './scripts/base/twilio/conversations rebuild [--repliedon-now]';

$help  = 'This script is an interface to the twilio API and local twilio databse

METHODS

rebuild                         - Rebuild the email conversations table from the
                                  email messages



OPTIONS

--repliedon-now                 - (Only for "rebuild" method) set the column
                                  "repliedon" to NOW() instead of NULL';

require_once(__DIR__.'/../../../libs/startup.php');

load_libs('json,twilio,sms');

switch(cli_method()){
    case 'rebuild':
        /*
         * Create conversations for all messages that do not have conversations yet
         */
        $repliedon_now = cli_argument('--repliedon-now');

        cli_no_arguments_left();

        log_console(tr('Rebuilding twilio conversations'), '', 'white');

        sql_query('UPDATE `sms_messages` SET `conversations_id` = NULL;');
        sql_query('DELETE FROM `sms_conversations`;');

        $r = sql_query('SELECT   `id`,
                                 `type`,
                                 `from_phone`,
                                 `to_phone`

                        FROM     `sms_messages`

                        WHERE    `conversations_id` IS NULL

                        GROUP BY `from_phone`, `to_phone`, `type`

                        ORDER BY `createdon`');

        if($r->rowCount()){
            log_console(tr('Creating conversations for "%count%" messages', array('%count%' => str_log($r->rowCount()))), '');

            $p = sql_prepare('UPDATE `sms_messages`

                              SET    `conversations_id` = :conversations_id

                              WHERE  `type`             = :type

                              AND   (`to_phone`         = :to_phone
                              OR     `from_phone`       = :to_phone)

                              AND   (`to_phone`         = :from_phone
                              OR     `from_phone`       = :from_phone)');

            while($message = sql_fetch($r)){
                cli_dot();

                $conversation = sms_get_conversation($message['from_phone'], $message['to_phone'], $message['type'], $repliedon_now);

                $p->execute(array(':conversations_id' => $conversation['id'],
                                  ':from_phone'       => $message['from_phone'],
                                  ':to_phone'         => $message['to_phone'],
                                  ':type'             => $message['type']));
            }

            log_console('Done', '', 'green');
        }



        /*
         * First clean all last_messages from conversations and rebuild them from scratch
         */
        log_console('Rebuilding twilio conversation messages', 'conversations', 'white');

        sql_query('UPDATE `sms_conversations` SET `last_messages` = ""');

        $r = sql_query  ('SELECT   `id`,
                                   `type`,
                                   `phone_local`,
                                   `phone_remote`,
                                   `last_messages`

                          FROM     `sms_conversations`

                          ORDER BY `createdon`');

        if($repliedon_now){
            $p = sql_prepare('UPDATE   `sms_conversations`

                              SET      `last_messages` = :last_messages,
                                       `direction`     = :direction,
                                       `modifiedon`    = :modifiedon,
                                       `repliedon`     = NOW()

                              WHERE    `id` = :id');

        }else{
            $p = sql_prepare('UPDATE   `sms_conversations`

                              SET      `last_messages` = :last_messages,
                                       `direction`     = :direction,
                                       `modifiedon`    = :modifiedon,
                                       `repliedon`     = :repliedon

                              WHERE    `id` = :id');
        }

        while($conversation = sql_fetch($r)){
            cli_dot();

            $msg_count  = 0;
            $repliedon  = null;
            $modifiedon = null;

            $list       = sql_list('SELECT   `id`,
                                             `direction`,
                                             `createdon`,
                                             `body`

                                    FROM     `sms_messages`

                                    WHERE    `type`       = :type

                                    AND     (`to_phone`   = :to_phone
                                    OR       `from_phone` = :to_phone)

                                    AND     (`to_phone`   = :from_phone
                                    OR       `from_phone` = :from_phone)

                                    ORDER BY `createdon` DESC

                                    LIMIT '.$_CONFIG['twilio']['conversations']['size'],

                                    array(':type'       => $conversation['type'],
                                          ':from_phone' => $conversation['phone_local'],
                                          ':to_phone'   => $conversation['phone_remote']));

            $conversation['last_messages'] = array();

            foreach($list as $id => $message){
                if(empty($modifiedon)){
                    $direction  = $message['direction'];
                    $modifiedon = $message['createdon'];
                }

                if(empty($replied) and ($message['direction'] == 'sent')){
                    /*
                     * Register the last reply
                     */
                    $replied = $message['createdon'];
                }

                if(++$msg_count <= $_CONFIG['twilio']['conversations']['size']){
                    /*
                     * Build the conversations
                     */
                    if($_CONFIG['twilio']['conversations']['message_dates']){
                        $message['body'] = str_replace('%datetime%', date_convert($message['createdon']), $_CONFIG['twilio']['conversations']['message_dates']).$message['body'];
                    }

                    $conversation['last_messages'][] = array('id'        => $id,
                                                             'direction' => $message['direction'],
                                                             'message'   => $message['body']);
                }
            }

            $conversation['last_messages'] = json_encode_custom($conversation['last_messages']);

            if($repliedon_now){
                $p->execute(array(':id'            => $conversation['id'],
                                  ':modifiedon'    => $modifiedon,
                                  ':direction'     => $direction,
                                  ':last_messages' => $conversation['last_messages']));

            }else{
                $p->execute(array(':id'            => $conversation['id'],
                                  ':modifiedon'    => $modifiedon,
                                  ':direction'     => $direction,
                                  ':repliedon'     => $repliedon,
                                  ':last_messages' => $conversation['last_messages']));
            }
        }

        break;

    case '':
        throw new bException(tr('No method specified'), 'no-method');

    default:
        throw new bException(tr('Unknown option ":method" specified', array(':method' => cli_method())), 'unknown');
}
?>
