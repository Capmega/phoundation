#!/usr/bin/php
<?php
/*
 * This is an empty test script template
 */
$usage = "./scripts/base/twilio/conversations SUBENVIRONMENT / all\n".
         "./scripts/base/twilio/conversations [rebuild]\n";

$help  = "This script is an interface to the twilio API and local twilio databse";

$quiet = true;

require_once(dirname(__FILE__).'/../../../libs/startup.php');

load_libs('json,twilio');

switch(argument(0)){
    case 'rebuild':
        /*
         * Create conversations for all messages that do not have conversations yet
         */
        log_console(tr('Rebuilding twilio conversations'), '', 'white');

        sql_query('UPDATE `twilio_messages` SET `twilio_conversations_id` = NULL;');
        sql_query('DELETE FROM `twilio_conversations`;');

        $count = 0;
        $r     = sql_query('SELECT `id`, `from_phone`, `to_phone` FROM `twilio_messages` WHERE `twilio_conversations_id` IS NULL GROUP BY `from_phone`, `to_phone` ORDER BY `createdon`');

        if($r->rowCount()){
            log_console(tr('Creating conversations for "%count%" messages', array('%count%' => str_log($r->rowCount()))), '');

            $p = sql_prepare('UPDATE `twilio_messages`

                              SET    `twilio_conversations_id` = :twilio_conversations_id

                              WHERE (`to_phone`                = :to_phone
                              OR     `from_phone`              = :to_phone)

                              AND   (`to_phone`                = :from_phone
                              OR     `from_phone`              = :from_phone)');

            while($message = sql_fetch($r)){
                if($count++ > 10){
                    $count = 0;
                    log_console('.', '', 'green', false);
                }

                $conversation = twilio_get_conversation($message['from_phone'], $message['to_phone']);

                $p->execute(array(':twilio_conversations_id' => $conversation['id'],
                                  ':from_phone'              => $message['from_phone'],
                                  ':to_phone'                => $message['to_phone']));
            }

            log_console('Done', '', 'green');
        }



        /*
         * First clean all last_messages from conversations and rebuild them from scratch
         */
        log_console('Rebuilding all twilio conversations', 'conversations', 'white');

        sql_query('UPDATE `twilio_conversations` SET `last_messages` = ""');

        $count = 0;

        $r     = sql_query  ('SELECT   `id`,
                                       `phone_local`,
                                       `phone_remote`,
                                       `last_messages`

                              FROM     `twilio_conversations`

                              ORDER BY `createdon`');

        $p     = sql_prepare('UPDATE   `twilio_conversations`

                              SET      `last_messages` = :last_messages,
                                       `direction`     = :direction,
                                       `modifiedon`    = :modifiedon,
                                       `repliedon`     = :repliedon

                              WHERE    `id` = :id');

        while($conversation = sql_fetch($r)){
            if($count++ > 10){
                $count = 0;
                log_console('.', '', 'green', false);
            }

            $msg_count  = 0;
            $repliedon  = null;
            $modifiedon = null;

            $list       = sql_list('SELECT   `id`,
                                             `direction`,
                                             `createdon`,
                                             `body`

                                    FROM     `twilio_messages`

                                    WHERE   (`to_phone`   = :to_phone
                                    OR       `from_phone` = :to_phone)

                                    AND     (`to_phone`   = :from_phone
                                    OR       `from_phone` = :from_phone)

                                    ORDER BY `createdon` DESC

                                    LIMIT '.$_CONFIG['twilio']['conversations']['size'],

                                    array(':from_phone' => $conversation['phone_local'],
                                          ':to_phone'   => $conversation['phone_remote']));

            $conversation['last_messages'] = array();

            foreach($list as $id => $message){
                if(empty($modifiedon)){
                    $direction  = $message['direction'];
                    $modifiedon = $message['createdon'];
                }

                if(empty($replied) and ($message['direction'] == 'sent')){
                    /*
                     * Register the last reply
                     */
                    $replied = $message['createdon'];
                }

                if(++$msg_count <= $_CONFIG['twilio']['conversations']['size']){
                    /*
                     * Build the conversations
                     */
                    if($_CONFIG['twilio']['conversations']['message_dates']){
                        $message['body'] = str_replace('%datetime%', system_date_format($message['createdon']), $_CONFIG['twilio']['conversations']['message_dates']).$message['body'];
                    }

                    $conversation['last_messages'][] = array('id'        => $id,
                                                             'direction' => $message['direction'],
                                                             'message'   => $message['body']);
                }
            }

            $conversation['last_messages'] = json_encode_custom($conversation['last_messages']);

            $p->execute(array(':id'            => $conversation['id'],
                              ':modifiedon'    => $modifiedon,
                              ':direction'     => $direction,
                              ':repliedon'     => $repliedon,
                              ':last_messages' => $conversation['last_messages']));
        }

        log_console('Done' , '', 'green');
        log_console('Done!', '', 'green');
        break;

    case '':
        throw new bException('No option specified', 'notspecified');

    default:
        throw new bException('Unknown option "'.str_log(argument(0)).'" specified', 'unknown');
}
?>
