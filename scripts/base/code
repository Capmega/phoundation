#!/usr/bin/php
<?php
/*
 * This is an empty test script template
 */
$usage = './scripts/base/code
./scripts/base/code patch [option]';

$help  = 'This script can help with code management actions like code cleanup,
code merge-to-toolkit, merge-to-phoundation, etc.

When run on phoundation main code, this script will generate an error.



METHODS

tabs-to-spaces                  - Changes tabs into spaces on the specified path
                                  If no path is specified, the root of the
                                  project will be assumed



ARGUMENTS

--path                          -

--filter                        -

--follow-symlinks               -

--follow-hidden                 -

status                          - Will show list of phoundation and toolkit
                                  files that have changes

diff                            - Will show diffs for each phoundation and
                                  toolkit file

patch                           - Will apply the diff patches to both
                                  phoundation and toolkit. If either phoundation
                                  or toolkit has changes, the diff patches will
                                  be copied to either phoundation or toolkit,
                                  and applied. When run on toolkit, it will only
                                  execute the work on phoundation files

  --create-only                 - Only create the patch files, do not apply
                                  them

  --no-clean                    - Do NOT clean up local phoundation / toolkit
                                  changes after all patches have applied
                                  successfully

  --reverse                     - Will get the current open changes from
                                  phoundation and toolkit and try to apply them
                                  on this project (and then remove them from
                                  phoundation and toolkit)';

require_once(__DIR__.'/../../libs/startup.php');

cli_only();
load_libs('git,code');

$code_bump       = true;
$path            = cli_argument('--path'  , true, ROOT);
$filter          = cli_argument('--filter', true, '/.+\.(php|html)/');
$follow_symlinks = cli_argument('--follow-symlinks');
$follow_hidden   = cli_argument('--follow-hidden');



/*
 * Define a list of files that should be skipped because they will very likely
 * be changed on the project level. List should be regex strings
 */
$skip = array('phoundation' => array(),
              'toolkit'     => array('/www\/en\/(admin\/)?index\.php/',  // Admin index file
                                     '/logo.+?.(png|jpg)/'               // Site logos
                                    ));



/*
 * Test if we're on phoundation or toolkit. This script cannot be used on
 * phoundation, and if we're on toolkit, only check for phoundation changes
 */
if(!PROJECT){
    throw new CoreException(tr('This project has no project name, perhaps you are trying to run this on the phoundation project?'), 'warning/invalid');
}

$phoundation_only = (PROJECT == 'CAPMEGA_TOOLKIT');



/*
 * Determine what method to execute
 */
switch(cli_method()){
    case 'tabs-to-spaces':
        $spaces = cli_argument('--spaces', true, 4);
        cli_no_arguments_left();

        $function = function($file) use ($spaces){
            /*
             * Replace tabs with n spaces
             */
            $data = file_get_contents($file);
            $data = str_replace("\t", str_repeat(' ', $spaces), $data);

            return file_put_contents($file, $data);
        };

        if(!is_dir($path)){
            /*
             * This is a specific file, ignore filter, if specified
             */
            log_console(tr('Specified path ":path" is a normal file, ignoring filter (if specified)', array(':path' => $path)), 'yellow');
            $filter = '';
        }

        $count = file_tree_execute(array('path'            => $path,
                                         'filter'          => $filter,
                                         'follow_hidden'   => $follow_hidden,
                                         'follow_symlinks' => $follow_symlinks,
                                         'callback'        => $function));

        if($count){
            cli_dot(false);
            log_console(tr('Processed ":count" files', array(':count' => $count)), 'green');

        }else{
            log_console(tr('No files processed'), 'yellow');
        }

        break;

    case 'patch':
        $create_only = cli_argument('--create-only');
        $no_clean    = cli_argument('--no-clean');
        $reverse     = cli_argument('--reverse');



        /*
         * Get our current framework version line, then get available version lines from
         * the local phoundation project
         */
        $current_branch       = code_phoundation_branch();
        $branches             = code_get_phoundation_branch_lines();
        $current_version_line = code_get_version_line(FRAMEWORKCODEVERSION);

        if(!in_array($current_version_line, $branches)){
            throw new CoreException(tr('The current version line ":line" is not available in your phoundation project', array(':line' => $current_version_line)), 'warning/not-exists');
        }



        /*
         * Checkout the current version on phoundation
         */
        code_phoundation_checkout($current_version_line);
        $phoundation_version = code_get_phoundation_framework_version();

        switch(version_compare(FRAMEWORKCODEVERSION, $phoundation_version)){
            case 1:
                /*
                 * The phoundation version is behind the current code version
                 * which could be because to system library framework version
                 * was updated manually when init files were added.
                 *
                 * This should not be a problem, but auto code bumping should
                 * now NOT be done.
                 */
                $code_bump = false;
                break;

            case 0:
                /*
                 * The framework code version of this project is at the current
                 * phoundation framework code version
                 */
                break;

            case -1:
                /*
                 * The Phoundation framework code version is ahead of this
                 * project. Update this project first to ensure both project
                 * have the same code
                 */
                try{
                    log_console(tr('Current framework version of this project is behind the found Phoundation framework version. Updating first'), 'yellow');
                    git_stash();
                    script_exec(array('timeout'  => 90,
                                      'function' => 'passthru',
                                      'commands' => array('base/update', array('--branch', $current_version_line))));

                }catch(Exception $e){
                    /*
                     * Update failed. Auto cleanup everything and return the stashed changes, leaving everything as it was
                     */
                    git_reset('', ROOT, array('hard' => true));
                    git_clean(ROOT, true, true);
                    git_stash_pop();

                    throw new CoreException(tr('Auto update failed, please check output to find out what went wrong. All update changes have been reset and cleaned, all previous code changes have been reinstated'), $e);
                }

                /*
                 * Okay, code changes were stashed, update was successful,
                 */
                try{
                    git_stash_pop();

                }catch(Exception $e){
                    throw new CoreException(tr('Update succeeded, but "git stash pop" failed. Very likely this is due to merge conflicts. Please resolve the conflicts, and re-run this script'), $e);
                }
        }

        // FALLTROUGH
    case 'status':
        // FALLTROUGH
    case 'diff':
        cli_no_arguments_left();

        /*
         * Determine what type of project this is
         */
        if(file_exists(ROOT.'www/en/role.php') and file_exists(ROOT.'www/en/roles.php')){
            $type = 'intranet';
            log_console(tr('Detected that this website is intranet site...'), 'VERBOSE');

        }elseif(file_exists(ROOT.'www/en/admin/role.php') and file_exists(ROOT.'www/en/admin/roles.php')){
            $type = 'normal';
            log_console(tr('Detected that this website is a normal site...'), 'VERBOSE');

        }else{
            throw new CoreException(tr('Failed to find role.php and roles.php files to identify website type'), 'warning/not-exist');
        }

        /*
         * Prepare patch paths, must exist and be empty
         */
        $paths['phoundation'] = code_locate_phoundation();
        $paths['toolkit']     = code_locate_toolkit();

        /*
         * Ensure that phoundation and toolkit have no pending changes
         */
        if((cli_method() == 'patch') and !FORCE and !$reverse){
            if(git_status($paths['phoundation'])){
                throw new CoreException(tr('The phoundation project has pending git changes'), 'warning/has-changes');
            }

            if(empty($phoundation_only)){
                if(git_status($paths['toolkit'])){
                    throw new CoreException(tr('The toolkit project has pending git changes'), 'warning/has-changes');
                }
            }
        }

        /*
         * Get a list of all files that contain changes and separate them by phoundation and toolkit sections
         */
        $files    = git_status(ROOT);
        $sections = array('phoundation' => array(),
                          'toolkit'     => array());

        switch(cli_method()){
            case 'status':
                break;

            case 'diff':
                log_console(tr('Gathering file changes'), 'QUIET/white', false);
                break;

            case 'patch':
                if($reverse){
                    under_construction();
                }

                log_console(tr('Gathering file changes'), 'QUIET/white', false);
                break;
        }

        foreach($files as $file => &$status){
            try{
                $marked = false;

                //switch($status){
                //    case 'modified':
                //        // FALLTHROUGH
                //    case 'not tracked':
                //       continue 2;
                //}

                if(preg_match('/sitemap.*?.xml/', $file)){
                    /*
                     * Skip sitemap files
                     */
                    log_console(tr('Skipping sitemap file ":file"', array(':file' => $file)), 'VERBOSE');
                    continue;
                }

                if(preg_match('/sitemaps\//', $file)){
                    /*
                     * Skip sitemap directories
                     */
                    log_console(tr('Skipping sitemap directory ":file"', array(':file' => $file)), 'VERBOSE');
                    continue;
                }

                log_console(tr('Checking file ":file"', array(':file' => $file)), 'VERBOSE/cyan');

                if(preg_match_all('/www\/[a-z]{2}\/admin\/[a-z0-9-_]+\.php/', $file)){
                    /*
                     * This is an admin UI file
                     */
                    if(!$phoundation_only){
                        if(code_file_exists_in_toolkit(str_replace('admin/', '', $file))){
                            log_console(tr('Identified file as toolkit'), 'VERBOSE');
                            $sections['toolkit'][$file] = $status;
                            $marked = true;
                        }
                    }

                }elseif(preg_match_all('/www\/[a-z]{2}\/ajax\/blog\/.+?\.php/', $file)){
                    /*
                     * This is a blog management system file, managedd by toolkit
                     */
                    if(!$phoundation_only){
                        if(code_file_exists_in_toolkit($file)){
                            log_console(tr('Identified file as toolkit'), 'VERBOSE');
                            $sections['toolkit'][$file] = $status;
                            $marked = true;
                        }
                    }

                }elseif(preg_match_all('/www\/[a-z]{2}\/ajax\/storage\/.+?\.php/', $file)){
                    /*
                     * This is a storage system file, managedd by toolkit
                     */
                    if(!$phoundation_only){
                        if(code_file_exists_in_toolkit($file)){
                            log_console(tr('Identified file as toolkit'), 'VERBOSE');
                            $sections['toolkit'][$file] = $status;
                            $marked = true;
                        }
                    }

                }elseif(preg_match_all('/www\/[a-z]{2}\/[a-z0-9-_]+\.php/', $file)){
                    /*
                     * This is an admin UI file
                     */
                    if(!$phoundation_only){
                        if($type == 'intranet'){
                            if(code_file_exists_in_toolkit(str_replace('admin/', '', $file))){
                                log_console(tr('Identified file as toolkit'), 'VERBOSE');
                                $sections['toolkit'][$file] = $status;
                                $marked = true;
                            }
                        }
                    }

                }elseif(preg_match_all('/www\/[a-z]{2}\/(admin\/)?pub\/js\/base\/.+/', $file, $matches)){
                    /*
                     * This is a phoundation javascript file
                     */
                    if(code_file_exists_in_phoundation(str_replace('admin/', '', $file))){
                        log_console(tr('Identified file as phoundation'), 'VERBOSE');
                        $sections['phoundation'][$file] = $status;
                        $marked = true;
                    }

                }elseif(preg_match_all('/www\/[a-z]{2}\/pub\/.+/', $file, $matches)){
                    /*
                     * This is an admin UI pub file for an intranet site
                     */
                    if($type == 'intranet'){
                        if(!$phoundation_only){
                            if(substr($file, -10, 10) == 'style.css'){
                                /*
                                 * This is the custom style.css which is unique to each
                                 * project. Do NOT patch this!
                                 */
                            }else{
                                if(code_file_exists_in_toolkit(str_replace('admin/', '', $file))){
                                    log_console(tr('Identified file as toolkit'), 'VERBOSE');
                                    $sections['toolkit'][$file] = $status;
                                    $marked = true;
                                }
                            }
                        }
                    }

                }elseif(preg_match_all('/www\/[a-z]{2}\/admin\/pub\/.+/', $file, $matches)){
                    /*
                     * These are admin pub files (very likely toolkit)
                     */
                    if(!$phoundation_only){
                        if(substr($file, -9, 10) == 'style.css'){
                            /*
                             * This is the custom style.css which is unique to each
                             * project. Do NOT patch this!
                             */

                        }else{
                            if(code_file_exists_in_toolkit(str_replace('admin/', '', $file))){
                                log_console(tr('Identified file as toolkit'), 'VERBOSE');
                                $sections['toolkit'][$file] = $status;
                                $marked = true;
                            }
                        }
                    }

                }elseif(preg_match('/libs\/[a-z0-9-_]+\.php/', $file)){
                    /*
                     * These are library files, most likely phoundation,
                     * possibly toolkit
                     */
                    if(substr($file, -10, 10) == 'custom.php'){
                        /*
                         * This is the custom library. Do NOT copy this library
                         * since its unique to every project!
                         */

                    }else{
                        /*
                         * These are library files, might be project, toolkit,
                         * or phoundation library files. Do not copy project library files!
                         */
                        if(code_file_exists_in_phoundation($file)){
                            /*
                             * These are phoundation library files
                             */
                            log_console(tr('Identified file as phoundation'), 'VERBOSE');
                            $sections['phoundation'][$file] = $status;
                            $marked = true;

                        }elseif(code_file_exists_in_toolkit($file)){
                            /*
                             * These are toolkit library files
                             */
                            log_console(tr('Identified file as toolkit'), 'VERBOSE');
                            $sections['toolkit'][$file] = $status;
                            $marked = true;
                        }
                    }

                }elseif(preg_match('/libs\/handlers\/[a-z0-9-_]+\.php/', $file)){
                    /*
                     * Library handler files, possibly project, toolkit,
                     * phoundation, or new
                     */
                    if(code_file_exists_in_phoundation($file)){
                        /*
                         * phoundation existing library handler files
                         */
                        log_console(tr('Identified file as phoundation'), 'VERBOSE');
                        $sections['phoundation'][$file] = $status;
                        $marked = true;

                    }elseif(code_file_exists_in_toolkit($file)){
                        /*
                         * Toolkit existing library handler files
                         */
                        log_console(tr('Identified file as toolkit'), 'VERBOSE');
                        $sections['toolkit'][$file] = $status;
                        $marked = true;
                    }

                }elseif(preg_match('/init\/framework\/[0-9.]+\.php/', $file)){
                    /*
                     * phoundation existing init files
                     */
                    log_console(tr('Identified file as phoundation'), 'VERBOSE');
                    $sections['phoundation'][$file] = $status;
                    $marked = true;

                }elseif(preg_match('/scripts\/base\/[a-z0-9-]+/', $file)){
                    /*
                     * phoundation existing script files
                     */
                    log_console(tr('Identified file as phoundation'), 'VERBOSE');
                    $sections['phoundation'][$file] = $status;
                    $marked = true;

                }elseif(preg_match('/scripts\/tests\/[a-z0-9-]+/', $file)){
                    if(code_file_exists_in_phoundation($file)){
                        /*
                         * phoundation existing test script files
                         */
                        log_console(tr('Identified file as phoundation'), 'VERBOSE');
                        $sections['phoundation'][$file] = $status;
                        $marked = true;
                    }

                }elseif(preg_match('/config\/base\/.+/', $file)){
                    /*
                     * phoundation existing configuration files
                     */
                    log_console(tr('Identified file as phoundation'), 'VERBOSE');
                    $sections['phoundation'][$file] = $status;
                    $marked = true;
                }

                if($marked){
                    cli_dot(1, 'green', '.', true);

                }else{
                    cli_dot(1, '', '.', true);
                }

            }catch(Exception $e){
                throw new CoreException(tr('Failed to build sections list'), $e);
            }
        }

        unset($status);
        cli_dot(false, 'green', '.', true);

        /*
         * Get the file changes in this project and pass over each file
         */
        if(!$sections){
            log_console(tr('No phoundation or toolkit files with changes were found!'), 'QUIET/green');
        }

        if(empty($sections['phoundation'])){
            /*
             * No phoundation updates, no auto code bump
             */
            $code_bump = false;
        }

        foreach($sections as $section => &$list){
            switch(cli_method()){
                case 'status':
                    log_console(tr('Showing modified files for section ":section"', array(':section' => $section)), 'QUIET/white');
                    break;

                case 'diff':
                    log_console(tr('Showing modified file diffs for section ":section"', array(':section' => $section)), 'QUIET/white');
                    break;

                case 'patch':
                    log_console(tr('Applying ":count" patches for ":section"', array(':section' => $section, ':count' => count($list))), 'QUIET/white', false);
            }

            foreach($list as $file => &$status){
                try{
                    $changed   = false;
                    $skip_file = false;

                    if($skip[$section]){
                        foreach($skip[$section] as $regex){
                            if(preg_match($regex, $file)){
                                $skip_file = true;
                            }
                        }
                    }

                    if($skip_file){
                        continue;
                    }

                    switch(cli_method()){
                        case 'status':
                            log_console(tr('  :file', array(':file' => $file)));
                            $skip_file = true;

                        case 'diff':
                            log_console(tr('Showing diff for file ":file"', array(':file' => $file)), 'QUIET/white');
                    }

                    if($skip_file){
                        continue;
                    }

                    /*
                     * Patch or show diff
                     */
                    if($status === 'not tracked'){
                        log_console(tr('Ignoring not tracked file ":file", it is unknown where this file has to go', array(':file' => $file)), 'VERBOSEDOT/yellow');

                    }else{
                        if($section == 'phoundation'){
                            $status = code_patch(array('file'          => $file,
                                                       'source_path'   => ROOT,
                                                       'target_path'   => $paths[$section],
                                                       'method'        => (((cli_method() == 'patch') and $create_only) ? 'create' : cli_method()),
                                                       'clean'         => $no_clean,
                                                       'restrictions'  => array(ROOT, $paths[$section])));

                        }elseif(!$phoundation_only){
                            /*
                             * Patch toolkit as well
                             */
                            $status = code_patch(array('file'          => $file,
                                                       'source_path'   => ROOT,
                                                       'target_path'   => $paths[$section],
                                                       'method'        => (((cli_method() == 'patch') and $create_only) ? 'create' : cli_method()),
                                                       'replaces'      => array($file => str_replace('admin/', '', $file)),
                                                       'clean'         => $no_clean,
                                                       'restrictions'  => array(ROOT, $paths[$section])));
                        }

                        if(cli_method() == 'patch'){
                            cli_dot(1, 'green', '.', true);
                        }
                    }

                }catch(Exception $e){
                    if(!$no_clean){
                        if($e->getData()){
                            $files      = $e->getData();
                            $patch_file = isset_get($files['patch_file']);

                            if($patch_file){
                                file_delete($patch_file, array($paths['phoundation'], $paths['toolkit']));
                            }
                        }
                    }

                    switch($e->getCode()){
                        case 'failed':
                            /*
                             * Patching mostly fails when for some reason the
                             * target phoundation (or toolkit) file already was
                             * updated and the files are the same.
                             *
                             * If this is so, we can simply act as if the file
                             * was patched
                             */
                            $patch_file = $e->getData();
                            $patch_file = array_shift($patch_file);

                            if($section == 'phoundation'){
                                if(code_diff(ROOT.$file, $paths[$section].$file)){
                                    throw $e;
                                }

                                log_console(tr('Patch of Phoundation file ":file" failed, because file already received patch before. Ignorning', array(':file' => $file)), 'yellow');
                                $status = 'patched';
                                break;

                            }else{
                                if(code_diff(ROOT.$file, $paths[$section].str_replace('admin/', '', $file))){
                                    throw $e;
                                }

                                log_console(tr('Patch of Toolkit file ":file" failed, because file already received patch before. Ignorning', array(':file' => ROOT.$file)), 'yellow');
                                $status = 'patched';
                                break;
                            }

                            if(!$no_clean){
                                /*
                                 * git patching failed. Cleanup phoundation and toolkit paths
                                 */
                                try{
                                    git_clean($paths['phoundation'], true, true);
                                    git_checkout(null, $paths['phoundation']);

                                    if(!$phoundation_only){
                                        git_clean($paths['toolkit'], true, true);
                                        git_checkout(null, $paths['toolkit']);
                                    }

                                }catch(Exception $f){
                                    /*
                                     * Seriously? Two exceptions in a row?
                                     */
                                    log_console(tr('Crap! Patching failed and then cleanup failed as well! Showing exceptions for both the patch fail and git cleanup fail'), 'red');
                                    show($e);
                                    showdie($f);
                                }
                            }

                            $e = new bException(tr('Patching failed for section ":section" file ":file", halting process, cleaned phoundation and toolkit projects! Apply this file manually!', array(':section' => $section, ':file' => $file)), $e);
                            $e->setCode('no-trace');
                            throw $e;

                        default:
                            throw $e;
                    }
                }
            }

            unset($status);
            cli_dot(false, 'green', '.', true);
        }

        unset($list);

        /*
         * Patching was applied correctly! Delete changes for phoundation and
         * toolkit that have been sent
         */
        if(cli_method() == 'patch'){
            if($no_clean or $create_only){
                log_console(tr('Not cleaning local changes due to --no-clean or --create-only option'), 'yellow');

            }else{
                log_console(tr('All files patched successfully, cleaning up'), 'white', false);

                if(VERBOSE){
                    log_console('');
                }

                foreach($sections as $section => $list){
                    foreach($list as $file => $status){
                        log_console(tr('Cleaning up file ":file"', array(':file' => $file)), 'VERBOSEDOT/green');

                        switch($status){
                            case 'patched':
                                git_checkout(null, ROOT.$file);
                                break;

                            case 'created':
                                file_delete(ROOT.$file, ROOT);
                                break;

                            default:
                                /*
                                 * Do nothing, as the file was not patched or
                                 * created.
                                 *
                                 * This may happen, for example, with new files
                                 * for which the system doesn't know if its
                                 * toolkit, phoundation, or simply for the
                                 * project itself. Another example could be
                                 * modified files for toolkit whilst running
                                 * this code patch inside toolkit, which would
                                 * not patch files in toolkit as the files ARE
                                 * already in toolkit
                                 */
                        }
                    }
                }

                cli_dot(false, 'green', '.', true);
            }
        }

        /*
         * Bump the Phoundation framework version
         */
        if($code_bump){
            $version = code_bump_phoundation_framework_version();
            log_console(tr('Bumped phoundation framework version to ":version"', array(':version' => $version)), 'green');
        }

        break;

    case '':
        throw new CoreException(tr('No method specified'), 'no-method');

    default:
        throw new CoreException(tr('Unknown argument ":method" specified', array(':method' => cli_method())), 'unknown-method');
}
?>
