#!/usr/bin/php
<?php
/*
 * This is the tasks manager script
 */
$usage = './scripts/base/tasks
./scripts/base/tasks add TASK JSON_DATA
./scripts/base/tasks list [options]
./scripts/base/tasks execute';

$help  = 'This is the tasks manager script

This script can be used to manage programmed tasks



METHODS



add TASK JSON_DATA              - Add a new task. TASK is the name of the
                                  script that should execute, and JSON_DATA
                                  should be a valid JSON string

    --after                     - Do not execute this task until after the
                                  specified date

    --method METHOD             - Execute this task using the specified METHOD.
                                  Must be one of \"normal\" (default),
                                  \"internal\", or \"background\"

    --timeout TIMEOUT           - Max amount of time that can be spent on
                                  executing this task (does not count for
                                  background tasks). Must be between 1 and 600,
                                  defaults to 30



execute                         - Try to execute all tasks that have status
                                  \"new\"



delete ID                       - Delete the task with the specified ID



reset ID                        - Reset the task with the specified ID so it may
                                  be executed again



clear                           - Clear a group of tasks from the tasks table.
                                  By default all tasks with status \"completed\"
                                  and \"failed\" will be cleared

    --all                       - Clear ALL tasks. Required FORCE mode

    --only-data                 - Clear only the \"data\" and \"results\" fields

    --status STATUS, ...        - Clear tasks with the specified statusses.
                                  Requires FORCE mode



list                            - List all tasks. By default, only open tasks
                                  (tasks with status \"new\" and \"executing\")
                                  are shown

    --closed                    - List only closed tasks

    --all                       - List all tasks

    -L / --limit LIMIT          - Limit list to LIMIT entries (defaults to 100)

    -P / --page PAGE            - Start list on PAGE * LIMIT entries (defaults
                                  to 0)



show ID                         - Show detailed information about the specified
                                  task id. The extra data shown will be the
                                  \"data\" and \"results\" JSON fields decoded';


cli_only();
load_libs('tasks');

switch (cli_method()) {
    case 'add':
under_construction('add');

        $after = cli_argument('--after');
        cli_no_arguments_left();
        break;

    case 'delete':
        /*
         * Delete the specified task
         */
        $id = cli_argument();
        cli_no_arguments_left();

        if (empty($id)) {
            throw new CoreException(tr('No task specified'), 'warning/not-specified');
        }

        if (!is_natural($id)) {
            throw new CoreException(tr('The specified task ":id" is invalid', array(':id' => $id)), 'warning/invalid');
        }

        $task = sql_get('SELECT `id`, `status` FROM `tasks` WHERE `id` = :id', array(':id' => $id));

        if (!$task) {
            throw new CoreException(tr('The specified task ":id" does not exist', array(':id' => $id)), 'warning/not-exist');
        }

        if ($task['status'] === 'processing') {
            /*
             * This task is running!
             */
            if (!FORCE) {
                throw new CoreException(tr('Task ":id" is currently in process! Use FORCE to delete it', array(':id' => $id)), 'warning/not-authorized');
            }
        }

        $r = sql_query('DELETE FROM `tasks` WHERE `id` = :id', array(':id' => $id));

        if (!$r->rowCount()) {
            log_console(tr('No tasks were deleted'), 'yellow');

        } else {
            log_console(tr('Deleted task ":id"', array(':id' => $id)), 'green');
        }

        break;

    case 'clear':
        /*
         * Clear all tasks
         */
        $only_data = cli_argument('--only-data');
        $status    = STATUS;

        cli_no_arguments_left();

        if ($core->register['all']) {
            if ($status) {
                throw new CoreException(tr('--status cannot be used with --all'), 'warning/invalid');
            }

            if (!FORCE) {
                throw new CoreException(tr('In order to clear non "completed" tasks, use the FORCE option'), 'warning/not-authorized');
            }

            if ($only_data) {
                /*
                 * Only clear data and results fields
                 */
                log_console(tr('Clearing all tasks data'), 'cyan');
                $r = sql_query('UPDATE `tasks` SET `data` = NULL, `results` = NULL');

            } else {
                log_console(tr('Clearing all tasks'), 'cyan');
                $r = sql_query('DELETE FROM `tasks`');
            }

        } else {
            if (!$status) {
                $status = array('completed', 'failed', 'timeout');

            } else {
                /*
                 * Validate the specified statusses that should be cleared
                 */
                foreach ($status as $entry) {
                    switch ($entry) {
                        case 'completed':
                            // FALLTHROUGH
                        case 'failed':
                            // FALLTHROUGH
                        case 'timeout':
                            /*
                             * These are okay to clear without force option
                             */
                            break;

                        default:
                            if (!FORCE) {
                                throw new CoreException(tr('In order to clear non "completed" tasks, use the FORCE option'), 'warning/not-authorized');
                            }
                    }
                }
            }

            if ($only_data) {
                /*
                 * Only clear data and results fields
                 */
                log_console(tr('Clearing tasks data with status ":status"', array(':status' => $status)), 'cyan');

                $in = sql_in($status);
                $r  = sql_query('UPDATE `tasks` WHERE `data` = null, `results` = null `status` IN ('.sql_in_columns($in).')', $in);

            } else {
                log_console(tr('Clearing tasks with status ":status"', array(':status' => $status)), 'cyan');

                $in = sql_in($status);
                $r  = sql_query('DELETE FROM `tasks` WHERE `status` IN ('.sql_in_columns($in).') AND `parents_id` IS NOT NULL', $in);
                $r  = sql_query('DELETE FROM `tasks` WHERE `status` IN ('.sql_in_columns($in).')'                             , $in);
            }
        }

        if (!$r->rowCount()) {
            log_console(tr('No tasks were cleared'), 'yellow');

        } else {
            log_console(tr('Cleared ":count" entries', array(':count' => $r->rowCount())), 'green');
        }

        break;

    case 'list':
        $status = STATUS;

        cli_no_arguments_left();

        if ($core->register['all']) {
            if ($status) {
                throw new CoreException(tr('--status cannot be used with --all'), 'warning/invalid');
            }

            if (!QUIET) {
                log_console(tr('Showing all tasks (parent task id with * means this task executes in parrallel)'), 'white');
            }

        } else {
            if (!$status) {
                $status = 'new,processing';
            }

            if (!QUIET) {
                log_console(tr('Showing tasks with status ":status" (parent task id with * means this task executes in parrallel)', array(':status' => $status)), 'white');
            }
        }

        $tasks = tasks_list($status);

        if (!$tasks->rowCount()) {
            log_console(tr('There are no tasks available with the specified filters'), 'yellow');

        } else {
            if (!QUIET) {
                log_console(Strings::size('#id', 6) . ' tasks' .Strings::size('Meta id', 7).' '.Strings::size('User', 22).' '.Strings::size('Parent task id', 14).' '.Strings::size('Command', 32).' '.Strings::size('Status', 16).' '.Strings::size('Description', 48).' '.Strings::size('Execution method', 20).' '.Strings::size('Timeout', 4).' '.Strings::size('Time spent', 10), 'cyan');
            }

            while ($task = sql_fetch($tasks)) {
                switch ($task['status']) {
                    case 'processing':
                        $task['status'] = Color::apply($task['status'], 'light_blue');
                        break;

                    case 'completed':
                        $task['status'] = Color::apply($task['status'], 'green');
                        break;

                    case 'timeout':
                        // FALLTHROUGH
                    case 'failed':
                        $task['status'] = Color::apply($task['status'], 'red');
                        break;
                }

                log_console(Strings::size($task['id'], 6) . ' tasks' .Strings::size($task['meta_id'], 7, ' ', true).' '.Strings::size(name($task), 22).' '.Strings::size(not_empty($task['parents_id'], '-'), 14, ' ', true).' '.Strings::size($task['command'], 32).' '.Strings::size($task['status'], 16).' '.Strings::size($task['description'], 48).' '.Strings::size($task['method'], 20).' '.Strings::size(($task['timeout'] ? $task['timeout'] : '-'), 4, ' ', true).' '.Strings::size($task['time_spent'] ? $task['time_spent'] : '-', 10, ' ', true));
            }
        }

        break;

    case 'show':
        $id = cli_argument();
        cli_no_arguments_left();

        if (!is_natural($id)) {
            throw new CoreException(tr('The specified task ":id" is not valid', array(':id' => $id)), 'warning/invalid');
        }

        $task = tasks_get($id);

        if (!$task) {
            throw new CoreException(tr('The specified task ":id" does not exist', array(':id' => $id)), 'warning/not-exist');
        }

        try {
            $data = json_decode_custom($task['data']);

        }catch(Exception $e) {
            $data = $e;
        }

        try {
            $results = json_decode_custom($task['results']);

        }catch(Exception $e) {
            $results = $e;
        }

        $description = $task['description'];

        unset($task['data']);
        unset($task['results']);
        unset($task['description']);

        foreach ($task as $key => $value) {
            switch ($key) {
                case 'status':
                    log_console(str_capitalize($key) . ':' .cli_status_color($value));
                    break;

                default:
                    log_console(str_capitalize($key) . ':' .$value);
            }
        }

        log_console(Color::apply('Description:', 'white') . ' tasks' .$description);
        log_console(Color::apply('Data:', 'white'));

        if (empty($data)) {
            log_console(tr('This task has no data'), 'yellow');

        } else {
            print_r($data)."\n";
        }

        switch ($task['status']) {
            case 'completed':
                // FALLTHROUGH
            case 'failed':
                // FALLTHROUGH
            case 'timeout':
                /*
                 * Task has finished or failed, show results
                 */
                log_console();
                log_console(Color::apply('Results:', 'white'));

                if (empty($results)) {
                    log_console(tr('This task has no results'), 'yellow');

                } else {
                    foreach ($results as $result) {
                        log_console(stripslashes($result));
                    }
                }
        }

        break;

    case 'reset':
        $id = cli_argument();
        cli_no_arguments_left();

        if (!is_natural($id)) {
            throw new CoreException(tr('The specified task ":id" is not valid', array(':id' => $id)), 'warning/invalid');
        }

        $task = tasks_get($id);

        if (!$task) {
            throw new CoreException(tr('The specified task ":id" does not exist', array(':id' => $id)), 'warning/not-exist');
        }

        if (($task['status'] !== 'failed') and ($task['status'] !== 'timeout') and !FORCE) {
            throw new CoreException(tr('Cannot reset task ":id", it has status ":status" instead of "failed" or "timeout". Use FORCE to reset the task anyway', array(':id' => $task['id'], ':status' => $task['status'])), 'warning/invalid');
        }

        meta_action($task['meta_id'], 'reset');
        tasks_reset($task['id']);
        log_console(tr('Reset task ":id"', array(':id' => $task['id'])), 'green');
        break;

    case 'execute':
        $restarts = cli_argument('--restart', true);
        cli_no_arguments_left();
        load_libs('date,time');

        if (!$restarts and ($restarts !== '0')) {
            $restarts = $_CONFIG['tasks']['restart']['amount'];
        }

        $count    = 0;
        $previous = null;

        log_console(tr('Started tasks execution...'), 'white');

        while (true) {
            if ($count > 50) {
                if (--$restarts <= 0) {
                    log_console(tr('Passed the maximum amount of restart cycles, quitting'));
                    die();
                }

                log_console(tr('Passed the maximum amount of task cycles, restarting'));
                run_background('base/tasks execute --env '.ENVIRONMENT.' --restart '.$restarts.(VERBOSE ? (VERYVERBOSE ? ' --very-verbose' : ' --verbose') : ''), true, false);
                die();
            }

            $task = tasks_get('new,waiting_parent', 'processing', $previous);

            if (!$task) {
                log_console(tr('No new tasks found, quitting'), 'yellow');
                break;
            }

            if ($task['id'] == $previous) {
                /*
                 * This task passed just now, meaning there are no new tasks
                 */
                log_console(tr('No new tasks found, quitting'), 'yellow');
                break;
            }

            $previous = $task['id'];
            $count++;

            try {
                /*
                 * Task depends on parent?
                 */
                if ($task['parents_id']) {
                    /*
                     * Check if its parent task has already been executed
                     */
                    $parent = sql_get('SELECT `id`, `status` FROM `tasks` WHERE `id` = :id', array(':id' => $task['parents_id']));

                    if (!$parent) {
                        throw new CoreException(tr('Task ":task" has parents_id ":parent" but this parent does not exist', array(':task' => $task['id'], ':parent' => $task['parents_id'])), 'warning/not-exists');
                    }

                    if ($task['parrallel']) {
                        if (($parent['status'] !== 'completed') and ($parent['status'] !== 'processing')) {
                            /*
                             * Cannot execute this task, the parent task hasn't started yet!
                             */
                            log_console(tr('Updating parrallel task ":task" to status "set-wait", it depends on task ":parent" which has not started or finished yet', array(':task' => $task['id'], ':parent' => $task['parents_id'])), 'VERBOSE/yellow');

                            meta_action($task['meta_id'], 'set-wait');
                            sql_query('UPDATE `tasks` SET `status` = "waiting_parent" WHERE `id` = :id', array(':id' => $task['id']));
                            continue;
                        }

                    } else {
                        if ($parent['status'] !== 'completed') {
                            /*
                             * Cannot execute this task, the parent task hasn't been completed yet!
                             */
                            log_console(tr('Updating task ":task" to status "set-wait", it depends on task ":parent" which has not finished yet', array(':task' => $task['id'], ':parent' => $task['parents_id'])), 'VERBOSE/yellow');

                            meta_action($task['meta_id'], 'set-wait');
                            sql_query('UPDATE `tasks` SET `status` = "waiting_parent" WHERE `id` = :id', array(':id' => $task['id']));
                            continue;
                        }
                    }
                }

                /*
                 * Task executes after DATE?
                 */
                if ($task['after']) {
                    $interval = date_convert($task['after'], 'object')->diff(new DateTime());
                }

                log_console(tr('Executing task ":task" with method ":method" and description ":description"', array(':task' => $task['id'], ':method' => $task['method'], ':description' => $task['description'])), 'cyan');

                $task['results'] = json_decode_custom($task['results']);
                $task['data']    = json_decode_custom($task['data']);
                $task['data'][]  = '--no-color';

                if ($task['timeout']) {
                    set_time_limit($task['timeout']);
                }

                $start     = microtime(true);
                $command   = $task['command'];
                $options   = '';
                $arguments = array();

                if (!empty($task['data']['method'])) {
                    $options .= ' '.$task['data']['method'];
                    unset($task['data']['method']);
                }

// :DELETE: Don't do this, because some tasks REQUIRE not to be run in verbose mode. If the system runs in verbose mode, with the next lines, these tasks could never execute normally
                ///*
                // * Run the task in verbose mode?
                // */
                //if (VERBOSE) {
                //    if (VERYVERBOSE) {
                //        $task['data'][] = '--very-verbose';
                //
                //    } else {
                //        $task['data'][] = '--verbose';
                //    }
                //}

                foreach ($task['data'] as $key => $value) {
                    if (empty($value)) continue;

                    if (is_integer($key)) {
                        $options    .= ' "'.$value.'"';
                        $arguments[] = $value;

                    } else {
                        $options    .= ' '.$key.' "'.$value.'"';
                        $arguments[] = $key;
                        $arguments[] = $value;
                    }
                }

                $task['executed'] = $command.' '.$options;

                switch ($task['method']) {
                    case 'background':
                        /*
                         * Execute this task in the background
                         */
                        $task['pid'] = run_background($command.' '.$options, 'task-logs/'.$task['id'].'-'.Strings::until($command, ' '));
                        break;

                    case 'internal':
                        /*
                         * Execute this task as an internal script
                         */
                        $task['results'] = script_exec(array('commands' => array($command, $task['data'])));
                        break;

                    case 'normal':
                        /*
                         * Execute this task as a normal task
                         */
                        $task['results'] = safe_exec(array('ok_exitcodes' => '0',
                                                           'function'     => null,
                                                           'timeout'      => $task['timeout'],
                                                           'commands'     => array(PATH_ROOT.'scripts/'.$command, $arguments)));
                        break;

                    case 'function':
                        /*
                         * Execute this task as an internal function
                         */
                        if (isset($task['load_libs'])) {
                            load_libs($task['load_libs']);
                            unset($task['load_libs']);
                        }

                        $task['results'] = $task['command']($task['data']);
                        break;

                    default:
                        throw new CoreException(tr('Unknown task execution method ":method" specified for task ":id" in ":time"', array(':method' => $task['method'], ':id' => $task['id'], ':time' => Time::difference($start, $end, 'auto', 5))), 'warning/unknown');
                }

                /*
                 * Ensure that the mysql connection is still available. If not,
                 * the next function will cut that connection so that it can
                 * auto reconnect with the next query.
                 *
                 * This is done here because some tasks may restart the mysql
                 * server
                 */
                $end = microtime(true);
                task_test_mysql();

                $task['status']     = 'completed';
                $task['time_spent'] = $end - $start;

                tasks_update($task, true);
                set_time_limit(0);

                log_console(tr('Task ":task" executed successfully in ":time"', array(':task' => $task['id'], ':time' => Time::difference($start, $end, 'auto', 5))), 'green');

            }catch(Exception $e) {
                $end  = microtime(true);
                $data = $e->getData();

                if ($e->isWarning()) {
                    $color = 'yellow';

                } else {
                    $color = 'red';
                }

                task_test_mysql();

                try {
                    log_console(tr('Task ":task" failed with ":e" in ":time"', array(':task' => $task['id'], ':e' => $e, ':time' => Time::difference($start, $end, 'auto', 5))), $color);

                    if ($data) {
                        log_console(tr('Failed task ":task" exitcode: :code', array(':code' => $e->getCode())), $color);
                        log_console(tr('Failed task ":task" output:', array(':task' => $task['id'])), $color);
                        log_console($data, 'red');

                        $task['results'] = $e->getMessages();
                    } else {
                        $task['results'] = array_merge($e->getMessages(), array(' '), Arrays::force($e->getData()));
                    }

                    if ($e->getCode() == '124') {
                        $task['status'] = 'timeout';

                    } else {
                        $task['status'] = 'failed';
                    }

                    $task['time_spent'] = microtime(true) - $start;

                    array_unshift($task['results'], tr('Task executed command ":command"'   , array(':command' => $command.' '.$options))."\n");
                    array_unshift($task['results'], tr('Task ":id" encountered an exception', array(':id' => $task['id']))."\n");
                    tasks_update($task);
                    tasks_failed($task['id']);

                }catch(Exception $f) {
                    notify($f);
                    log_console(tr('Exception handling for task ":task" failed with ":e"', array(':task' => $task['id'], ':e' => $f)), 'red');
                }
            }
        }

        if ($count) {
            log_console(tr('Executed ":count" tasks', array(':count' => $count)), 'green');
        }

        break;

    case '':
        throw new CoreException(tr('No method specified'), 'no-method');

    default:
        throw new CoreException(tr('Unknown method ":method" specified', array(':method' => cli_method())), 'unknown-method');
}
?>
