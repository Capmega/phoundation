#!/usr/bin/php
<?php
/*
 * This script can create new notification members
 */
$usage = "./scripts/base/notifications/members list all|CLASSID|CLASSNAME\n".
         "./scripts/base/notifications/members add CLASSID|CLASSNAME USERID|USERNAME\n".
         "./scripts/base/notifications/members remove CLASSID|CLASSNAME USERID|USERNAME\n";

$help  = "The notifications/members script can manage notification class members. You can list existing class members, or add or remove members from existing classes";

$quiet = true;
require_once(__DIR__.'/../../../libs/startup.php');
load_libs('notifications');



/*
 *
 */
if (!function_exists('s_get_user_class')) {
    function s_get_user_class($class, $user) {
        try {
            $return['user']       = $user;
            $return['class']      = $class;

            $return['users_id']   = sql_get('SELECT `id` FROM `users`                 WHERE `id` = :id    OR `username` = :user' , 'id', array(':id' => $user , ':user'  => $user));
            $return['classes_id'] = sql_get('SELECT `id` FROM `notifications_classes` WHERE `id` = :id    OR `name`     = :class', 'id', array(':id' => $class, ':class' => $class));

            if (!$return['classes_id']) {
                throw new CoreException(tr('s_get_user_class(): Specified class "%name%" does not exist', array('%name%' => $class)));
            }

            if (!$return['users_id']) {
                throw new CoreException(tr('s_get_user_class(): Specified user "%name%" does not exist', array('%name%' => $user)));
            }

            return $return;

        }catch(Exception $e) {
            throw new CoreException('s_get_user_class(): Failed', $e);
        }
    }
}



try {
    cli_only();

    switch ($method = cli_argument(0)) {
        case 'add':
            try {
                $data = s_get_user_class(cli_argument(1), cli_argument(2));

                if (sql_get('SELECT `id` FROM `notifications_members` WHERE `users_id` = :users_id AND `classes_id` = :classes_id', 'id', array(':users_id' => $data['users_id'], ':classes_id' => $data['classes_id']))) {
                    throw new CoreException(tr('User "%user%" is already a member of the notifications class "%class%"', array('%user%' => $data['user'], '%class%' => $data['class'])), 'alreadyexists');
                }

                sql_query('INSERT INTO `notifications_members` (`created_by`, `classes_id`, `users_id`)
                           VALUES                              (:created_by , :classes_id , :users_id)',

                           array(':created_by'  => isset_get($_SESSION['user']['id']),
                                 ':classes_id' => $data['classes_id'],
                                 ':users_id'   => $data['users_id']));

                log_console(tr('Added user "%user%" to notifications class "%class%"', array('%user%' => $data['user'], '%class%' => $data['class'])), '', 'green');

            }catch(Exception $e) {
                throw new CoreException(tr('Failed to add member to notifications class'), $e);
            }

            break;

        case 'list':
            $all = cli_argument('all');
            $r   = sql_query('SELECT    `notifications_members`.`id`,
                                        `notifications_classes`.`name` AS `class_name`,
                                        `users`.`name`                 AS `user_name`

                              FROM      `notifications_members`

                              LEFT JOIN `users`
                              ON        `notifications_members`.`users_id`   = `users`.`id`

                              LEFT JOIN `notifications_classes`
                              ON        `notifications_members`.`classes_id` = `notifications_classes`.`id`');

            if (!$r->rowCount()) {
                throw new CoreException(tr('No members found'), 'notfound');
            }

            log_console('#id   Notifications class             User', '', 'white');

            while ($member = sql_fetch($r)) {
                log_console(Strings::size($member['id'], 5, ' ', true) . ' members' .Strings::size($member['class_name'], 32).' '.Strings::size($member['user_name'], 32), '');
            }

            break;

        case 'remove':
            try {
                $data = s_get_user_class(cli_argument(1), cli_argument(2));
                $r    = sql_query('DELETE FROM `notifications_members` WHERE `classes_id` = :classes_id AND `users_id` = :users_id',

                                   array(':classes_id' => $data['classes_id'],
                                         ':users_id'   => $data['users_id']));

                log_console(tr('Removed "%count%" notification member', array('%count%' => isset_get($count, 0))), '', 'green');

            }catch(Exception $e) {
                throw new CoreException(tr('Failed to remove member from notifications class'), $e);
            }

            break;

        default:
            throw new CoreException(tr('Unknown method "%method%" specified', array('%method%' => $method)), 'unknown');
    }

}catch(Exception $e) {
    cli_error($e);
}
?>
