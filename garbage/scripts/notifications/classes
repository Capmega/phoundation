#!/usr/bin/php
<?php
/*
 * This script can create new notification classes
 */
$usage = "./scripts/base/notifications/classes list [all]\n".
         "./scripts/base/notifications/classes create name NAME methods sms|email description DESCRIPTION\n".
         "./scripts/base/notifications/classes modify ID|NAME name NAME methods sms|email description DESCRIPTION\n".
         "./scripts/base/notifications/classes delete|undelete|erase ID|NAME\n";

$help  = "The notifications/classes script can manage notification classes. You can list existing classes, create new ones, or modify delete, undelete and erase existing ones";

$quiet = true;
require_once(__DIR__.'/../../../libs/startup.php');
load_libs('notifications');



/*
 *
 */
if (!function_exists('s_set_status')) {
    function s_set_status($list, $status) {
        try {
            $in    = sql_in($list);
            $found = sql_list('SELECT `id` FROM `notifications_classes` WHERE `id` IN ('.implode(',', array_keys($in)).') OR `name` IN ('.implode(',', array_keys($in)).')', 'id', $in);

            if (!$found) {
                throw new CoreException(tr('s_set_status(): Specified notifications classes not found'));
            }

            $in            = sql_in($found);

            if ($status == 'erased') {
                /*
                 * Erase instead of setting status
                 */
                $r = sql_query('DELETE FROM `notifications_classes` WHERE `id` IN ('.implode(',', array_keys($in)).') AND `status` = "deleted"', $in);

            } else {
                $in[':status'] = $status;
                $r             = sql_query('UPDATE `notifications_classes` SET `status` = :status WHERE `id` IN ('.implode(',', array_keys($in)).')', $in);
            }

            return $r->rowCount();

        }catch(Exception $e) {
            throw new CoreException('s_set_status(): Failed', $e);
        }
    }
}



try {
    cli_only();

    switch ($method = cli_argument(0)) {
        case 'add':
            // FALLTHROUGH
        case 'create':
            try {
                $class = notifications_class_validate(array('name'        => cli_argument('name'       , true),
                                                            'methods'     => cli_argument('methods'    , true),
                                                            'description' => cli_argument('description', true)));

                sql_query('INSERT INTO `notifications_classes` (`created_by`, `name`, `methods`, `description`)
                           VALUES                              (:created_by , :name , :methods , :description )',

                           array(':created_by'   => isset_get($_SESSION['user']['id']),
                                 ':name'        => $class['name'],
                                 ':methods'     => $class['methods'],
                                 ':description' => $class['description']));

                log_console(tr('Created new notifications class "%class%"', array('%class%' => $class['name'])), '', 'green');

            }catch(Exception $e) {
                throw new CoreException(tr('Failed to create new notifications class'), $e);
            }

            break;

        case 'update':
            // FALLTHROUGH
        case 'modify':
            try {
                $class     = cli_argument(1);
                $old_class = sql_get('SELECT `id`, `name`, `methods`, `description` FROM `notifications_classes` WHERE `id` = :class OR `name` = :class', array(':class' => $class));

                if (!$old_class) {
                    throw new CoreException(tr('The specified class "%class%" does not exist', array('%class%' => $class)), 'not-exists');
                }

                $class = array_copy_clean($old_class, cli_arguments('name,methods,description'));
                $class = notifications_validate_class($class);

                sql_query('UPDATE `notifications_classes`

                           SET    `modifiedby`  = :modifiedby,
                                  `modifiedon`  = NOW(),
                                  `name`        = :name,
                                  `methods`     = :methods,
                                  `description` = :description

                           WHERE  `id`          = :id',

                           array(':id'          => $class['id'],
                                 ':modifiedby'  => isset_get($_SESSION['user']['id']),
                                 ':name'        => $class['name'],
                                 ':methods'     => $class['methods'],
                                 ':description' => $class['description']));

                log_console(tr('Modified notifications class "%class%"', array('%class%' => $old_class['name'])), '', 'green');

            }catch(Exception $e) {
                throw new CoreException(tr('Failed to update notifications class'), $e);
            }

            break;

        case 'list':
            $all = cli_argument('all');
            $r   = sql_query('SELECT    `notifications_classes`.`id`,
                                        `notifications_classes`.`name`,
                                        `notifications_classes`.`methods`,
                                        `notifications_classes`.`description`,
                                        COUNT(`notifications_members`.`id`) AS `members`

                              FROM      `notifications_classes`

                              LEFT JOIN `notifications_members`
                              ON        `notifications_members`.`classes_id` = `notifications_classes`.`id`

                              '.($all ? '' : ' WHERE `notifications_classes`.`status` IS NULL').'

                              GROUP BY  `notifications_classes`.`id`');

            if (!$r->rowCount()) {
                throw new CoreException(tr('No classes found'), 'notfound');
            }

            log_console('#id   Name             Methods                Members Description', '', 'white');

            while ($class = sql_fetch($r)) {
                log_console(Strings::size($class['id'], 5, ' ', true) . ' classes' .Strings::size($class['name'], 16).' '.Strings::size($class['methods'], 22).' '.Strings::size($class['members'], 8).' '.Strings::size($class['description'], 80), '');
            }

            break;

        case 'delete':
            try {
                $count = s_set_status(cli_argument(null), 'delete');
                log_console(tr('Deleted "%count%" notification classes', array('%count%' => $count)), '', 'green');

            }catch(Exception $e) {
                throw new CoreException(tr('Failed to delete notifications classes'), $e);
            }

            break;

        case 'undelete':
            try {
                $count = s_set_status(cli_argument(null), NULL);
                log_console(tr('Undeleted "%count%" notification classes', array('%count%' => $count)), '', 'green');

            }catch(Exception $e) {
                throw new CoreException(tr('Failed to undelete notifications classes'), $e);
            }

            break;

        case 'erase':
            try {
                $count = s_set_status(cli_argument(null), 'erase');
                log_console(tr('Erased "%count%" notification classes', array('%count%' => $count)), '', 'green');

            }catch(Exception $e) {
                throw new CoreException(tr('Failed to erase notifications classes'), $e);
            }

            break;

        default:
            throw new CoreException(tr('Unknown method "%method%" specified', array('%method%' => $method)), 'unknown');
    }

}catch(Exception $e) {
    cli_error($e);
}
?>
