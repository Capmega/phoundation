#!/usr/bin/php
<?php

declare(strict_types=1);

use Phoundation\Cli\CliDocumentation;
use Phoundation\Core\Log\Log;
use Phoundation\Data\Validator\ArgvValidator;
use Phoundation\Databases\Connectors\Connectors;
use Phoundation\Databases\Databases;
use Phoundation\Databases\Export;
use Phoundation\Exception\UnderConstructionException;
use Phoundation\Filesystem\Directory;
use Phoundation\Filesystem\Restrictions;
use Phoundation\Os\Processes\Commands\Databases\MysqlDump;
use Phoundation\Utils\Arrays;
use Phoundation\Utils\Enums\EnumCompareMode;
use Phoundation\Utils\Enums\EnumMatchMode;


/**
 * Script system/databases/export
 *
 * This script will export the specified database to the specified database file
 *
 * @author Sven Olaf Oostenbrink <so.oostenbrink@gmail.com>
 * @license http://opensource.org/licenses/GPL-2.0 GNU Public License, Version 2
 * @copyright Copyright (c) 2022 Sven Olaf Oostenbrink <so.oostenbrink@gmail.com>
 * @package Phoundation\Scripts
 */
CliDocumentation::usage('./pho system databases export -d mysql -b system -f system.sql');

CliDocumentation::help('This script will export the specified database to the specified database dump file


ARGUMENTS


-c / --connector CONNECTOR              The database connector to use. Must either exist in configuration or in the
                                        system database as a database connector. If not specified, the system connector 
                                        will be assumed

[-b / --database] DATABASE              The database to export.

-d / --driver DRIVER                    The database driver to use. One of MySQL, Redis, MongoDB, or elastic(search).
                                        The name is not case sensitive (NOTE: For the moment only MySQL is supported)

-f / --file FILE                        The file which to export to

[-g / --gzip]                           Will produce a gzip compressed database dump file

[-t / --timeout TIMEOUT]                Timeout in integer seconds before the process will be terminated due to timeout
                                        (defaults to 3600)');

CliDocumentation::autoComplete([
    'arguments' => [
        '-t,--timeout' => true,
        '-g,--gzip'    => false,
        '--file' => [
            'word'   => function ($word) { return Directory::new(DIRECTORY_DATA . 'sources/', DIRECTORY_DATA . 'sources/')->scan($word . '*.sql'); },
            'noword' => function ()      { return Directory::new(DIRECTORY_DATA . 'sources/', DIRECTORY_DATA . 'sources/')->scan('*.sql'); },
        ],
        '-c,--connector' => [
            'word'   => function ($word) { return Connectors::new()->load(true, true)->keepValues('sys', 'name',EnumMatchMode::starts_with)->getSourceColumn('name'); },
            'noword' => function ()      { return Connectors::new()->load(true, true)->getSourceColumn('name'); },
        ],
        '-d,--driver' => [
            'word'   => function ($word) { return Arrays::keepValues(Databases::getDrivers(), $word, match_mode: EnumMatchMode::starts_with); },
            'noword' => Databases::getDrivers()
        ],
        '-b,--database' => [
            'word'   => function ($word) { return sql()->listScalar('SHOW DATABASES LIKE :word', [':word' => '%' . $word . '%']); },
            'noword' => function ()      { return sql()->listScalar('SHOW DATABASES'); },
        ]
    ]
]);


// Validate arguments
$argv = ArgvValidator::new()
    ->select('-g,--gzip')->isOptional(false)->isBoolean()
    ->select('-t,--timeout'  , true)->isOptional(3600)->isInteger()->isMoreThan(0)
    ->select('-f,--file'     , true)->isOptional()->isFile(DIRECTORY_DATA . 'sources/', Restrictions::writable(DIRECTORY_DATA . 'sources/', tr('Export')), false)
    ->select('-d,--driver'   , true)->sanitizeLowercase()->isInArray(Databases::getDrivers())
    ->select('-c,--connector', true)->isOptional('system')->sanitizeLowercase()->isInArray(Connectors::new()->load(true, true)->getSourceColumn('name'))
    ->select('-b,--database' , true)->isVariable()
    ->validate();


// Export data for the requested driver
$file = Export::new()
    ->setConnector($argv['connector'])
    ->setDatabase($argv['database'])
    ->setDriver($argv['driver'])
    ->setTimeout($argv['timeout'])
    ->setGzip($argv['gzip'])
    ->dump($argv['file']);


// Done!
Log::success(tr('Finished exporting ":type" type database ":database" to file ":file"', [
    ':type'     => $argv['driver'],
    ':file'     => $file,
    ':database' => $argv['database'],
]));
