#!/usr/bin/php
<?php

declare(strict_types=1);

use Phoundation\Accounts\Users\User;
use Phoundation\Cli\Cli;
use Phoundation\Cli\Documentation;
use Phoundation\Core\Config;
use Phoundation\Core\Log\Log;
use Phoundation\Data\DataEntry\Exception\DataEntryNotExistsException;
use Phoundation\Data\Validator\ArgvValidator;


/**
 * Script accounts/users/authenticate
 *
 * This script can be used to test the authentication for the specified user
 *
 * @author Sven Olaf Oostenbrink <so.oostenbrink@gmail.com>
 * @license http://opensource.org/licenses/GPL-2.0 GNU Public License, Version 2
 * @copyright Copyright (c) 2022 Sven Olaf Oostenbrink <so.oostenbrink@gmail.com>
 * @package Phoundation\Scripts
 */

Documentation::autoComplete(User::getAutoComplete([
    'positions' => [
        0 => [
            'word'   => 'SELECT `email` FROM `accounts_users` WHERE `email` LIKE :word AND `status` IS NULL',
            'noword' => 'SELECT `email` FROM `accounts_users` WHERE `status` IS NULL LIMIT ' . Config::getInteger('shell.autocomplete.limit', 50)
        ]
    ],
]));
Documentation::usage('./pho accounts users password USER');
Documentation::help('This script can be used to test the authentication for the specified user



ARGUMENTS



-');



// Validate arguments
$argv = ArgvValidator::new()
    ->select('user')->hasMinCharacters(2)->hasMaxCharacters(255)
    ->noArgumentsLeft()
    ->validate();



try {
    // Get user
    $user = User::get($argv['user']);

    // Add password for this user
    $argv['password']          = Cli::readPassword(tr('Please type the users password:'));
    $argv['password_validate'] = Cli::readPassword(tr('Please re-type the users password:'));

    // Update password
    $user->setPassword($argv['password'], $argv['password_validate']);

}catch (DataEntryNotExistsException $e) {
    throw $e->makeWarning();
}



Log::success(tr('Successfully set new password for user ":user"', [':user' => $user->getDisplayName()]));