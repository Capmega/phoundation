#!/usr/bin/php
<?php

declare(strict_types=1);

use Phoundation\Cli\CliDocumentation;
use Phoundation\Core\Log\Log;
use Phoundation\Data\Validator\ArgvValidator;
use Phoundation\Developer\Phoundation\Exception\PhoundationBranchNotExistException;
use Phoundation\Developer\Phoundation\Phoundation;
use Phoundation\Developer\Project\Project;
use Phoundation\Filesystem\Directory;


/**
 * Script system/update
 *
 * This script can be used to test the authentication for the specified user
 *
 * @author Sven Olaf Oostenbrink <so.oostenbrink@gmail.com>
 * @license http://opensource.org/licenses/GPL-2.0 GNU Public License, Version 2
 * @copyright Copyright (c) 2022 Sven Olaf Oostenbrink <so.oostenbrink@gmail.com>
 * @package Phoundation\Scripts
 */

CliDocumentation::autoComplete([
    'arguments' => [
        '-b,--branch' => [
            'word'   => function ($word) { return Phoundation::new()->getPhoundationBranches()->getMatchingKeys($word); },
            'noword' => function ()      { return Phoundation::new()->getPhoundationBranches()->getKeys(); },
        ],
        '-c,--check'       => false,
        '-l,--local'       => false,
        '-n,--no-plugins'  => false,
        '-m,--message'     => true,
        '-p,--phoundation' => [
            'word'   => function ($word) { return Directory::new('/var/www/html', '/var/www/html')->scan($word. '*'); },
            'noword' => function ()      { return Directory::new('/var/www/html', '/var/www/html')->scan(); },
        ],
        '-s,--signed'      => false,
        '--skip-caching'   => false,
    ]
]);

CliDocumentation::usage('./pho system update [OPTIONS]
./pho system update -b BRANCH
./pho system update -b  BRANCH --check
./pho system update -l --branch BRANCH
');

CliDocumentation::help('This command will update your Phoundation libraries and list



ARGUMENTS



-b / --branch                           The branch from which to update

[-c / --check]                          If specified will only check for available updates

[-l / --local]                          If specified update from a local Phoundation core repository

[-m / --message]                        The git commit message for this update. If not specified, a default will be used

[-n / --no-plugins]                     If specified will not update the plugins

[--no-phoundation]                      If specified will not update phoundation core files

[-p / --phoundation]                    If specified should contain the path to your local Phoundation installation

[-s / --signed]                         If specified will make a signed commit. This requires your git setup to be
                                        configured correctly for this

[--skip-caching]                        If specified will skip caching all Phoundation libraries which is normally done
                                        to avoid loading incomplete library classes against each other during and after
                                        the update has been finished. This may want to be skipped if a current library
                                        has a bug, or a new functionality executing during the finishing phase of the
                                        update system actually is expected or required');



// Get command line arguments
$argv = ArgvValidator::new()
    ->select('-b,--branch', true)->isOptional()->isVariable()
    ->select('-c,--check')->isOptional()->isBoolean()
    ->select('-l,--local')->isOptional()->isBoolean()
    ->select('-m,--message', true)->isOptional()->isPrintable()->hasMinCharacters(10)->hasMaxCharacters(1024)
    ->select('-n,--no-plugins')->isOptional()->isBoolean()
    ->select('--no-phoundation')->isOptional()->isBoolean()
    ->select('-p,--phoundation', true)->isOptional()->isPrintable()
    ->select('-s,--signed')->isOptional(false)->isBoolean()
    ->select('--skip-caching')->isOptional(false)->isBoolean()
    ->validate();



if ($argv['local']) {
    try {
        if ($argv['no_phoundation']) {
            Log::warning('Not updating phoundation core files');
        } else {
            Log::action(tr('Pulling updates from local Phoundation installation...'));
            Project::new()->updateLocalProject($argv['branch'], $argv['message'], $argv['signed'], $argv['phoundation'], $argv['skip_caching']);
        }

        if ($argv['no_plugins']) {
            Log::warning('Not updating plugins');
        } else {
            Log::action(tr('Pulling updates from local Phoundation plugins installation...'));
            Project::new()->updateLocalProjectPlugins($argv['branch'], $argv['message'], $argv['signed'], $argv['phoundation'], $argv['skip_caching']);
        }

    } catch (PhoundationBranchNotExistException $e) {
        throw $e->makeWarning();
    }

} elseif ($argv['check']) {
    Log::information(tr('Checking for Phoundation updates...'));
    Project::checkUpdates();

} else {
    Log::information(tr('Updating Phoundation...'));
    Project::update();
}
