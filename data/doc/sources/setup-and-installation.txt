@title Setup and Installation

    This document contains the steps required to start a new Phoundation project

    NOTE: This may seem like a lot to do, but the document is VERY verbose and so in reality there is not that much to do

    1. Definitions and assumptions:
        1.1. You have a projects directory in your home directory. When we refer to the PROJECTS_DIRECTORY, we refer to ~/projects
        1.2. You organize your projects by customers. As an example customer, we will be using capmega. When we refer to the CUSTOMERS_DIRECTORY, we refer to ~/projects/capmega
        1.3. Your project directories are called after your FQDN (Fully Qualified Domain Name), like phoundation.org. When we refer to the PROJECTS_DIRECTORY, we refer to ~/projects/capmega/phoundation.org
        1.4. You are familiar with git. A refresher follows anyway:
            1.4.1. To create a new empty repository on a server of your own, use "git init --bare PROJECT.git". If you want others to be able to access and commit in this repository, use "git init --bare --shared=0660 PROJECT.git"
            1.4.2. To clone a repository, use "git clone URL" where URL is the repository URL
            1.4.3. Do not forget to setup your git system to have at least a name and email configured! See https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup for more information

    2. To be able to run updates, it is required to have a copy of the entire Phoundation project on your machine
        2.1. The Phoundation project is available on github. The main page URL is https://github.com/Capmega/phoundation. The SSH git repository URL can be found over there, but should be git@github.com:Capmega/phoundation.git. The HTTPS URL is https://github.com/Capmega/phoundation.git, When we refer to the PHOUNDATION_URL, we refer to one of the SSH or HTTPS git repository URL's.
        2.2. cd PROJECTS_DIRECTORY; "git clone URL PHOUNDATION_URL
        2.3. cd phoundation.org
        2.4. git checkout production

    3. You will need a git repository for your project. This can be either on github, or any similar provider, or you can host your own git server.
        3.1. It is recommended to have PROJECTNAME be the FQDN (Fully Qualified Domain Name) of your project, like "phoundation.org"
        3.2. If you want to setup your own shared git repository over SSH, make sure you have an SSH capable server available. Here we will assume the base git directory is /git on your server and that here too, you organize your projects by customer.
        3.2.1 mkdir /git/CUSTOMER
        3.2.2 cd /git/CUSTOMER
        3.2.3 git init --bare --shared=0660 PROJECTNAME.git (This is if you want to have other users have access to your project as well. If you don't want that, the --shared=0660 can be omitted)

    4. On your development server, clone the new empty project
        4.1. cd PROJECTS_DIRECTORY
        4.2. mkdir CUSTOMERS_DIRECTORY; cd CUSTOMERS_DIRECTORY
        4.3. git clone URL
            4.3.1. If you have your git repository hosted on github or a similar provider , the URL can be found on your project page
            4.3.2. If you host your own repository, the URL will very probably be ssh://YOURSERVER:OPTIONAL_PORT/git/CUSTOMER/PROJECT.git. YOURSERVER will be the IP or domain of your server, the :OPTIONAL_PORT is optional and only required if the SSH service on your server does not use the default port 22 (Which is good for security), CUSTOMER is the customers name, PROJECT is the project name.
            4.3.3. If git "complains" with a warning about having cloned an empty repository, that is okay, because that is exactly what we did. You know what you did.

    5. Now go to your projects directory, and pull the latest stable version of Phoundation in
        5.1. First check on the phoundation github page https://github.com/Capmega/phoundation/releases what the latest release is. As of this writing, the latest release is "v2.4.93" When we refer to VERSION, we refer to whatever the latest stable release is
        5.1. cd PROJECTS_DIRECTORY
        5.2. git pull PHOUNDATION_DIRECTORY VERSION
        5.3. You will see a lot of files arriving, which means that you just imported all phoundation files.
        5.4. ls -l
            5.4.1 You should see a list of files that looks like this:

            total 44K
            drwxr-xr-x 3 user user 4.0K mar 26 23:08 config/
            drwxr-xr-x 8 user user 4.0K feb  4 17:10 data/
            drwxr-xr-x 4 user user 4.0K dic 14 21:54 init/
            lrwxrwxrwx 1 user user   11 dic 14 21:54 libs -> www/en/libs/
            -rw-r--r-- 1 user user  18K dic 14 21:54 LICENSE
            -rw-rw---- 1 user user 1.8K mar 22 18:23 README.md
            drwxr-xr-x 6 user user 4.0K feb  7 16:21 scripts/
            drwxr-xr-x 3 user user 4.0K feb  7 13:21 www/

        5.5. The location where you are now is commonly (also internally in the code) referred to as the ROOT directory of the project. When we refer to ROOT, we refer to this diretory
        5.6. git add .; git commit -m "INIT"

    6. (Optional) Explore the system
        6.1 The only path that should be available to your webserver is ROOT/www. This is for security, the webserver simply won't be able to access anything beyond, unless its by symlinks which you can add as needed. Ensure to configure your webserver that either ROOT/www or ROOT/www/en is "mounted" as the root of your FQDN!
        6.2. ROOT/config contains all configuration files for your project
            6.2.1. The ROOT/config/project.php file contains basic project configuration.
            6.2.1. ROOT/config/base contains default configurations that is the same for all projects. Do NOT modify this file as any subsequent updates will overwrite this file!
            6.2.2. ROOT/config/server will contain all your webserver configuration files. If, for example, you are using Apache on Ubuntu, then /etc/apache/sites-available will contain symlinks to the files in this directory. This is done so that webserver configuration files are easily exchangeable.
                6.2.2.1 Update all files in ROOT/config/server so that they reflect your FQDN, your project location, and your PROJECT_ENVIRONMENT.
        6.3. ROOT/data contains all data files.
            6.3.1. Typically, you would store a template you downloaded from themeforrest (or similar) in ROOT/data/templates, for exmaple.
            6.3.2. ROOT/data/tmp will hold all temporary files
            6.3.3. ROOT/data/tmp/pub will hold all temporary files that the webserver might be able to access through a symlink from the ROOT/www directory and below
            6.3.4. ROOT/data/cache will contain cache in file format
            6.3.5. ROOT/data/log will contain your log files. Typically, for ease of use, all log files are condensed into one large log file called syslog
                6.3.5.1. For debugging, it is very useful to have a shell tab open with tail -F ROOT/data/log/syslog
            6.3.6. ROOT/data/content will contain content data for your website, like dynamic pictures that were uploaded for a blog, etc.
        6.4. The ROOT/init directory will contain system initialization files. These init files, upon updating your system, will make modifications to your database, or if needed, even your project files.
        6.5. The ROOT/scripts directory contains all shell scripts with which you can manage your project. Please refer to the scripts documentation for more information
        6.6. The ROOT/www directory contains all your files that your webserver will have access to.
            6.6.1 There are two ways the system can be used.
                6.6.1.1 Direct access: The webserver executes all files in ROOT/www directly in accordance to mod_rewrite or alike functionalities (Not recommended anymore)
                    6.6.1 If your project is single language, please mount your FQDN to ROOT/www/LANGUAGE, where LANGUAGE is the 2 letter language code of the language you want to use on your website
                    6.6.1 If your project is multilingual, please mount your FQDN to ROOT/www. The sytem will then use the FQDN/LANGUAGE_CODE to determine in which sub directory it will access your website files
                6.6.1.2 Route access: All traffic will be sent to the script ROOT/www/route.php, which will then execute the appropriate website file in the appropriate language

        7. Setup your system
            7.1 ./script/init/setup
                7.1.1. This script will ask you a number of basic questions about your project and do most of the setup automatically for you.
                7.1.2. The script will modify ROOT/config/project.php, ROOT/config/production.php, and ROOT/config/local.php to have the configuration as you specified during setup
                7.1.3. In the future (soon!) it will also setup the basic custom libraries for you and update your webserver configuration files automatically as well
                    7.1.3.1. If your user has sudo access, it will even be able to completely setup your webserver for you automatically
                7.1.4. When the script is done it will automatically run the ./scripts/base/init script which will initialize your database
                7.1.5. For sake of ease, it is recommended that on your local development machine, you have a database user "phoundation" with password "phoundation" which makes for easy configuration during development
                    7.1.5.1. For sake of security, do NOT use database user phoundation on production servers, and whatever you do, do NOT use "phoundation" as a password!

















    UPDATE APACHE
      cd /etc/apache2/sites-available
      cp base PROJECTNAME
      Update PROJECTNAME file to use the correct PROJECTNAME_ENVIRONMENT
      Add PROJECTNAME_SUBENVIRONMENT, if project requires sub environments
      Update DocumentDirectory Apache configuration, update log file names, etc.
      Add PROJECTNAME to /etc/hosts file, so you can access it directly from browser
      Run a2ensite <project config file> to enable site on apache server

    SETUP BASIC CONFIGURATION
    Edit ROOT/config/project.php
      Update define('PROJECT' to the name of your project (UPPER CASE)
      Update define('REQUIRE_SUBENVIRONMENTS' to true if this project requires subenvironments
      Update define('SEED' to some large random string

    Edit ROOT/config/production.php
      Update $_CONFIG['cookie']['domain'], $_CONFIG['db']['db'], $_CONFIG['domain'], and $_CONFIG['name'] to correct values
      Update $_CONFIG['sso'] to correct values (if required, if not, set to false)
      Update $_CONFIG['deploy'] configuration

    INITIALIZE
      Goto the projects root directory
      ./script/base/init (Init should finish successfully)

    CHECK
      Open project domain in browser

    UPDATE GIT
      git ci -m 'Updated config'
      git push origin master